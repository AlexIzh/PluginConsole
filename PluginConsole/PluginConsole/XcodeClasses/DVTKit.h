/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */
 
#pragma GCC system_header

#import "DVTFoundation.h"

@class DVTLibrary;
@class DVTViewController;
@class DVTSourceLandmarkItem;
@class DVTLayoutManager;
@class DVTTextStorage;
@class DVTLibraryAssetView;
@class DVTLibraryAsset;
@class DVTFirstResponderDrawingStrategy;
@class DVTTabChooserView;
@class DVTReplacementView;
@class DVTSearchField;
@class DVTFindBarBorderedView;
@class DVTBorderedView;
@class DVTFindBarOptionsCtrl;
@class DVTSharedFindState;
@class DVTSourceTextStorage;
@class DVTSourceTextScrollView;
@class DVTComparisonScroller;
@class DVTSourceTextView;
@class _DVTMarkerList;
@class DVTTextCompletionController;
@class DVTTextCompletionDataSource;
@class DVTDualProxyWindow;
@class DVTWindowProxyDragButton;
@class DVTImageAndTextCell;
@class DVTRolloverImageButton;
@class DVTFilteringMenuSearchView;
@class DVTTextFold;
@class DVTHUDPopUpController;
@class DVTDualProxyWindowTitleView;
@class DVTFontTextField;
@class DVTTypeCompletionHandler;
@class DVTTileViewItem;
@class DVTHUDPopUpView;
@class DVTLibraryController;
@class DVTLibraryDetailPopUpController;
@class DVTMessageBubbleAnnotation;
@class DVTMorphingDragImageView;
@class DVTPlistModel;
@class DVTPlistSelection;
@class DVTPlistStructureDefinition;
@class DVTScopeBarView;
@class DVTTextAnnotationIndicatorAnimation;
@class DVTTextPageGuideVisualization;
@class DVTTextSidebarView;
@class DVTSplitViewItem;
@class DVTSearchFieldCell;
@class DVTTabSwitcher;
@class DVTTabbedWindowTabViewItem;
@class DVTTabButton;
@class DVTTextCompletionSession;
@class DVTTextCompletionScrollView;
@class DVTTextCompletionWindowResizeAnimation;
@class DVTTextCompletionTableView;







#pragma mark Named Structures

struct _DVTFindBarFlags {
    unsigned int findResultsValid:1;
    unsigned int userIsChangingFindString:1;
    unsigned int userIsChangingReplaceString:1;
    unsigned int userIsRestoringHistory:1;
    unsigned int dismissRestoresSelection:1;
    unsigned int ignoreNextInvalidate:1;
    unsigned int viewIsInstalled:1;
    unsigned int _reserved:29;
};

struct _DVTIncrementalFindBarFlags {
    unsigned int currentResultSet:1;
    unsigned int foundResultsSet:1;
    unsigned int textFindableImplementsSupportedMatchingOptions;
    unsigned int _reserved:30;
};

struct _DVTTextChangeEntry {
    struct _NSRange _field1;
    long long _field2;
    struct _NSRange _field3;
    long long _field4;
    double _field5;
};

struct _DVTTextLineOffsetTable {
    unsigned long long capacity;
    unsigned long long count;
    unsigned long long *offsets;
    unsigned long long deferredAdjustmentIndex;
    long long deferredAdjustment;
};

#pragma mark Typedef'd Structures

typedef struct {
    double minX;
    double maxX;
    double minY;
    double maxY;
} CDStruct_bf6d4a14;

#pragma mark -

/*
 * File: /Developer/Applications/Xcode.app/Contents/SharedFrameworks/DVTKit.framework/Versions/A/DVTKit
 * UUID: 9BB834DC-BA77-3933-B7E5-5CFA69FADA1E
 * Arch: Intel x86-64 (x86_64)
 *       Current version: 1174.0.0, Compatibility version: 1.0.0
 *       Minimum Mac OS X version: 10.7.0
 *
 *       Objective-C Garbage Collection: Required
 */


/*
@interface CALayer (DVTCALayerAdditions)
- (void)dvt_setPositionAndMakePixelAligned:(struct CGPoint)arg1;
@end

@interface CATransaction (DVTCATransactionAdditions)
+ (void)dvt_preserveTransactionPropertyStateDuring:(id)arg1;
@end
 */

@interface DVTAbstractLibraryGroup : NSObject
{
    DVTAbstractLibraryGroup *_parentGroup;
    DVTMutableOrderedSet *_childGroups;
    DVTLibrary *_library;
    NSString *_title;
    NSImage *_image;
    id _groupComparator;
    BOOL _titleIsEditable;
}

+ (id)libraryGroupWithPropertyListRepresentation:(id)arg1 library:(id)arg2 andIdentifiedAssets:(id)arg3;
+ (id)defaultImage;
@property(copy, nonatomic) id groupComparator; // @synthesize groupComparator=_groupComparator;
@property(retain, nonatomic) DVTAbstractLibraryGroup *parentGroup; // @synthesize parentGroup=_parentGroup;
@property BOOL titleIsEditable; // @synthesize titleIsEditable=_titleIsEditable;
@property(copy, nonatomic) NSString *title; // @synthesize title=_title;
@property(retain) NSImage *image; // @synthesize image=_image;
@property(readonly) DVTLibrary *library; // @synthesize library=_library;
- (id)description;
- (void)describeInto:(id)arg1 withDepth:(long long)arg2;
- (BOOL)containsAsset:(id)arg1;
- (void)removeAllAssets;
- (void)removeAsset:(id)arg1;
- (void)addAsset:(id)arg1;
- (void)insertAsset:(id)arg1 atIndex:(long long)arg2;
- (id)deepAssets;
- (id)assetsEnumerator;
- (id)assets;
- (long long)numberOfAssets;
- (BOOL)assetsAreEditable;
- (id)firstChildGroupWithTitle:(id)arg1;
- (id)deepChildGroups;
- (long long)depth;
- (id)ancestors;
- (id)lineage;
- (id)titlePath;
- (id)indexPath;
- (BOOL)isLeafGroup;
@property(readonly) long long numberOfChildGroups;
@property(retain) NSArray *childGroups;
- (id)childGroupsEnumerator;
- (long long)indexOfGroup:(id)arg1;
- (void)removeAllGroups;
- (void)removeChildGroup:(id)arg1;
- (void)addChildGroup:(id)arg1;
- (void)insertChildGroup:(id)arg1 atIndex:(long long)arg2;
- (BOOL)groupsAreEditable;
- (void)didChangeGroups;
- (void)willChangeGroups;
- (void)didChangeAssets;
- (void)willChangeAssets;
- (void)buildPropertyListRepresentation:(id)arg1;
- (id)propertyListRepresentation;
- (id)initWithPropertyListRepresentation:(id)arg1 library:(id)arg2 andIdentifiedAssets:(id)arg3;
- (id)initWithTitle:(id)arg1 andLibrary:(id)arg2;

@end

@interface DVTAnnotation : NSObject
{
    double _precedence;
    id _representedObject;
    BOOL _visible;
}

@property(retain) id representedObject; // @synthesize representedObject=_representedObject;
@property(getter=isVisible) BOOL visible; // @synthesize visible=_visible;
@property double precedence; // @synthesize precedence=_precedence;
@property(readonly) BOOL hideCarets;
- (id)annotationDisplayDescription;
- (id)annotationDisplayName;
- (long long)comparePrecedence:(id)arg1;
- (id)init;

@end

@interface DVTTextAnnotation : DVTAnnotation
{
    NSMutableArray *_textStorages;
    NSMutableDictionary *_themesByState;
    id /*<DVTTextAnnotationDelegate>*/ _delegate;
    DVTTextDocumentLocation *_location;
    NSArray *_secondaryLocations;
    DVTMutableRangeArray *_highlightedRanges;
    struct _NSRange _paragraphRange;
    unsigned long long _paragraphHash;
    NSImage *_sidebarMarkerImage;
    double _sidebarMarkerVerticalPadding;
    double _sidebarMarkerHorizontalOffset;
    double _sidebarMarkerOpacity;
    unsigned long long _highlightSidebarStyle;
    unsigned long long _severity;
    struct {
        unsigned int sidebarMarkerAlignment:4;
        unsigned int wantsDisplayOverLineNumber:1;
        unsigned int wantsReplaceLineNumber:1;
        unsigned int wantsInvertedLineNumber:1;
        unsigned int lineHighlightVisible:1;
        unsigned int highlightedRangesVisible:1;
        unsigned int userDraggable:1;
        unsigned int userRemovable:1;
        unsigned int isParagraphEdited:1;
    } _taFlags;
    BOOL _wantsScrollbarMarker;
    BOOL _scrollbarMarkerHighlight;
    BOOL _lazyInvalidation;
}

+ (void)drawLineHighlightForAnnotations:(id)arg1 highlightRanges:(BOOL)arg2 textView:(id)arg3 getParaRectBlock:(id)arg4;
+ (void)initialize;
@property(retain) id /*<DVTTextAnnotationDelegate>*/ delegate; // @synthesize delegate=_delegate;
@property BOOL lazyInvalidation; // @synthesize lazyInvalidation=_lazyInvalidation;
@property BOOL scrollbarMarkerHighlight; // @synthesize scrollbarMarkerHighlight=_scrollbarMarkerHighlight;
@property BOOL wantsScrollbarMarker; // @synthesize wantsScrollbarMarker=_wantsScrollbarMarker;
@property(nonatomic) double sidebarMarkerOpacity; // @synthesize sidebarMarkerOpacity=_sidebarMarkerOpacity;
@property(nonatomic) unsigned long long highlightSidebarStyle; // @synthesize highlightSidebarStyle=_highlightSidebarStyle;
@property(nonatomic) double sidebarMarkerHorizontalOffset; // @synthesize sidebarMarkerHorizontalOffset=_sidebarMarkerHorizontalOffset;
@property double sidebarMarkerVerticalPadding; // @synthesize sidebarMarkerVerticalPadding=_sidebarMarkerVerticalPadding;
@property(retain, nonatomic) NSImage *sidebarMarkerImage; // @synthesize sidebarMarkerImage=_sidebarMarkerImage;
@property unsigned long long severity; // @synthesize severity=_severity;
@property(readonly) struct _NSRange paragraphRange; // @synthesize paragraphRange=_paragraphRange;
@property(retain, nonatomic) DVTTextDocumentLocation *location; // @synthesize location=_location;
- (id)annotationDisplayDescription;
- (BOOL)isFocusedInTextView:(id)arg1;
- (void)adjustParagraphIndexBy:(long long)arg1 lengthBy:(long long)arg2;
- (id)description;
- (void)fontAndColorThemeChanged:(id)arg1;
- (void)invalidateDisplayAndLayoutIfNeeded:(BOOL)arg1;
- (void)setNeedsInvalidate;
- (long long)comparePrecedenceAndLayering:(id)arg1;
- (struct CGRect)sidebarMarkerRectForFirstLineRect:(struct CGRect)arg1;
- (id)currentStateInTextView:(id)arg1;
- (void)drawHighlightedRangesInRect:(struct CGRect)arg1 textView:(id)arg2;
- (BOOL)drawsHighlightedRanges;
- (void)drawLineHighlightInRect:(struct CGRect)arg1 textView:(id)arg2;
- (BOOL)drawsLineHighlight;
- (void)drawSidebarMarkerIconInRect:(struct CGRect)arg1 textView:(id)arg2;
- (void)annotationWillDrawInTextView:(id)arg1;
@property(getter=isUserRemovable) BOOL userRemovable;
@property(getter=isUserDraggable) BOOL userDraggable;
- (void)synchronizeHighlightedRangesWithLocationsForTextStorage:(id)arg1;
- (void)removeAllHighlightedRanges;
- (void)removeHighlightedRange:(struct _NSRange)arg1;
- (void)removeHighlightedRangeAtIndex:(long long)arg1;
- (void)insertHighlightedRange:(struct _NSRange)arg1 atIndex:(long long)arg2;
- (void)addHighlightedRange:(struct _NSRange)arg1;
- (void)removeObjectFromHighlightedRangesAtIndex:(unsigned long long)arg1;
- (void)insertObject:(id)arg1 inHighlightedRangesAtIndex:(unsigned long long)arg2;
@property(copy) NSArray *highlightedRanges; // @synthesize highlightedRanges=_highlightedRanges;
@property(getter=isHighlightedRangesVisible) BOOL highlightedRangesVisible;
- (id)_highlightedRanges;
@property(getter=isLineHighlightVisible) BOOL lineHighlightVisible;
@property(readonly) DVTSourceLandmarkItem *enclosingLandmarkItem;
@property BOOL wantsInvertedLineNumber;
@property BOOL wantsReplaceLineNumber;
@property BOOL wantsDisplayOverLineNumber;
- (void)setSidebarMarkerTopMargin:(double)arg1;
@property unsigned long long sidebarMarkerAlignment;
- (void)setVisible:(BOOL)arg1;
- (void)setTheme:(id)arg1 forState:(id)arg2;
- (id)themeForState:(id)arg1;
- (void)resolveLocationIfNeededForTextStorage:(id)arg1;
@property(getter=isParagraphEdited) BOOL paragraphEdited;
@property(copy) NSArray *secondaryLocations; // @synthesize secondaryLocations=_secondaryLocations;
- (void)removeTextStorage:(id)arg1;
- (void)addTextStorage:(id)arg1;
@property(readonly) NSArray *textStorages;
- (id)init;

@end

@interface DVTAccessoryViewAnnotation : DVTTextAnnotation
{
    DVTViewController *_viewController;
    Class _controllerClass;
}

@property(readonly) NSView *view;
@property(readonly) DVTViewController *viewController;
@property(readonly, getter=isViewLoaded) BOOL viewLoaded;
- (id)initWithViewControllerClass:(Class)arg1;

@end

@interface DVTAnnotatingTypesetter : NSATSTypesetter
{
    NSTextContainer *_annotationTextContainer;
    DVTLayoutManager *_annotationLayoutManager;
    DVTTextStorage *_annotationTextStorage;
    double _mostRecentWrappedLineIndentation;
}

- (double)baselineOffsetInLayoutManager:(id)arg1 glyphIndex:(unsigned long long)arg2;
- (void)layoutGlyphsInLayoutManager:(id)arg1 startingAtGlyphIndex:(unsigned long long)arg2 maxNumberOfLineFragments:(unsigned long long)arg3 nextGlyphIndex:(unsigned long long *)arg4;
- (double)paragraphSpacingAfterGlyphAtIndex:(unsigned long long)arg1 withProposedLineFragmentRect:(struct CGRect)arg2;
- (void)setLocation:(struct CGPoint)arg1 withAdvancements:(const double *)arg2 forStartOfGlyphRange:(struct _NSRange)arg3;
- (void)willSetLineFragmentRect:(struct CGRect *)arg1 forGlyphRange:(struct _NSRange)arg2 usedRect:(struct CGRect *)arg3 baselineOffset:(double *)arg4;
- (void)getLineFragmentRect:(struct CGRect *)arg1 usedRect:(struct CGRect *)arg2 remainingRect:(struct CGRect *)arg3 forStartingGlyphAtIndex:(unsigned long long)arg4 proposedRect:(struct CGRect)arg5 lineSpacing:(double)arg6 paragraphSpacingBefore:(double)arg7 paragraphSpacingAfter:(double)arg8;
- (id)_annotationTextStorageForChracterRange:(struct _NSRange)arg1 availableWidth:(double)arg2;
- (id)init;

@end

@interface DVTAnnotationContext : NSObject
{
    DVTFileDataType *_fileDataType;
}

@property(copy) DVTFileDataType *fileDataType; // @synthesize fileDataType=_fileDataType;
- (id)description;
- (id)initWithFileDataType:(id)arg1;
- (id)init;

@end

@interface DVTAnnotationManager : NSObject
{
    id <DVTAnnotationManagerDelegate> _delegate;
    NSMutableArray *_annotationProviders;
    DVTAnnotationContext *_context;
}

@property(retain) id <DVTAnnotationManagerDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain) DVTAnnotationContext *context; // @synthesize context=_context;
@property(retain) NSMutableArray *annotationProviders; // @synthesize annotationProviders=_annotationProviders;
- (void)removeAllAnnotationProviders;
- (void)setupAnnotationProvidersWithContext:(id)arg1;
- (id)_installObservationBlockForAnnotationProvider:(id)arg1;

@end

@interface DVTAnnotationProvider : NSObject
{
    NSMutableSet *_annotations;
}

+ (id)annotationProviderForContext:(id)arg1 error:(id *)arg2;
+ (void)initialize;
- (void)providerWillUninstall;
- (id)init;

// Remaining properties
@property(copy) NSSet *annotations; // @dynamic annotations;
@property(readonly) NSMutableSet *mutableAnnotations; // @dynamic mutableAnnotations;

@end

@interface DVTApplication : NSApplication
{
    DVTHashTable *_actionMonitors;
}

- (void)presentError:(id)arg1;
- (void)presentError:(id)arg1 modalForWindow:(id)arg2 delegate:(id)arg3 didPresentSelector:(SEL)arg4 contextInfo:(void *)arg5;
- (id)massageErrorForInternalMessage:(id)arg1;
- (void)errorPresentationDidCompleteWithResultCode:(long long)arg1 context:(void *)arg2;
- (BOOL)sendAction:(SEL)arg1 to:(id)arg2 from:(id)arg3;
- (id)addActionMonitorWithHandlerBlock:(id)arg1;

@end

@interface DVTApplicationActionMonitorToken : NSObject <DVTObservingToken>
{
    id _handlerBlock;
}

@property(readonly) id handlerBlock; // @synthesize handlerBlock=_handlerBlock;
@property(readonly, getter=isCancelled) BOOL cancelled;
- (void)cancel;
- (id)initWithHandlerBlock:(id)arg1;

@end

@interface DVTAssetAndGroupSet : NSObject
{
    DVTLibraryAssetView *_view;
    DVTLibraryAsset *_asset;
    NSSet *_groups;
    BOOL _isObservingAsset;
}

+ (id)observedAssetKeyPaths;
@property(readonly) NSSet *groups; // @synthesize groups=_groups;
@property(readonly) DVTLibraryAsset *asset; // @synthesize asset=_asset;
@property(readonly) DVTLibraryAssetView *view; // @synthesize view=_view;
- (void)assetViewWillDraw:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isEqualToAssetAndGroupSet:(id)arg1;
- (unsigned long long)hash;
- (id)initWithAsset:(id)arg1 andGroups:(id)arg2;

@end

@interface DVTAssetDetailTextView : NSTextView
{
    DVTFirstResponderDrawingStrategy *_firstResponderDrawingStrategy;
    BOOL _showsFirstResponder;
}

@property BOOL showsFirstResponder; // @synthesize showsFirstResponder=_showsFirstResponder;
- (void)viewWillMoveToWindow:(id)arg1;
- (BOOL)resignFirstResponder;
- (BOOL)becomeFirstResponder;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface DVTLayoutView_ML : NSView
{
    NSMutableDictionary *invalidationTokens;
    BOOL _layoutNeeded;
    BOOL _implementsLayoutCompletionCallback;
    BOOL _implementsDrawRect;
}

+ (void)_layoutWindow:(id)arg1;
+ (void)_recursivelyLayoutSubviewsOfView:(id)arg1 populatingSetWithLaidOutViews:(id)arg2;
+ (void)_doRecursivelyLayoutSubviewsOfView:(id)arg1 populatingSetWithLaidOutViews:(id)arg2 completionCallBackHandlers:(id)arg3;
+ (void)scheduleWindowForLayout:(id)arg1;
+ (id)alreadyLaidOutViewsForCurrentDisplayPassOfWindow:(id)arg1;
+ (id)validatorForWindow:(id)arg1;
@property(getter=isLayoutNeeded) BOOL layoutNeeded; // @synthesize layoutNeeded=_layoutNeeded;
- (BOOL)wantsDefaultClipping;
- (void)stopInvalidatingLayoutWithChangesToKeyPath:(id)arg1 ofObject:(id)arg2;
- (void)invalidateLayoutWithChangesToKeyPath:(id)arg1 ofObject:(id)arg2;
- (void)_autoLayoutViewViewFrameDidChange:(id)arg1;
- (void)stopInvalidatingLayoutWithFrameChangesToView:(id)arg1;
- (void)invalidateLayoutWithFrameChangesToView:(id)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)didCompleteLayout;
- (void)layoutBottomUp;
- (void)layoutTopDown;
- (void)layoutIfNeeded;
- (void)didLayoutSubview:(id)arg1;
- (id)subviewsOrderedForLayout;
- (void)viewWillDraw;
- (void)_reallyLayoutIfNeededBottomUp;
- (void)_reallyLayoutIfNeededTopDown;
- (void)invalidateLayout;
- (void)viewDidMoveToWindow;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_DVTLayoutView_MLSharedInit;

@end

@interface DVTAssetDetailView : DVTLayoutView_ML <DVTReplacementViewDelegate>
{
    DVTTabChooserView *_detailControllerChooserView;
    DVTReplacementView *_replacementView;
    NSAttributedString *_label;
    NSString *_helpIdentifier;
    NSEvent *_lastMouseDown;
    id _delegate;
    NSView *_editingView;
    NSView *_helpButton;
    NSImage *_image;
    BOOL _sizingToFit;
    BOOL _pressed;
}

@property(retain, nonatomic) NSView *editingView; // @synthesize editingView=_editingView;
@property(retain) id delegate; // @synthesize delegate=_delegate;
@property(retain) NSEvent *lastMouseDown; // @synthesize lastMouseDown=_lastMouseDown;
@property(readonly) DVTReplacementView *replacementView; // @synthesize replacementView=_replacementView;
@property(readonly) DVTTabChooserView *detailControllerChooserView; // @synthesize detailControllerChooserView=_detailControllerChooserView;
@property(nonatomic, getter=isPressed) BOOL pressed; // @synthesize pressed=_pressed;
@property(copy, nonatomic) NSString *helpIdentifier; // @synthesize helpIdentifier=_helpIdentifier;
@property(copy, nonatomic) NSAttributedString *label; // @synthesize label=_label;
@property(retain, nonatomic) NSImage *image; // @synthesize image=_image;
- (void)uninstallEditingView;
- (void)installEditingView;
- (void)mouseDragged:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)mouseDown:(id)arg1;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (void)replacementViewFrameDidChange:(id)arg1;
- (void)replacementView:(id)arg1 willCloseViewController:(id)arg2;
- (void)replacementView:(id)arg1 didInstallViewController:(id)arg2;
- (void)layoutBottomUp;
- (void)layoutTopDown;
- (struct CGSize)suggestedSize;
- (void)resizeSubviewsWithOldSize:(struct CGSize)arg1;
- (struct CGPoint)replacementViewOrigin;
- (double)effectiveDetailControllerChooserViewHeight;
- (BOOL)shouldShowDetailControllerChooserView;
- (void)drawRect:(struct CGRect)arg1;
- (id)effectiveHeaderBorderColor;
- (id)effectiveHeaderBackgroundColor;
- (double)detailControllerChooserViewHeight;
- (struct CGRect)detailControllerChooserViewFrame;
- (struct CGRect)headerRect;
- (double)headerHeight;
- (struct CGRect)editingViewRect;
- (struct CGRect)labelAreaBounds;
- (struct CGRect)imageRect;
- (struct CGRect)imageAreaBounds;
- (BOOL)isFlipped;
- (void)takeLabelFromString:(id)arg1;
- (id)basicLabelAttributes;
- (void)takeLabelFromTitle:(id)arg1 andSubtitle:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)assetDetailViewCommonInit;

@end

@interface DVTAttachedInfoWindow : NSWindow
{
    DVTViewController *_viewContentController;
    NSView *_closeArea;
    NSMatrix *_closeButtons;
    NSButton *_tabButton;
    id _completionBlock;
    long long _returnCode;
    unsigned long long _edge;
    struct CGRect _rect;
    BOOL _animatingClose;
    BOOL _animatingWindow;
    BOOL _drawsArrow;
    BOOL _isInBackground;
    BOOL _shouldCloseWhenKeyViewFocusIsLost;
    BOOL _preparing;
}

+ (id)currentInfoWindow;
@property BOOL preparing; // @synthesize preparing=_preparing;
@property(copy) id completionBlock; // @synthesize completionBlock=_completionBlock;
@property(readonly) DVTViewController *viewContentController; // @synthesize viewContentController=_viewContentController;
@property BOOL shouldCloseWhenKeyViewFocusIsLost; // @synthesize shouldCloseWhenKeyViewFocusIsLost=_shouldCloseWhenKeyViewFocusIsLost;
@property BOOL drawsArrow; // @synthesize drawsArrow=_drawsArrow;
- (void)_contentViewFrameChangedNotification:(id)arg1;
- (void)observeView:(id)arg1;
- (void)_stopsBeingInBackground;
- (void)_checkForBeingKeyWindow;
- (void)_startsBeingInBackground;
- (void)_parentWindowWillCLose;
- (void)close;
- (void)resignKeyWindow;
- (void)performClose:(id)arg1;
- (void)_animateClose;
- (void)animationDidStop:(id)arg1 finished:(BOOL)arg2;
- (double)animationResizeTime:(struct CGRect)arg1;
- (void)displayRelativeToRect:(struct CGRect)arg1 inView:(id)arg2 withImage:(id)arg3 atEdge:(unsigned long long)arg4;
- (struct CGRect)_windowFrameForRect:(struct CGRect)arg1 atEdge:(unsigned long long)arg2 ofParentWindow:(id)arg3;
- (BOOL)autorecalculatesKeyViewLoop;
- (BOOL)canBecomeMainWindow;
- (BOOL)canBecomeKeyWindow;
@property(copy) NSArray *buttonTitles;
- (id)initWithViewController:(id)arg1;
- (struct CGSize)_windowSizeForTabSize:(struct CGSize)arg1 onEdge:(unsigned long long)arg2;

@end

@interface DVTViewController : NSViewController <DVTEditor>
{
    DVTExtension *_representedExtension;
    BOOL _isViewLoaded;
}

+ (id)defaultViewNibBundle;
+ (id)defaultViewNibName;
@property(retain, nonatomic) DVTExtension *representedExtension; // @synthesize representedExtension=_representedExtension;
@property BOOL isViewLoaded; // @synthesize isViewLoaded=_isViewLoaded;
- (BOOL)commitEditingForAction:(int)arg1 errors:(id)arg2;
- (void)viewWillUninstall;
- (void)viewDidInstall;
- (void)loadView;
- (void)setView:(id)arg1;
- (void)separateKeyViewLoops;
- (BOOL)delegateFirstResponder;
- (id)supplementalMainViewController;
- (id)description;
- (BOOL)becomeFirstResponder;
- (id)view;
- (id)initUsingDefaultNib;
@property(readonly) BOOL canBecomeMainViewController;

@end

@interface DVTLibraryDetailController : DVTViewController
{
    id _delegate;
}

@property(retain) id delegate; // @synthesize delegate=_delegate;
- (void)sizeToFitSuggestedSize:(struct CGSize)arg1 forAsset:(id)arg2;
- (void)refreshWithAsset:(id)arg1;
- (void)viewDidInstall;
- (id)contentView;

@end

@interface DVTAudioLibraryDetailController : DVTLibraryDetailController
{
    NSButton *_playButton;
    NSView *_contentView;
    NSString *_durationString;
    NSTimer *_playbackTimer;
    NSSound *_audio;
}

@property(copy) NSString *durationString; // @synthesize durationString=_durationString;
- (void)viewWillUninstall;
- (void)toggleAudioPlayback:(id)arg1;
- (void)sizeToFitSuggestedSize:(struct CGSize)arg1 forAsset:(id)arg2;
- (void)refreshWithAsset:(id)arg1;
- (void)reflectPlaybackState;
- (id)durationStringForDuration:(double)arg1;

@end

@interface DVTBarBackground : NSView
{
    NSColor *_backgroundColor;
    NSColor *_bottomBorderColor;
    NSView *_firstChildKeyView;
    NSView *_lastChildKeyView;
    NSView *_externalNextKeyView;
    id _delegate;
    BOOL _hasTopBorder;
    BOOL _hasBottomBorder;
    BOOL _mouseDownCanMoveWindow;
    BOOL _scopeBarAppearance;
    BOOL _becomingFirstResponder;
}

- (BOOL)accessibilityIsIgnored;
- (id)accessibilityAttributeValue:(id)arg1;
- (void)removeFromSuperview;
- (void)setNextKeyView:(id)arg1;
- (BOOL)becomeFirstResponder;
- (BOOL)acceptsFirstResponder;
- (void)setDefaultKeyLoop;
- (void)setLastChildKeyView:(id)arg1;
- (id)lastChildKeyView;
- (void)setFirstChildKeyView:(id)arg1;
- (id)firstChildKeyView;
- (void)setExternalNextKeyView:(id)arg1;
- (void)setMouseDownCanMoveWindow:(BOOL)arg1;
- (BOOL)mouseDownCanMoveWindow;
- (void)setUsesScopeBarAppearance:(BOOL)arg1;
- (BOOL)usesScopeBarAppearance;
- (void)setHasBottomBorder:(BOOL)arg1;
- (BOOL)hasBottomBorder;
- (void)setHasTopBorder:(BOOL)arg1;
- (BOOL)hasTopBorder;
- (BOOL)isOpaque;
- (void)setBottomBorderColor:(id)arg1;
- (void)setBackgroundColor:(id)arg1;
- (id)backgroundColor;
- (void)drawRect:(struct CGRect)arg1;
- (double)topBorderHeight;
- (void)viewWillStartLiveResize;
- (void)viewDidEndLiveResize;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (void)awakeFromNib;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)commonInit;
- (id)defaultBottomBorderLineColor;
- (id)secondTopBorderLineColor;
- (id)firstTopBorderLineColor;

@end

@interface DVTFindBar : DVTViewController <DVTScopeBarContentController, DVTInvalidation>
{
    NSPopUpButton *_finderModePopUpButton;
    DVTSearchField *_findStringField;
    NSTextField *_replaceStringField;
    NSSegmentedControl *_segmentedControl;
    NSView *_stackView;
    DVTFindBarBorderedView *_findModeView;
    DVTBorderedView *_replaceModeView;
    NSTextField *_statusTextField;
    NSButton *_replaceAllButton;
    NSButton *_replaceButton;
    NSButton *_replaceAndFindButton;
    NSTextField *_replaceTextField;
    NSTimer *_editedTimer;
    double _originalOptionsHeight;
    double _originalReplaceHeight;
    DVTFindBarOptionsCtrl *_optionsCtrl;
    DVTSharedFindState *_findState;
    NSMutableArray *_recents;
    id _findTypeObserver;
    NSObject /*<DVTFindBarHostable>*/ *_delegate;
    id _findObject;
    double _preferredViewHeight;
    NSString *_findString;
    NSString *_replaceString;
    NSString *_statusString;
    NSString *_pendingStatusString;
    DVTStackBacktrace *_invalidationBacktrace;
    unsigned long long _finderMode;
    struct _DVTFindBarFlags _fbflags;
    BOOL _findInProgress;
    BOOL _canReplace;
    BOOL _hasResults;
    BOOL _showsOptions;
    BOOL _isInvalidated;
    id <DVTObservingToken> _findStateFindStringObsT;
    id <DVTObservingToken> _findStateReplaceStringObsT;
}

+ (void)initialize;
@property(readonly) DVTStackBacktrace *invalidationBacktrace; // @synthesize invalidationBacktrace=_invalidationBacktrace;
@property(nonatomic) BOOL showsOptions; // @synthesize showsOptions=_showsOptions;
@property double preferredViewHeight; // @synthesize preferredViewHeight=_preferredViewHeight;
@property BOOL hasResults; // @synthesize hasResults=_hasResults;
@property BOOL canReplace; // @synthesize canReplace=_canReplace;
@property BOOL findInProgress; // @synthesize findInProgress=_findInProgress;
@property(nonatomic) unsigned long long finderMode; // @synthesize finderMode=_finderMode;
@property(copy, nonatomic) NSString *statusString; // @synthesize statusString=_statusString;
@property(copy) NSString *replaceString; // @synthesize replaceString=_replaceString;
@property(copy, nonatomic) NSString *findString; // @synthesize findString=_findString;
@property(retain, nonatomic) id findObject; // @synthesize findObject=_findObject;
@property(retain) NSObject /*<DVTFindBarHostable>*/ *delegate; // @synthesize delegate=_delegate;
- (void)layoutControls;
@property(readonly, nonatomic, getter=isValid) BOOL valid;
- (void)invalidate;
- (BOOL)control:(id)arg1 textView:(id)arg2 doCommandBySelector:(SEL)arg3;
- (void)didPressDismissOnScopeBar:(id)arg1;
- (void)controlTextDidEndEditing:(id)arg1;
- (void)_endedEditing:(id)arg1;
- (void)findBarLostFocus;
- (void)controlTextDidChange:(id)arg1;
- (id)_recentsMenu;
- (void)_toggleFindOptions:(id)arg1;
- (void)_clearRecents;
- (void)_restoreFindHistory:(id)arg1;
- (void)_replaceAllButtonAction:(id)arg1;
- (void)_replaceAndFindButtonAction:(id)arg1;
- (void)_replaceButtonAction:(id)arg1;
- (void)_segmentedControlAction:(id)arg1;
- (void)_replaceStringFieldAction:(id)arg1;
- (void)_findStringFieldAction:(id)arg1;
- (void)_optionsChanged:(id)arg1;
- (BOOL)supportsCaseInsensitiveMatch;
- (BOOL)supportsTextMatchStyle:(int)arg1;
- (BOOL)supportsFindBarMode:(unsigned long long)arg1;
- (BOOL)supportsFindBarType:(unsigned long long)arg1;
- (void)performFindHighlightingFirstResult:(BOOL)arg1 informDelegate:(BOOL)arg2;
- (void)clearResults;
- (void)updateStatusInformingDelegate:(BOOL)arg1;
- (void)invalidateResults;
- (void)invalidateResultsAndUpdate:(BOOL)arg1;
- (double)invalidationDelayInterval;
- (void)_updateAfterInvalidate:(id)arg1;
- (void)changeFinderMode:(id)arg1;
- (void)replaceAll:(id)arg1;
- (void)replaceAndFindPrevious:(id)arg1;
- (void)replaceAndFindNext:(id)arg1;
- (void)replace:(id)arg1;
@property(readonly) BOOL supportsReplace;
- (void)findPrevious:(id)arg1;
- (void)findNext:(id)arg1;
@property(readonly) BOOL replaceFieldHasFocus;
- (void)selectReplaceField:(id)arg1;
@property(readonly) BOOL findFieldHasFocus;
- (void)selectFindField:(id)arg1;
- (void)_delayedSetStatusString:(id)arg1;
@property(readonly) BOOL viewIsInstalled;
@property(readonly) DVTFindBarOptionsCtrl *optionsCtrl;
@property(readonly) DVTLogAspect *logAspect;
@property BOOL ignoreNextInvalidate;
@property BOOL findResultsValid;
- (double)_stackHeight;
- (void)setFindStringAndUpdate:(id)arg1;
- (void)setFindString:(id)arg1 andUpdate:(BOOL)arg2;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (void)_updateSharedFindStateReplaceString:(id)arg1;
- (void)_updateSharedFindStateFindString:(id)arg1;
- (void)viewWillUninstall;
- (void)viewDidInstall;
- (void)loadView;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

@end

@interface DVTBasicFindBar : DVTFindBar
{
    long long _foundResultCount;
}

- (void)updateStatusInformingDelegate:(BOOL)arg1;
- (void)performFindHighlightingFirstResult:(BOOL)arg1 informDelegate:(BOOL)arg2;
- (void)findBarLostFocus;
- (void)findPrevious:(id)arg1;
- (void)findNext:(id)arg1;
- (BOOL)supportsCaseInsensitiveMatch;
- (BOOL)supportsTextMatchStyle:(int)arg1;
- (BOOL)supportsFindBarMode:(unsigned long long)arg1;
- (BOOL)supportsFindBarType:(unsigned long long)arg1;
@property(retain, nonatomic) id findObject;

@end

@interface DVTBezelAlertPanel : NSPanel
{
    NSView *_controlView;
    double _duration;
    double _fadeDuration;
    NSWindow *_eventualParent;
    NSTimer *_durationTimer;
    NSTimer *_fadeTimer;
}

+ (void)initialize;
@property double fadeDuration; // @synthesize fadeDuration=_fadeDuration;
@property double duration; // @synthesize duration=_duration;
@property(retain, nonatomic) NSView *controlView; // @synthesize controlView=_controlView;
- (void)orderOutImmediately;
- (void)orderOut:(id)arg1;
- (void)_completeOrderOut:(id)arg1;
- (void)orderFront:(id)arg1;
- (BOOL)isOpaque;
- (id)initWithIcon:(id)arg1 message:(id)arg2 controlView:(id)arg3 duration:(double)arg4;
- (id)initWithIcon:(id)arg1 message:(id)arg2 parentWindow:(id)arg3 duration:(double)arg4;
- (id)accessibilityAttributeValue:(id)arg1;

@end

@interface DVTBezelAlertView : NSView
{
    NSImage *_icon;
    NSString *_message;
    NSDictionary *_messageAttributes;
    NSColor *_backgroundColor;
    struct CGRect _iconRect;
    struct CGRect _messageRect;
}

@property(retain, nonatomic) NSColor *backgroundColor; // @synthesize backgroundColor=_backgroundColor;
@property(retain, nonatomic) NSImage *icon; // @synthesize icon=_icon;
@property(retain, nonatomic) NSString *message; // @synthesize message=_message;
- (void)drawRect:(struct CGRect)arg1;
- (BOOL)isFlipped;
- (void)tile;
- (id)initWithIcon:(id)arg1 message:(id)arg2;

@end

@interface DVTBindingHelper : NSObject
{
    id _owner;
    NSMutableDictionary *_bindingInfo;
    NSString *_ignoredBinding;
}

+ (id)dvtValueTransformerFromOptions:(id)arg1;
+ (BOOL)isRunningInInterfaceBuilder;
+ (void)setIsRunningInInterfaceBuilder;
- (void)didEndEditingForBinding:(id)arg1;
- (void)willBeginEditingForBinding:(id)arg1;
- (BOOL)validateValue:(id *)arg1 forBinding:(id)arg2 error:(id *)arg3;
- (id)modelKeyPathForBinding:(id)arg1;
- (id)referenceDataForBinding:(id)arg1;
- (void)setValue:(id)arg1 forBinding:(id)arg2;
- (id)infoForBinding:(id)arg1;
- (id)bindingHelperInfoForBinding:(id)arg1;
- (BOOL)isBindingBound:(id)arg1;
- (id)valueForBinding:(id)arg1;
- (id)primitiveValueForBinding:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)unbind:(id)arg1;
- (void)bind:(id)arg1 toObject:(id)arg2 withKeyPath:(id)arg3 options:(id)arg4;
- (struct objc_method *)_methodForUpdateFromBinding:(id)arg1;
- (id)description;
- (void)unbindAll;
- (id)initWithOwner:(id)arg1;

@end

@interface DVTBindingInfo : NSObject
{
    id _observedObject;
    NSString *_observedKeyPath;
    NSDictionary *_bindingOptions;
    NSDictionary *_infoDictionary;
    NSString *_modelKeyPath;
}

@property(readonly) NSDictionary *bindingOptions; // @synthesize bindingOptions=_bindingOptions;
@property(readonly) NSString *observedKeyPath; // @synthesize observedKeyPath=_observedKeyPath;
@property(readonly) id observedObject; // @synthesize observedObject=_observedObject;
- (id)_modelKeyPath;
- (id)_infoDictionary;
- (id)initWithObservedObject:(id)arg1 observedKeyPath:(id)arg2 bindingOptions:(id)arg3;

@end

@interface DVTBindingHelperBindingInfo : DVTBindingInfo
{
    struct objc_method *_instanceMethodForUpdate;
}

@property struct objc_method *instanceMethodForUpdate; // @synthesize instanceMethodForUpdate=_instanceMethodForUpdate;
- (id)description;
- (id)initWithObservedObject:(id)arg1 observedKeyPath:(id)arg2 bindingOptions:(id)arg3 instanceMethodForUpdate:(struct objc_method *)arg4;

@end

@interface DVTBorderedView : DVTLayoutView_ML <DVTWindowActivationStateObserver, DVTShadowDrawing>
{
    NSColor *_topBorderColor;
    NSColor *_bottomBorderColor;
    NSColor *_leftBorderColor;
    NSColor *_rightBorderColor;
    NSColor *_topInactiveBorderColor;
    NSColor *_bottomInactiveBorderColor;
    NSColor *_leftInactiveBorderColor;
    NSColor *_rightInactiveBorderColor;
    NSColor *_shadowColor;
    NSColor *_backgroundColor;
    NSColor *_inactiveBackgroundColor;
    NSGradient *_backgroundGradient;
    NSGradient *_inactiveBackgroundGradient;
    NSView *_contentView;
    int _verticalContentViewResizingMode;
    int _horizontalContentViewResizingMode;
    int _borderSides;
    int _shadowSides;
    id <DVTObservingToken> _windowActivationObservation;
}

@property(nonatomic) int verticalContentViewResizingMode; // @synthesize verticalContentViewResizingMode=_verticalContentViewResizingMode;
@property(copy, nonatomic) NSColor *topInactiveBorderColor; // @synthesize topInactiveBorderColor=_topInactiveBorderColor;
@property(copy, nonatomic) NSColor *topBorderColor; // @synthesize topBorderColor=_topBorderColor;
@property int shadowSides; // @synthesize shadowSides=_shadowSides;
@property(copy) NSColor *shadowColor; // @synthesize shadowColor=_shadowColor;
@property(copy, nonatomic) NSColor *rightInactiveBorderColor; // @synthesize rightInactiveBorderColor=_rightInactiveBorderColor;
@property(copy, nonatomic) NSColor *rightBorderColor; // @synthesize rightBorderColor=_rightBorderColor;
@property(copy, nonatomic) NSColor *leftInactiveBorderColor; // @synthesize leftInactiveBorderColor=_leftInactiveBorderColor;
@property(copy, nonatomic) NSColor *leftBorderColor; // @synthesize leftBorderColor=_leftBorderColor;
@property(copy, nonatomic) NSGradient *inactiveBackgroundGradient; // @synthesize inactiveBackgroundGradient=_inactiveBackgroundGradient;
@property(copy, nonatomic) NSColor *inactiveBackgroundColor; // @synthesize inactiveBackgroundColor=_inactiveBackgroundColor;
@property(nonatomic) int horizontalContentViewResizingMode; // @synthesize horizontalContentViewResizingMode=_horizontalContentViewResizingMode;
@property(retain, nonatomic) NSView *contentView; // @synthesize contentView=_contentView;
@property(copy, nonatomic) NSColor *bottomInactiveBorderColor; // @synthesize bottomInactiveBorderColor=_bottomInactiveBorderColor;
@property(copy, nonatomic) NSColor *bottomBorderColor; // @synthesize bottomBorderColor=_bottomBorderColor;
@property(nonatomic) int borderSides; // @synthesize borderSides=_borderSides;
@property(copy, nonatomic) NSGradient *backgroundGradient; // @synthesize backgroundGradient=_backgroundGradient;
@property(copy, nonatomic) NSColor *backgroundColor; // @synthesize backgroundColor=_backgroundColor;
- (void)window:(id)arg1 didChangeActivationState:(long long)arg2;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (void)drawBorderInRect:(struct CGRect)arg1;
- (void)drawBackgroundInRect:(struct CGRect)arg1;
- (BOOL)_isInactive;
- (void)layoutBottomUp;
- (void)layoutTopDown;
- (void)_contentViewFrameDidChange:(id)arg1;
- (struct CGSize)frameSizeForContentSize:(struct CGSize)arg1;
- (struct CGSize)boundSizeForContentSize:(struct CGSize)arg1;
@property(readonly) struct CGRect contentRect;
- (struct CGRect)_contentRectExcludingShadow;
- (CDStruct_bf6d4a14)_contentInset;
- (CDStruct_bf6d4a14)_borderInset;
- (CDStruct_bf6d4a14)_shadowInset;
- (BOOL)isShowingShadow;
- (void)setAllInactiveBordersToColor:(id)arg1;
- (void)setAllBordersToColor:(id)arg1;
- (void)setShadowSide:(int)arg1;
- (void)_setBorderSides:(int)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface DVTButtonCell : NSButtonCell
{
    NSMapTable *_imageByBackgroundStyleMapTable;
    NSMapTable *_alternateImageByBackgroundStyleMapTable;
}

- (void)setBackgroundStyle:(long long)arg1;
- (id)alternateImageForBackgroundStyle:(long long)arg1;
- (void)setAlternateImage:(id)arg1 forBackgroundStyle:(long long)arg2;
- (id)imageForBackgroundStyle:(long long)arg1;
- (void)setImage:(id)arg1 forBackgroundStyle:(long long)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface DVTButtonImageTitleCell : NSButtonCell
{
    NSImage *_titleImage;
}

@property(copy) NSImage *titleImage; // @synthesize titleImage=_titleImage;
- (unsigned long long)hitTestForEvent:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3;
- (struct CGRect)drawTitle:(id)arg1 withFrame:(struct CGRect)arg2 inView:(id)arg3;
- (void)_calculateRectsForTitleImage:(struct CGRect *)arg1 titleText:(struct CGRect *)arg2 padding:(double *)arg3 forBounds:(struct CGRect)arg4;

@end

@interface DVTButtonTextField : NSTextField
{
    BOOL _resetingCursorRects;
}

+ (void)setCellClass:(Class)arg1;
+ (Class)cellClass;
+ (void)initialize;
- (void)resetCursorRects;
- (struct CGRect)visibleRect;
- (void)mouseDown:(id)arg1;
- (unsigned long long)imagePosition;
- (void)setImagePosition:(unsigned long long)arg1;
- (id)highlightImage;
- (void)setHighlightImage:(id)arg1;
- (id)alternateImage;
- (void)setAlternateImage:(id)arg1;
- (id)image;
- (void)setImage:(id)arg1;
- (void)setButtonAction:(SEL)arg1;
- (SEL)buttonAction;
- (void)setButtonTarget:(id)arg1;
- (id)buttonTarget;

@end

@interface DVTButtonTextFieldCell : NSTextFieldCell <NSCoding, NSCopying>
{
    id _buttonTarget;
    SEL _buttonAction;
    struct CGRect _cellFrame;
    NSImage *_image;
    NSImage *_alternateImage;
    NSImage *_highlightImage;
    unsigned long long _imagePosition;
    BOOL _buttonTracking;
    BOOL _inButton;
    BOOL _alwaysShowButton;
}

+ (BOOL)prefersTrackingUntilMouseUp;
@property unsigned long long imagePosition; // @synthesize imagePosition=_imagePosition;
@property BOOL alwaysShowButton; // @synthesize alwaysShowButton=_alwaysShowButton;
@property(retain) id buttonTarget; // @synthesize buttonTarget=_buttonTarget;
@property SEL buttonAction; // @synthesize buttonAction=_buttonAction;
@property(retain, nonatomic) NSImage *highlightImage; // @synthesize highlightImage=_highlightImage;
@property(retain, nonatomic) NSImage *alternateImage; // @synthesize alternateImage=_alternateImage;
@property(retain, nonatomic) NSImage *image; // @synthesize image=_image;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (struct CGRect)expansionFrameWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (struct CGSize)cellSize;
- (unsigned long long)hitTestForEvent:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3;
- (void)stopTracking:(struct CGPoint)arg1 at:(struct CGPoint)arg2 inView:(id)arg3 mouseIsUp:(BOOL)arg4;
- (void)_sendButtonAction;
- (BOOL)continueTracking:(struct CGPoint)arg1 at:(struct CGPoint)arg2 inView:(id)arg3;
- (BOOL)startTrackingAt:(struct CGPoint)arg1 inView:(id)arg2;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (BOOL)_isPointInButton:(struct CGPoint)arg1 inView:(id)arg2;
- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (struct CGRect)titleRectForBounds:(struct CGRect)arg1;
- (struct CGRect)imageRectForBounds:(struct CGRect)arg1;
- (void)selectWithFrame:(struct CGRect)arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 start:(long long)arg5 length:(long long)arg6;
- (void)editWithFrame:(struct CGRect)arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 event:(id)arg5;
- (id)_attributedStringValue;
- (struct CGSize)imageSize;
- (id)_templateImageFromImage:(id)arg1 withColor:(id)arg2;

@end

@interface DVTCachedImageView : NSView
{
    NSView *_originalView;
    NSBitmapImageRep *_cachedImage;
}

@property(retain, nonatomic) NSBitmapImageRep *cachedImage; // @synthesize cachedImage=_cachedImage;
@property(retain, nonatomic) NSView *originalView; // @synthesize originalView=_originalView;
- (void)drawRect:(struct CGRect)arg1;
- (id)initWithView:(id)arg1;

@end

@interface DVTChoice : NSObject
{
    NSString *_title;
    NSString *_toolTip;
    NSImage *_image;
    NSString *_identifier;
    id _representedObject;
    BOOL _enabled;
}

@property(getter=isEnabled) BOOL enabled; // @synthesize enabled=_enabled;
@property(readonly) id representedObject; // @synthesize representedObject=_representedObject;
@property(copy) NSString *identifier; // @synthesize identifier=_identifier;
@property(readonly) NSImage *image; // @synthesize image=_image;
@property(readonly) NSString *toolTip; // @synthesize toolTip=_toolTip;
@property(readonly) NSString *title; // @synthesize title=_title;
- (id)description;
- (id)initWithTitle:(id)arg1 toolTip:(id)arg2 image:(id)arg3 representedObject:(id)arg4;

@end

@interface DVTChooserView : DVTBorderedView
{
    NSMatrix *_buttonMatrix;
    NSIndexSet *_selectionIndexes;
    NSMutableArray *_choices;
    id /*<DVTChooserViewDelegate>*/ _delegate;
    int _justification;
    int _gradientStyle;
    BOOL _allowsMultipleSelection;
    BOOL _allowsEmptySelection;
    BOOL _choicesFillWidth;
}

+ (id)keyPathsForValuesAffectingSelectedChoices;
+ (id)keyPathsForValuesAffectingSelectedChoice;
+ (id)keyPathsForValuesAffectingSelectedIndex;
+ (struct CGSize)defaultMinimumButtonSize;
+ (struct CGSize)defaultButtonSize;
+ (void)initialize;
@property(retain) id /*<DVTChooserViewDelegate>*/ delegate; // @synthesize delegate=_delegate;
@property(nonatomic) int gradientStyle; // @synthesize gradientStyle=_gradientStyle;
@property(nonatomic) BOOL choicesFillWidth; // @synthesize choicesFillWidth=_choicesFillWidth;
@property(nonatomic) BOOL allowsEmptySelection; // @synthesize allowsEmptySelection=_allowsEmptySelection;
@property(nonatomic) BOOL allowsMultipleSelection; // @synthesize allowsMultipleSelection=_allowsMultipleSelection;
@property(nonatomic) int justification; // @synthesize justification=_justification;
@property(retain) NSMatrix *_buttonMatrix; // @synthesize _buttonMatrix;
@property(readonly) NSArray *grabRects;
@property(readonly) struct CGRect grabRect;
@property(readonly) NSMutableArray *mutableChoices;
- (void)updateBoundContent;
@property(copy) NSArray *choices;
- (void)updateBoundSelectedObjects;
- (void)updateBoundSelectionIndexes;
@property(copy) NSArray *selectedChoices;
@property(retain) DVTChoice *selectedChoice;
@property unsigned long long selectedIndex;
@property(copy) NSIndexSet *selectionIndexes; // @synthesize selectionIndexes=_selectionIndexes;
- (void)setBorderSides:(int)arg1;
- (void)layoutTopDown;
- (void)_chooserButtonClicked:(id)arg1;
- (void)drawBorderInRect:(struct CGRect)arg1;
- (struct CGRect)_exposedRectLeft;
- (struct CGRect)_exposedRect;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)dvtExtraBindings;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_commonInit;
- (void)_configureButtonMatrix;

@end

@interface DVTClickableLayer : CALayer <DVTClickableLayer>
{
    id _clickHandlerBlock;
    BOOL _disableClickHandler;
    BOOL _showsClickedState;
}

@property BOOL disableClickHandler; // @synthesize disableClickHandler=_disableClickHandler;
@property BOOL showsClickedState; // @synthesize showsClickedState=_showsClickedState;
@property(copy) id clickHandlerBlock; // @synthesize clickHandlerBlock=_clickHandlerBlock;
- (void)accessibilityPerformAction:(id)arg1;
- (id)accessibilityActionDescription:(id)arg1;
- (id)accessibilityActionNames;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAttributeNames;
- (BOOL)accessibilityIsIgnored;
- (void)fireClickHandler;
- (void)layerShouldShowUnclickedState;
- (void)layerShouldShowClickedState;

@end

/*
@interface DVTClickableTextLayer : CATextLayer <DVTClickableLayer>
{
    id _clickHandlerBlock;
    BOOL _disableClickHandler;
    BOOL _showsClickedState;
}

@property(copy) id clickHandlerBlock; // @synthesize clickHandlerBlock=_clickHandlerBlock;
@property BOOL showsClickedState; // @synthesize showsClickedState=_showsClickedState;
@property BOOL disableClickHandler; // @synthesize disableClickHandler=_disableClickHandler;
- (void)accessibilityPerformAction:(id)arg1;
- (id)accessibilityActionDescription:(id)arg1;
- (id)accessibilityActionNames;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAttributeNames;
- (BOOL)accessibilityIsIgnored;
- (void)fireClickHandler;
- (void)layerShouldShowUnclickedState;
- (void)layerShouldShowClickedState;

@end
 */

@interface DVTMainStatusAwareButton : NSButton
{
    unsigned long long _lastMouseDownModifierFlags;
    NSImage *_imageForNonMainWindow;
    BOOL _ignoresFirstMouse;
    BOOL _superviewIsFocusRingClipAncestor;
}

- (id)_focusRingClipAncestor;
- (void)setSuperviewIsFocusRingClipAncestor:(BOOL)arg1;
- (void)setImageForNonMainWindow:(id)arg1;
- (void)setAcceptsFirstMouse:(BOOL)arg1;
- (unsigned long long)lastMouseDownModifierFlags;
- (id)imageForNonMainWindow;
- (void)drawRect:(struct CGRect)arg1;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (void)mouseDown:(id)arg1;

@end

@interface DVTClippedTabsIndicator : DVTMainStatusAwareButton <NSMenuDelegate>
{
    id _delegate;
    NSMenu *_menu;
    struct OpaqueWindowPtr *_menuWindow;
    struct OpaqueEventHandlerRef *_controlOwningWindowChangedHandler;
}

- (void)_popUpMenu;
- (void)menuWillOpen:(id)arg1;
- (void)_setMenuWindow:(struct OpaqueWindowPtr *)arg1;
- (void)_drawOverlayInContext:(struct CGContext *)arg1;
- (double)_convertYFromMenuViewToRootView:(double)arg1;
- (void)_updateImages;
- (void)mouseDown:(id)arg1;
- (void)viewDidMoveToWindow;
- (void)performClick:(id)arg1;
- (void)moveLeft:(id)arg1;
- (void)moveRight:(id)arg1;
- (void)moveUp:(id)arg1;
- (void)moveDown:(id)arg1;
- (BOOL)needsPanelToBecomeKey;
- (id)delegate;
- (void)setDelegate:(id)arg1;
- (id)init;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface DVTCodeLibraryDetailController : DVTLibraryDetailController <DVTSourceTextViewDelegate, DVTSourceTextStorageDelegate>
{
    DVTSourceTextView *_sourceTextView;
    DVTSourceTextStorage *_sourceTextStorage;
    struct {
        unsigned int delegateImplementsLanguageForCodeDetailController:1;
        unsigned int _reserved:7;
    } _flags;
}

@property(readonly) DVTSourceTextStorage *sourceTextStorage; // @synthesize sourceTextStorage=_sourceTextStorage;
@property(readonly) DVTSourceTextView *sourceTextView; // @synthesize sourceTextView=_sourceTextView;
- (void)sizeToFitSuggestedSize:(struct CGSize)arg1 forAsset:(id)arg2;
- (void)refreshWithAsset:(id)arg1;
- (void)viewDidInstall;
- (void)setDelegate:(id)arg1;

@end

@interface DVTColorPickerChooserContentView : NSView
{
    NSArray *swatchViews;
    NSColor *clickedColor;
    id target;
    SEL action;
}

- (BOOL)isFlipped;
- (id)clickedColor;
- (void)setAction:(SEL)arg1;
- (void)setTarget:(id)arg1;
- (void)userChooseSwatch:(id)arg1;
- (id)initWithColors:(id)arg1 andFrame:(struct CGRect)arg2;

@end

@interface DVTColorPickerChooserView : NSView
{
    NSMutableArray *colorsArray;
    DVTColorPickerChooserContentView *contentView;
    NSColor *clickedColor;
    id target;
    SEL action;
}

+ (id)defaultLabel;
- (void)setAction:(SEL)arg1;
- (void)setTarget:(id)arg1;
- (void)userChooseSwatch:(id)arg1;
- (id)clickedColor;
- (BOOL)isFlipped;
- (id)initWithTitle:(id)arg1 andColors:(id)arg2;
- (id)attributedTitleForTitle:(id)arg1;
- (id)titleAttributes;
- (id)titleFont;

@end

@interface DVTColorPickerChooserViewColorSwatch : NSView
{
    NSColor *color;
    BOOL highlighted;
    id target;
    SEL action;
}

@property(retain) NSColor *color; // @synthesize color;
- (id)description;
- (void)drawRect:(struct CGRect)arg1;
@property BOOL highlighted;
- (void)mouseUp:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)setAction:(SEL)arg1;
- (void)setTarget:(id)arg1;
- (id)initWithColor:(id)arg1 andFrame:(struct CGRect)arg2;
- (void)setupTrackingArea;
- (BOOL)isFlipped;

@end

@interface DVTColorPickerPopUpButton : NSView <DVTWindowActivationStateObserver, NSCoding, NSMenuDelegate>
{
    id target;
    SEL action;
    NSMenu *colorsMenu;
    struct CGRect popUpButtonArrowsRect;
    struct CGRect colorWellViewRect;
    struct CGRect colorLabelRect;
    struct CGRect swatchRect;
    struct CGRect colorLabelTitleRect;
    NSColor *color;
    NSDictionary *imageStateDictionary;
    DVTMutableOrderedDictionary *suggestedColors;
    NSColor *defaultColor;
    BOOL supportsNilColor;
    id colorValueBindingController;
    NSString *colorValueBindingKeyPath;
    id <DVTObservingToken> colorListBindingObservation;
    id <DVTObservingToken> colorValueBindingObservation;
    id <DVTObservingToken> supportsNilColorBindingObservation;
    unsigned long long controlSize;
    int defaultColorMode;
    id <DVTObservingToken> windowActivationObservation;
    BOOL highlighted;
    BOOL active;
    BOOL enabled;
}

+ (id)imageStateDictionaryForControlSize:(unsigned long long)arg1;
@property(readonly, getter=isActive) BOOL active; // @synthesize active;
@property(nonatomic, getter=isEnabled) BOOL enabled; // @synthesize enabled;
@property BOOL supportsNilColor; // @synthesize supportsNilColor;
@property(retain) DVTMutableOrderedDictionary *suggestedColors; // @synthesize suggestedColors;
@property SEL action; // @synthesize action;
@property(retain) id target; // @synthesize target;
- (void)unbind:(id)arg1;
- (void)bind:(id)arg1 toObject:(id)arg2 withKeyPath:(id)arg3 options:(id)arg4;
- (void)observedColorValueDidChangeToValue:(id)arg1;
- (void)displayColorPanel:(id)arg1;
- (void)takeDrawnColorFrom:(id)arg1;
- (void)takeDrawnColorFromPopUpMenu:(id)arg1;
- (void)sendAction;
- (void)beginColorDragForEvent:(id)arg1;
- (id)imageForDraggedColor:(id)arg1;
- (id)colorForDragging;
- (BOOL)performDragOperation:(id)arg1;
- (unsigned long long)draggingEntered:(id)arg1;
- (void)colorPanelColorChanged:(id)arg1;
- (void)colorPanelWillClose:(id)arg1;
- (void)window:(id)arg1 didChangeActivationState:(long long)arg2;
- (void)colorPickerDidBecomeActive:(id)arg1;
- (void)colorChosenFromColorChooser:(id)arg1;
- (void)moveUp:(id)arg1;
- (void)moveDown:(id)arg1;
- (void)performClick:(id)arg1;
- (void)mouseDown:(id)arg1;
- (BOOL)isMouseEventInColorWellRect:(id)arg1;
- (void)displayColorPanel;
- (BOOL)canBecomeKeyView;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
- (BOOL)acceptsFirstResponder;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)showColorsMenu;
- (void)drawRect:(struct CGRect)arg1;
- (void)drawColorLabel;
- (void)drawColorWell;
- (void)drawPopUpButtonArrows;
- (void)drawDebuggingRects;
- (void)drawFocusRing;
- (id)effectiveAttributedTitle;
- (id)attributedTitleForTitle:(id)arg1;
- (id)titleAttributes;
- (id)effectiveImageForControlPart:(int)arg1;
- (id)effectivePopUpButtonArrowsRightCapImage;
- (id)effectiveSwatchFillColor;
- (void)putControlInMixedState;
- (id)multipleValueColor;
- (void)populateColorsMenu;
- (id)menuItemImageForColor:(id)arg1 withSize:(struct CGSize)arg2;
- (id)effectiveStrokeColor;
- (id)effectiveTextColor;
- (double)horizontalMenuOffset;
- (double)verticalMenuOffset;
- (void)sizeRectsForDrawing;
- (double)verticalTitleOffset;
- (double)baseline;
- (double)heightThatFits;
- (double)widthForPopUpButton;
- (CDStruct_bf6d4a14)shadowInset;
- (BOOL)isShowingTitle;
- (BOOL)isShowingDefaultColor;
- (BOOL)isShowingMixedColor;
- (BOOL)isShowingNamedColor;
- (BOOL)supportsDefaultColor;
- (struct CGRect)insetRectForSwatchRect:(struct CGRect)arg1;
- (struct CGRect)swatchRectForColorWellRect:(struct CGRect)arg1;
- (double)noColorStrokeWidth;
- (id)titleFont;
- (void)setSuggestedColorsUsingColorList:(id)arg1;
@property(retain) NSColor *color; // @dynamic color;
- (BOOL)onActiveWindow;
@property(retain) NSColor *defaultColor; // @synthesize defaultColor;
@property int defaultColorMode; // @dynamic defaultColorMode;
@property unsigned long long controlSize; // @synthesize controlSize;
- (void)setHighlighted:(BOOL)arg1;
- (void)setActive:(BOOL)arg1;
- (id)imageStateDictionary;
- (void)invalidateImageStateDictionary;
- (id)nameForColor:(id)arg1;
- (BOOL)containsColor:(id)arg1;
- (void)removeColorWithName:(id)arg1;
- (id)allColorNames;
- (id)colorWithName:(id)arg1;
- (void)addColor:(id)arg1 withName:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1 colorList:(id)arg2 defaultColor:(id)arg3 defaultColorMode:(int)arg4;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)commonInit;

@end

@interface DVTColorValueTransformer : NSValueTransformer
{
}

+ (BOOL)allowsReverseTransformation;
+ (Class)transformedValueClass;
- (id)reverseTransformedValue:(id)arg1;
- (id)transformedValue:(id)arg1;

@end

@interface DVTColoredSpinner : NSView
{
    NSColor *_color;
    NSTimer *_timer;
    unsigned long long _animationStep;
    NSMutableArray *_images;
    BOOL _displaysWhenStopped;
}

+ (void)initialize;
- (void)drawRect:(struct CGRect)arg1;
- (void)_generateImages;
- (void)_timerStep:(id)arg1;
@property(getter=isAnimating) BOOL animating;
@property BOOL displaysWhenStopped;
@property(copy) NSColor *color;
- (id)dvtExtraBindings;

@end

@interface DVTComparisonConfigurationManager : NSObject
{
}

+ (id)fineGrainDiffHighlightColor;
+ (unsigned long long)comparisonOrientation;

@end

@interface DVTComparisonScrollCoordinator : NSObject </*NSScrollerImpPairDelegate, */DVTSourceTextScrollViewDelegate, DVTComparisonScrollContentAreaDelegate>
{
    DVTSourceTextScrollView *_leftScrollView;
    struct CGRect _leftContentViewPreviousBounds;
    DVTSourceTextScrollView *_rightScrollView;
    struct CGRect _rightContentViewPreviousBounds;
    DVTComparisonScroller *_globalScroller;
    /*NSScrollerImpPair */ id _scrollerImpPair;
    DVTBorderedView *_contentAreaView;
    NSArray *_diffDescriptors;
    NSIndexSet *_modifiedDiffDescriptorIndexes;
    id _leftContentViewBoundsObserver;
    id _rightContentViewBoundsObserver;
    id _leftContentViewFrameObserver;
    id _rightContentViewFrameObserver;
    id _fontAndColorThemeObserver;
    BOOL _recursing;
    BOOL _computingTotalScrollSize;
}

+ (id)logAspect;
+ (void)initialize;
@property(retain) DVTBorderedView *contentAreaView; // @synthesize contentAreaView=_contentAreaView;
@property(retain) NSIndexSet *modifiedDiffDescriptorIndexes; // @synthesize modifiedDiffDescriptorIndexes=_modifiedDiffDescriptorIndexes;
@property(copy) NSArray *diffDescriptors; // @synthesize diffDescriptors=_diffDescriptors;
@property(retain, nonatomic) DVTComparisonScroller *globalScroller; // @synthesize globalScroller=_globalScroller;
@property(retain, nonatomic) DVTSourceTextScrollView *rightScrollView; // @synthesize rightScrollView=_rightScrollView;
@property(retain, nonatomic) DVTSourceTextScrollView *leftScrollView; // @synthesize leftScrollView=_leftScrollView;
- (void)scrollerImpPair:(id)arg1 updateScrollerStyleForNewRecommendedScrollerStyle:(long long)arg2;
- (void)scrollerImpPair:(id)arg1 setContentAreaNeedsDisplayInRect:(struct CGRect)arg2;
- (struct CGPoint)scrollerImpPair:(id)arg1 convertContentPoint:(struct CGPoint)arg2 toScrollerImp:(id)arg3;
- (struct CGPoint)mouseLocationInContentAreaForScrollerImpPair:(id)arg1;
- (BOOL)inLiveResizeForScrollerImpPair:(id)arg1;
- (struct CGRect)contentAreaRectForScrollerImpPair:(id)arg1;
- (void)contentAreaWindowOrderedOut;
- (void)contentAreaWindowOrderedIn;
- (void)contentAreaMovedToNewWindow;
- (void)contentAreaRemovedFromSuperview;
- (void)contentAreaDidHide;
- (void)mouseExitedContentArea;
- (void)mouseMovedInContentArea;
- (void)mouseEnteredContentArea;
- (void)contentAreaWillDraw;
- (void)updateDiffMarks;
- (void)_doUpdateDiffMarks;
- (void)notifyScroll:(double)arg1;
- (void)computeTotalScrollSize;
- (double)getTargetPositionFromSide:(long long)arg1;
- (double)getTargetPositionFromRight:(double)arg1 ensureLayout:(BOOL)arg2;
- (double)getTargetPositionFromLeft:(double)arg1 ensureLayout:(BOOL)arg2;
- (void)notifyScrollAction:(id)arg1;
- (void)rescindObservations;
- (void)setupObservations;
- (void)_doSetupObservations;
- (id)scrollView:(id)arg1 pointInVisibleScroller:(struct CGPoint)arg2;
- (void)scrollViewDidEndLiveResize:(id)arg1;
- (void)scrollViewWillStartLiveResize:(id)arg1;
- (void)scrollView:(id)arg1 didReceiveScrollWheelEvent:(id)arg2;
- (void)scrollWheel:(id)arg1;
@property(readonly) DVTSourceTextView *rightTextView;
@property(readonly) DVTSourceTextView *leftTextView;
- (void)updateScrollerKnobStyle;
- (void)updateBoundSelectedIndex;
- (void)updateBoundContentArray;
- (id)dvtExtraBindings;

@end

@interface DVTMarkedScroller : NSScroller
{
    _DVTMarkerList *_normalMarks;
    _DVTMarkerList *_highlightMarks;
    _DVTMarkerList *_diffNormalMarks;
    _DVTMarkerList *_diffHighlightMarks;
}

+ (BOOL)isCompatibleWithOverlayScrollers;
- (void)setFloatValue:(float)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)addMark:(double)arg1 ofType:(int)arg2;
- (void)_updateMarksForGeometryChange;
- (void)_updateMarkRectsIfNeeded:(id)arg1 newMarkRect:(struct CGRect)arg2;
- (struct CGRect)_markRect;
- (void)_setMarksNeedUpdate:(id)arg1;
- (void)clearDiffMarks;
- (void)clearNormalMarks;
- (void)drawKnobSlotInRect:(struct CGRect)arg1 highlight:(BOOL)arg2;
- (void)drawKnob;
- (void)_fillRects:(id)arg1 usingGradient:(id)arg2;
- (BOOL)_drawsMarks;

@end

@interface DVTComparisonScroller : DVTMarkedScroller
{
}

+ (BOOL)isCompatibleWithOverlayScrollers;
- (void)scrollWheel:(id)arg1;

@end

@interface DVTComparisonSplitView : NSSplitView
{
    NSIndexSet *_depressedDiffDescriptorIndexes;
    NSTrackingArea *_trackingArea;
    struct CGRect *_switchRectArray;
    DVTPointerArray *_swoops;
    NSArray *_diffDescriptors;
    NSIndexSet *_modifiedDiffDescriptorIndexes;
    DVTSourceTextView *_primaryTextView;
    DVTSourceTextView *_secondaryTextView;
    NSIndexSet *_selectedDiffDescriptorIndexes;
    NSIndexSet *_toggledDiffDescriptorIndexes;
    int _style;
    BOOL _depressed;
    BOOL _selected;
    BOOL _selecting;
    BOOL _shouldInterceptMouseUp;
    BOOL _isThreeWayDiff;
    BOOL _isBinaryComparison;
    BOOL _isSettingSelectedIndexBinding;
    BOOL _isSplitterMovable;
}

+ (id)unsetImage;
+ (id)neitherArrowImage;
+ (id)rightLeftArrowImage;
+ (id)rightArrowImage;
+ (id)leftRightArrowImage;
+ (id)leftArrowImage;
+ (id)splitterDeselectedImage_depressed;
+ (id)splitterDeselectedImage;
+ (id)splitterSelectedImage_depressed;
+ (id)splitterSelectedImage;
+ (double)defaultSplitterWidthForStyle:(int)arg1;
+ (void)initialize;
@property BOOL isSplitterMovable; // @synthesize isSplitterMovable=_isSplitterMovable;
@property(retain) NSArray *diffDescriptors; // @synthesize diffDescriptors=_diffDescriptors;
@property BOOL depressed; // @synthesize depressed=_depressed;
- (void)viewFrameDidChange:(id)arg1;
- (void)layoutManagerDidCompleteLayoutForTextContainer:(id)arg1;
- (void)_validateCurrentSelectedIndex;
- (void)_offsetCurrentSelectedIndexBy:(long long)arg1;
- (void)updateTrackingAreas;
- (void)mouseExited:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)drawDividerInRect:(struct CGRect)arg1;
- (void)_drawMultipleDiffDescriptors:(struct CGRect)arg1;
- (unsigned long long)_nearestDiffDescriptorFromMiddleInDirection:(long long)arg1;
- (void)_drawSingleDiffDescriptor:(struct CGRect)arg1;
- (double)dividerThickness;
@property BOOL isBinaryComparison;
@property BOOL isThreeWayDiff;
@property int style;
@property(retain) NSIndexSet *toggledDiffDescriptorIndexes; // @synthesize toggledDiffDescriptorIndexes=_toggledDiffDescriptorIndexes;
@property(retain) DVTSourceTextView *secondaryTextView; // @synthesize secondaryTextView=_secondaryTextView;
@property(retain) DVTSourceTextView *primaryTextView; // @synthesize primaryTextView=_primaryTextView;
@property(readonly) BOOL showsPrettySwitch;
@property(retain) NSIndexSet *selectedDiffDescriptorIndexes; // @synthesize selectedDiffDescriptorIndexes=_selectedDiffDescriptorIndexes;
@property BOOL selected; // @synthesize selected=_selected;
- (void)updateBoundTimestamp;
- (void)updateBoundToggledIndexes;
- (void)updateBoundSelectedIndex;
- (void)updateBoundModifiedDescriptorIndexes;
- (void)updateBoundContentArray;
- (id)dvtExtraBindings;
- (void)resetCursorRects;
- (BOOL)acceptsFirstResponder;
- (void)keyDown:(id)arg1;
- (void)mouseUp:(id)arg1;
- (id)_getNextResizeEventInvalidatingLiveResizeCacheIfNecessary:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)setFrame:(struct CGRect)arg1;
- (void)_setSelectedDescriptorMergeDirection:(int)arg1;
- (unsigned long long)_hitTestSwoopLocation:(struct CGPoint)arg1;
- (unsigned long long)_hitTestLocation:(struct CGPoint)arg1;
- (struct CGRect)_firstDividerFrame;
- (void)_dvtcomparisonsplitview_commonInit;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface DVTCompletingTextView : NSTextView <NSLayoutManagerDelegate>
{
    DVTTextCompletionController *_completionController;
    DVTTextCompletionDataSource *_completionsDataSource;
    unsigned long long _accessoryAnnotationWidth;
    unsigned long long _modifierFlagsAtLastSingleMouseDown;
    BOOL _tabSelectsNextPlaceholder;
}

+ (id)_selectorsNeedingIncreaseDecreaseCalls;
+ (BOOL)selectorNeedsIncreaseDecreaseCall:(SEL)arg1;
+ (id)readableTextPasteboardTypes;
+ (long long)scrollerKnobStyleForBackgroundColor:(id)arg1;
+ (id)_operatorChars;
+ (id)autoCompleteChars;
+ (id)identifierChars;
+ (id)_identifierCharsForImportStatements;
+ (BOOL)appSupportsActionMonitoring;
@property BOOL tabSelectsNextPlaceholder; // @synthesize tabSelectsNextPlaceholder=_tabSelectsNextPlaceholder;
@property(readonly) DVTTextCompletionController *completionController; // @synthesize completionController=_completionController;
@property unsigned long long modifierFlagsAtLastSingleMouseDown; // @synthesize modifierFlagsAtLastSingleMouseDown=_modifierFlagsAtLastSingleMouseDown;
@property unsigned long long accessoryAnnotationWidth; // @synthesize accessoryAnnotationWidth=_accessoryAnnotationWidth;
- (void)setBackgroundColor:(id)arg1;
- (void)updateScrollerKnobStyle;
- (BOOL)readSelectionFromPasteboard:(id)arg1 type:(id)arg2;
- (void)didChangeText;
- (id)attributedStringForCompletionPlaceholderCell:(id)arg1 atCharacterIndex:(unsigned long long)arg2 withDefaultAttributes:(id)arg3;
- (void)doubleClickedOnCell:(id)arg1 inRect:(struct CGRect)arg2 atIndexInToken:(unsigned long long)arg3;
- (void)clickedOnCell:(id)arg1 inRect:(struct CGRect)arg2 atIndexInToken:(unsigned long long)arg3;
- (BOOL)isThereOnlyATokenAttachmentAtUserTextChange;
- (void)replaceSelectedTokenWithTokenText;
- (void)useSelectionForFind:(id)arg1;
- (struct _NSRange)_characterRangeForRect:(struct CGRect)arg1;
- (struct _NSRange)clipViewBoundsCharacterRange;
- (struct _NSRange)visibleCharacterRange;
- (BOOL)shouldDelayWindowOrderingForEvent:(id)arg1;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (void)cursorUpdate:(id)arg1;
- (void)rightMouseDown:(id)arg1;
- (void)rightMouseUp:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)mouseDown:(id)arg1;
- (id)hitTest:(struct CGPoint)arg1;
- (void)scrollWheel:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)mouseMoved:(id)arg1;
- (void)setNeedsDisplayInRect:(struct CGRect)arg1 avoidAdditionalLayout:(BOOL)arg2;
- (void)drawRect:(struct CGRect)arg1;
- (void)_drawRect:(struct CGRect)arg1 clip:(BOOL)arg2;
- (void)_drawOverlayRect:(struct CGRect)arg1;
- (void)setSelectedRanges:(id)arg1 affinity:(unsigned long long)arg2 stillSelecting:(BOOL)arg3;
- (id)selectedRanges;
- (struct _NSRange)realSelectedRange;
- (struct _NSRange)selectedRange;
- (void)setSelectedRange:(struct _NSRange)arg1;
- (void)_replaceCellWithCellText:(id)arg1;
- (id)_formatBlockLiteralFromDeclaration:(id)arg1 lineCount:(unsigned long long *)arg2;
- (void)textStorage:(id)arg1 didEditRange:(struct _NSRange)arg2 changeInLength:(long long)arg3;
- (void)textStorage:(id)arg1 willEditRange:(struct _NSRange)arg2 changeInLength:(long long)arg3;
- (void)convertFoldedToRealRangeIfNeeded:(struct _NSRange *)arg1;
- (void)convertRealToFoldedRangeIfNeeded:(struct _NSRange *)arg1;
@property(readonly) NSTextStorage *realTextStorage;
- (id)textStorage;
- (void)didInsertCompletionTextAtRange:(struct _NSRange)arg1;
- (void)invalidateDisplayForRange:(struct _NSRange)arg1;
- (unsigned long long)draggingEntered:(id)arg1;
- (void)paste:(id)arg1;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)removeFromSuperview;
- (void)_mouseInside:(id)arg1;
- (void)debugDumpCompletionState:(id)arg1;
- (void)selectPreviousPlaceholder:(id)arg1;
- (void)selectNextPlaceholder:(id)arg1;
- (BOOL)handleInsertBackTab;
- (BOOL)handleInsertTab;
- (id)menuForEvent:(id)arg1;
- (BOOL)handleCancel;
- (void)previousCompletion:(id)arg1;
- (void)nextCompletion:(id)arg1;
- (void)complete:(id)arg1;
- (BOOL)shouldChangeTextInRange:(struct _NSRange)arg1 replacementString:(id)arg2;
- (void)insertText:(id)arg1 replacementRange:(struct _NSRange)arg2;
- (void)doCommandBySelector:(SEL)arg1;
- (id)layoutManager:(id)arg1 shouldUseTemporaryAttributes:(id)arg2 forDrawingToScreen:(BOOL)arg3 atCharacterIndex:(unsigned long long)arg4 effectiveRange:(struct _NSRange *)arg5;
- (void)showMatchingBraceAtLocation:(id)arg1;
- (void)autoHighlightMatchingBracketAtLocationIfNecessary:(unsigned long long)arg1;
- (BOOL)shouldTryToCompleteOpeningBracketForStringOrAttributedStringToInsert:(id)arg1;
- (BOOL)shouldTryToCompleteOpeningBracketForStringToInsert:(id)arg1;
- (BOOL)_moveToNextPlaceholderFromCharacterIndex:(unsigned long long)arg1 forward:(BOOL)arg2 onlyIfNearby:(BOOL)arg3;
- (struct _NSRange)_findString:(id)arg1 inString:(id)arg2 fromRange:(struct _NSRange)arg3 limitRange:(struct _NSRange)arg4 forward:(BOOL)arg5 wrap:(BOOL)arg6;
- (struct _NSRange)rangeOfPlaceholderFromCharacterIndex:(unsigned long long)arg1 forward:(BOOL)arg2 wrap:(BOOL)arg3 limit:(unsigned long long)arg4;
- (BOOL)selectFirstPlaceholderInCharacterRange:(struct _NSRange)arg1;
- (BOOL)handleSelectPreviousPlaceholder;
- (BOOL)handleSelectNextPlaceholder;
- (id)ghostComplementTextColor;
- (BOOL)shouldAutoCompleteAtLocation:(unsigned long long)arg1;
- (BOOL)shouldSuppressTextCompletion;
@property(readonly) double autoCompletionDelay;
- (id)contextForCompletionStrategiesAtWordStartLocation:(unsigned long long)arg1;
@property(readonly) DVTTextCompletionDataSource *completionsDataSource;
- (struct _NSRange)wordRangeAtLocation:(unsigned long long)arg1;
@property(readonly) DVTSourceCodeLanguage *language;
- (struct CGRect)frameForRange:(struct _NSRange)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1 textContainer:(id)arg2;
- (void)_dvtCommonInit;
- (id)cell;
- (id)selectedCell;
- (struct CGRect)_accessibilityBoundsOfChild:(id)arg1;
- (id)accessibilityStyleRangeForIndexAttributeForParameter:(id)arg1;
- (id)accessibilityAttributedStringForRangeAttributeForParameter:(id)arg1;
- (id)accessibilityRTFForRangeAttributeForParameter:(id)arg1;
- (id)accessibilityBoundsForRangeAttributeForParameter:(id)arg1;
- (id)accessibilityRangeForIndexAttributeForParameter:(id)arg1;
- (id)accessibilityStringForRangeAttributeForParameter:(id)arg1;
- (id)accessibilitySharedTextUIElementsAttribute;
- (void)accessibilitySetVisibleCharacterRangeAttribute:(id)arg1;
- (id)accessibilityNumberOfCharactersAttribute;
- (void)accessibilitySetSelectedTextRangesAttribute:(id)arg1;
- (id)accessibilitySelectedTextRangesAttribute;
- (void)accessibilitySetSelectedTextRangeAttribute:(id)arg1;
- (void)accessibilitySetValueAttribute:(id)arg1;
- (id)accessibilityValueAttribute;
- (id)accessibilityTextLinkAtIndex:(unsigned long long)arg1;
- (id)accessibilityTextLinks;
- (id)accessibilityAttachmentAtIndex:(unsigned long long)arg1;
- (unsigned long long)accessibilityIndexForAttachment:(id)arg1;
- (id)accessibilityAttachments;
- (struct _NSRange)accessibilitySharedCharacterRange;
- (id)accessibilitySharedTextViews;
- (struct _NSRange)accessibilityStyleRangeForCharacterIndex:(unsigned long long)arg1;
- (id)accessibilityAXAttributedStringForCharacterRange:(struct _NSRange)arg1 parent:(id)arg2;
- (id)accessibilityRTFForCharacterRange:(struct _NSRange)arg1;
- (struct CGRect)accessibilityBoundsForCharacterRange:(struct _NSRange)arg1;
- (struct _NSRange)accessibilityCharacterRangeForPosition:(struct CGPoint)arg1;
- (struct _NSRange)accessibilityCharacterRangeForLineNumber:(unsigned long long)arg1;
- (unsigned long long)accessibilityLineNumberForCharacterIndex:(unsigned long long)arg1;
- (unsigned long long)accessibilityInsertionPointLineNumber;
- (void)accessibilitySetVisibleCharacterRange:(struct _NSRange)arg1;
- (struct _NSRange)accessibilityVisibleCharacterRange;
- (void)accessibilitySetSelectedRange:(struct _NSRange)arg1;
- (struct _NSRange)accessibilitySelectedRange;
- (void)accessibilitySetSelectedText:(id)arg1;
- (id)accessibilitySelectedText;
- (void)setTypingAttributes:(id)arg1;
- (void)viewDidEndLiveResize;
- (void)viewWillStartLiveResize;
- (void)_scrollRangeToVisible:(struct _NSRange)arg1 forceCenter:(BOOL)arg2;
- (void)_adjustedCenteredScrollRectToVisible:(struct CGRect)arg1 forceCenter:(BOOL)arg2;
- (void)_setFrameSize:(struct CGSize)arg1 forceScroll:(BOOL)arg2;
- (BOOL)_ensureLayoutCompleteForVisibleRectWithExtension:(BOOL)arg1;
- (void)_ensureLayoutCompleteToEndOfCharacterRange:(struct _NSRange)arg1;
- (void)_sizeDownIfPossible;
- (struct CGRect)firstRectForCharacterRange:(struct _NSRange)arg1 actualRange:(struct _NSRange *)arg2;
- (id)attributedSubstringFromRange:(struct _NSRange)arg1;
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;
- (BOOL)performDragOperation:(id)arg1;
- (void)_fixDragAndDropCharRangesForChangeInRanges:(id)arg1 replacementStrings:(id)arg2;
- (void)_userReplaceRange:(struct _NSRange)arg1 withString:(id)arg2;
- (BOOL)shouldChangeTextInRanges:(id)arg1 replacementStrings:(id)arg2;
- (void)showFindIndicatorForRange:(struct _NSRange)arg1;
- (void)_showFindIndicator;
- (void)drawInsertionPointInRect:(struct CGRect)arg1 color:(id)arg2 turnedOn:(BOOL)arg3;
- (void)updateInsertionPointStateAndRestartTimer:(BOOL)arg1;
- (void)selectAll:(id)arg1;
- (void)becomeMainWindow;
- (void)resignKeyWindow;
- (void)becomeKeyWindow;
- (BOOL)becomeFirstResponder;
- (BOOL)resignFirstResponder;
- (void)_invalidateDisplayForViewStatusChange;
- (void)resetCursorRects;
- (id)accessibilityAttributeValue:(id)arg1;

// Remaining properties
@property(retain) id <DVTCompletingTextViewDelegate> delegate; // @dynamic delegate;

@end

@interface DVTControllerContentView : DVTLayoutView_ML
{
    struct CGSize _minContentFrameSize;
    struct CGSize _maxContentFrameSize;
    DVTViewController *_viewController;
    NSWindow *_kvoWindow;
    int _horizontalAlignmentWhenClipping;
    int _horizontalAlignmentWhenPadding;
    int _verticalAlignmentWhenClipping;
    int _verticalAlignmentWhenPadding;
    int _verticalContentViewResizingMode;
    int _horizontalContentViewResizingMode;
    BOOL _isInstalled;
    BOOL _isPadding;
    BOOL _isReplacingSubview;
    BOOL _disablePaddingWarning;
    BOOL _isGrouped;
}

@property BOOL isGrouped; // @synthesize isGrouped=_isGrouped;
@property BOOL disablePaddingWarning; // @synthesize disablePaddingWarning=_disablePaddingWarning;
@property(nonatomic) int verticalContentViewResizingMode; // @synthesize verticalContentViewResizingMode=_verticalContentViewResizingMode;
@property(nonatomic) int horizontalContentViewResizingMode; // @synthesize horizontalContentViewResizingMode=_horizontalContentViewResizingMode;
@property(nonatomic) int verticalAlignmentWhenClipping; // @synthesize verticalAlignmentWhenClipping=_verticalAlignmentWhenClipping;
@property(nonatomic) int horizontalAlignmentWhenClipping; // @synthesize horizontalAlignmentWhenClipping=_horizontalAlignmentWhenClipping;
@property(nonatomic) struct CGSize minimumContentViewFrameSize; // @synthesize minimumContentViewFrameSize=_minContentFrameSize;
@property(nonatomic) int verticalAlignmentWhenPadding; // @synthesize verticalAlignmentWhenPadding=_verticalAlignmentWhenPadding;
@property(nonatomic) int horizontalAlignmentWhenPadding; // @synthesize horizontalAlignmentWhenPadding=_horizontalAlignmentWhenPadding;
@property(nonatomic) struct CGSize maximumContentViewFrameSize; // @synthesize maximumContentViewFrameSize=_maxContentFrameSize;
@property(retain, nonatomic) DVTViewController *viewController; // @synthesize viewController=_viewController;
- (BOOL)performKeyEquivalent:(id)arg1;
- (void)_invalidateLayoutBecauseOfSubviewFrameChange:(id)arg1;
- (void)willRemoveSubview:(id)arg1;
- (void)didAddSubview:(id)arg1;
- (void)windowWillClose:(id)arg1;
- (void)viewDidMoveToSuperview;
- (void)viewDidMoveToWindow;
- (void)viewWillMoveToSuperview:(id)arg1;
- (void)viewWillMoveToWindow:(id)arg1;
@property(readonly) BOOL isInstalled;
- (void)_viewDidInstall;
- (void)_viewWillUninstall;
@property(retain) NSView *contentView;
- (void)replaceSubview:(id)arg1 with:(id)arg2;
- (void)setSubviews:(id)arg1;
- (void)addSubview:(id)arg1;
- (void)layoutBottomUp;
- (void)layoutTopDown;
- (void)setNextResponder:(id)arg1;
- (void)_checkKvoWindow;
@property(readonly) NSWindow *kvoWindow;
- (id)initWithFrame:(struct CGRect)arg1;
- (id)accessibilityAttributeValue:(id)arg1;
- (BOOL)accessibilityIsIgnored;

@end

@interface DVTDelayedMenuButton : NSButton
{
}

+ (id)keyPathsForValuesAffectingCurrentMenuItem;
+ (Class)cellClass;
- (BOOL)_allowsContextMenus;
- (void)_runPopup:(id)arg1;
- (struct CGSize)menuOffset;
@property(copy) NSMenuItem *currentMenuItem;
- (void)setMenu:(id)arg1;
@property(retain) id <DVTDelayedMenuButtonDelegate> delegate;

@end

@interface DVTDelayedMenuButtonCell : NSButtonCell
{
    NSMenuItem *_currentMenuItem;
    struct CGPoint _previousMousePoint;
    NSMenu *_trampolineMenu;
    id <DVTDelayedMenuButtonDelegate> _delegate;
    NSImage *_inactiveImage;
    NSImage *_arrowImage;
    struct CGSize _originalArrowSize;
    BOOL _ignoredAction;
    BOOL _senderOfButtonActionIsButton;
    BOOL _delegateRespondsToWillSetCurrentMenuItem;
    BOOL _delegateRespondsToUpdatedMenu;
}

@property(copy, nonatomic) NSImage *arrowImage; // @synthesize arrowImage=_arrowImage;
@property BOOL senderOfButtonActionIsButton; // @synthesize senderOfButtonActionIsButton=_senderOfButtonActionIsButton;
@property(copy, nonatomic) NSImage *inactiveImage; // @synthesize inactiveImage=_inactiveImage;
@property(retain, nonatomic) id <DVTDelayedMenuButtonDelegate> delegate; // @synthesize delegate=_delegate;
@property(copy) NSImage *pressedImage;
@property(copy) NSImage *activeImage;
- (void)_validateTrampolineMenu:(id)arg1;
- (id)target;
- (SEL)action;
@property(copy) NSMenuItem *currentMenuItem;
- (void)setMenu:(id)arg1;
- (BOOL)validateMenuItem:(id)arg1;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (BOOL)dvt_validateItem:(id)arg1;
- (void)copyAttributesFromMenuItem:(id)arg1 toMenuItem:(id)arg2;
- (void)trampolineMenuFired:(id)arg1;
- (void)performAction:(id)arg1;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawImage:(id)arg1 withFrame:(struct CGRect)arg2 inView:(id)arg3;
- (void)awakeFromNib;
- (BOOL)_shouldShowMenu;
- (double)popUpDelay;

@end

@interface DVTGradientImageButton : NSButton
{
}

+ (Class)cellClass;
@property int highlightSides;
@property int borderSides;
@property int gradientStyle;
@property BOOL showsState;

@end

@interface DVTDelayedMenuGradientImageButton : DVTGradientImageButton
{
    struct CGSize _menuOffset;
    id _menuSource;
    SEL _menuSelector;
}

+ (Class)cellClass;
@property struct CGSize menuOffset; // @synthesize menuOffset=_menuOffset;
- (void)showMenu:(id)arg1;
- (void)_runPopUp;
- (void)setMenuSource:(id)arg1 selector:(SEL)arg2;
@property float popUpDelay;

@end

@interface DVTGradientImageButtonCell : NSButtonCell
{
    NSShadow *_imageShadow;
    int _gradientStyle;
    int _borderSides;
    int _highlightSides;
    BOOL _showsState;
    BOOL _suppressLeftBorderForTabStyles;
    BOOL _enableGradientStylBorderSuppression;
    BOOL _useButtonImageCenteringHack;
    BOOL _usedAsRadioButton;
}

@property BOOL usedAsRadioButton; // @synthesize usedAsRadioButton=_usedAsRadioButton;
@property BOOL useButtonImageCenteringHack; // @synthesize useButtonImageCenteringHack=_useButtonImageCenteringHack;
@property BOOL enableGradientStylBorderSuppression; // @synthesize enableGradientStylBorderSuppression=_enableGradientStylBorderSuppression;
@property BOOL suppressLeftBorderForTabStyles; // @synthesize suppressLeftBorderForTabStyles=_suppressLeftBorderForTabStyles;
@property(nonatomic) BOOL showsState; // @synthesize showsState=_showsState;
@property(copy) NSShadow *imageShadow; // @synthesize imageShadow=_imageShadow;
@property int highlightSides; // @synthesize highlightSides=_highlightSides;
@property int borderSides; // @synthesize borderSides=_borderSides;
@property(nonatomic) int gradientStyle; // @synthesize gradientStyle=_gradientStyle;
- (void)_setGradientStyle:(int)arg1;
- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawImage:(id)arg1 withFrame:(struct CGRect)arg2 inView:(id)arg3;
- (void)setTitle:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initImageCell:(id)arg1;
- (id)initTextCell:(id)arg1;
- (id)initWithGradientStyle:(int)arg1 borderSides:(int)arg2;
- (void)dvt_commonInitWithGradientStyle:(int)arg1 borderSides:(int)arg2;
- (id)accessibilityAttributeValue:(id)arg1;

@end

@interface DVTDelayedMenuGradientImageButtonCell : DVTGradientImageButtonCell
{
    float _popUpDelay;
}

@property float popUpDelay; // @synthesize popUpDelay=_popUpDelay;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;

@end

@interface DVTDelayedValidator : NSObject
{
    id _validateBlock;
    NSArray *_runLoopModes;
    NSNumber *_priority;
    NSNumber *_delay;
    NSString *_terminationDisablingReason;
    NSRunLoop *_debugInvalidationRunLoop;
    DVTStackBacktrace *_debugInvalidationBacktrace;
    struct {
        unsigned int scheduledValidation:1;
        unsigned int validatesWhenAppTerminates:1;
        unsigned int disablesSuddenTermination:1;
        unsigned int disablesAutomaticTermination:1;
        unsigned int didDisableSuddenTermination:1;
        unsigned int didDisableAutomaticTermination:1;
        unsigned int validating:1;
        unsigned int _reserved:1;
    } _flags;
}

+ (id)delayedValidatorWithTerminationDisablingReason:(id)arg1 withBlock:(id)arg2;
@property(copy) NSString *terminationDisablingReason; // @synthesize terminationDisablingReason=_terminationDisablingReason;
@property(copy, nonatomic) NSArray *runLoopModes; // @synthesize runLoopModes=_runLoopModes;
@property(copy, nonatomic) NSNumber *delay; // @synthesize delay=_delay;
@property(copy, nonatomic) NSNumber *priority; // @synthesize priority=_priority;
- (void)appWillTerminate:(id)arg1;
- (void)forceValidation;
- (void)cancelValidation;
- (void)invalidate;
- (void)validateIfNeeded;
- (void)unscheduleValidation;
- (void)doValidation:(id)arg1;
@property BOOL disablesAutomaticTermination;
@property BOOL disablesSuddenTermination;
@property BOOL validatesWhenAppTerminates;
@property(readonly, getter=isValid) BOOL valid;
- (void)setAutomaticTerminationBlocked:(BOOL)arg1;
- (void)setSuddenTerminationBlocked:(BOOL)arg1;
- (void)finalize;
- (id)initWithBlock:(id)arg1;
- (id)initWithTarget:(id)arg1 selector:(SEL)arg2;

@end

@interface DVTDiffContextThreeWay : DVTDiffContext
{
    DVTDiffDataSource *_ancestorDataSource;
    id <DVTObservingToken> _ancestorDataSourceObserver;
}

- (id)tmpModifiedDescriptorIndexes;
- (id)modifiedDescriptorIndexes;
- (id)commonDescriptorIndexes;
- (id)description;
- (void)_buildDiffDescriptors;
- (id)_diffDescriptorsByAddingUnmodified:(id)arg1;
- (id)_diffContextForComparing:(id)arg1 with:(id)arg2;
- (id)ancestorDataSource;
- (void)setAncestorDataSource:(id)arg1;
- (BOOL)_setAncestorDataSource:(id)arg1;
- (id)init;
- (id)initWithOriginalDataSource:(id)arg1 modifiedDataSource:(id)arg2 ancestorDataSource:(id)arg3;

// Remaining properties
@property(retain) NSOperationQueue *diffQueue; // @dynamic diffQueue;
@property(readonly) NSMutableArray *mutableDiffDescriptors; // @dynamic mutableDiffDescriptors;
@property(retain) NSNumber *timestamp; // @dynamic timestamp;
@property(retain) NSMutableArray *tmpDiffDescriptors; // @dynamic tmpDiffDescriptors;

@end

@interface DVTDiffSession : NSObject <DVTInvalidation>
{
    DVTDiffContext *_diffContext;
    id <DVTObservingToken> _diffContextObservingToken;
    NSArray *_diffDescriptors;
    NSIndexSet *_commonDescriptorIndexes;
    NSIndexSet *_modifiedDescriptorIndexes;
    NSString *_diffString;
    DVTStackBacktrace *_invalidationBacktrace;
    unsigned long long _selectedDiffDescriptorIndex;
    unsigned long long _timestamp;
    id /*<DVTDiffSessionDelegate>*/ _delegate;
    NSUndoManager *_undoManager;
    DVTSourceTextStorage *_mergeTextStorage;
    id _mergeTextStorageObserver;
    NSData *_mergeTextDigest;
    NSArray *_mergeDescriptors;
    NSMutableArray *_mergeDescriptorObservers;
    DVTMapTable *_descriptorMap;
    unsigned long long _conflictCount;
    DVTDiffDataSource *_ancestorDataSource;
    DVTDiffDataSource *_modifiedDataSource;
    DVTDiffDataSource *_originalDataSource;
    int _needsUpdate;
    BOOL _isInvalidated;
    BOOL _inMergeEdit;
    BOOL _isBinaryConflictResolution;
}

+ (void)setUsesPatienceDiffingAlgorithm:(BOOL)arg1;
+ (BOOL)usesPatienceDiffingAlgorithm;
+ (id)binaryConflictDetectionForOriginalDataSource:(id)arg1 modifiedDataSource:(id)arg2 ancestorDataSource:(id)arg3;
+ (int)binaryConflictMergeDirection:(id)arg1;
+ (BOOL)isBinaryConflictResolutionMergeState:(id)arg1;
+ (void)_validateRestoredState:(id)arg1;
+ (id)keyPathsForValuesAffectingSelectedMergeDescriptor;
+ (id)keyPathsForValuesAffectingIsThreeWayDiff;
+ (id)logAspect;
@property BOOL isBinaryConflictResolution; // @synthesize isBinaryConflictResolution=_isBinaryConflictResolution;
@property(retain) NSData *mergeTextDigest; // @synthesize mergeTextDigest=_mergeTextDigest;
@property(readonly) DVTDiffDataSource *originalDataSource; // @synthesize originalDataSource=_originalDataSource;
@property(readonly) DVTDiffDataSource *modifiedDataSource; // @synthesize modifiedDataSource=_modifiedDataSource;
@property(readonly) DVTDiffDataSource *ancestorDataSource; // @synthesize ancestorDataSource=_ancestorDataSource;
@property unsigned long long conflictCount; // @synthesize conflictCount=_conflictCount;
@property(retain) DVTSourceTextStorage *mergeTextStorage; // @synthesize mergeTextStorage=_mergeTextStorage;
@property(retain) NSUndoManager *undoManager; // @synthesize undoManager=_undoManager;
@property(retain) id /*<DVTDiffSessionDelegate>*/ delegate; // @synthesize delegate=_delegate;
@property unsigned long long timestamp; // @synthesize timestamp=_timestamp;
@property(retain) NSString *diffString; // @synthesize diffString=_diffString;
@property(readonly) DVTStackBacktrace *invalidationBacktrace; // @synthesize invalidationBacktrace=_invalidationBacktrace;
@property unsigned long long selectedDiffDescriptorIndex; // @synthesize selectedDiffDescriptorIndex=_selectedDiffDescriptorIndex;
@property(retain) NSIndexSet *modifiedDescriptorIndexes; // @synthesize modifiedDescriptorIndexes=_modifiedDescriptorIndexes;
@property(retain) NSIndexSet *commonDescriptorIndexes; // @synthesize commonDescriptorIndexes=_commonDescriptorIndexes;
@property(retain) NSArray *diffDescriptors; // @synthesize diffDescriptors=_diffDescriptors;
@property(retain) DVTDiffContext *diffContext; // @synthesize diffContext=_diffContext;
- (void)_incrementTimestamp;
- (void)refresh;
- (void)invalidate;
@property(readonly) BOOL mergeIsDirty;
@property(readonly) NSDictionary *restoredState; // @dynamic restoredState;
@property(retain) NSArray *mergeDescriptors; // @synthesize mergeDescriptors=_mergeDescriptors;
@property(readonly) DVTDiffDescriptor *selectedMergeDescriptor;
@property(readonly, nonatomic, getter=isValid) BOOL valid;
@property(readonly) BOOL isThreeWayDiff;
- (void)_rebuildSubdescriptors;
- (void)_loadDataSourcesWithOriginalDataSource:(id)arg1 modifiedDataSource:(id)arg2 ancestorDataSource:(id)arg3;
- (void)_updateMergeDocumentForChangedDescriptor:(id)arg1;
- (id)_buildMergeStringAndDescriptors:(id *)arg1 withMergeTextDigest:(id *)arg2;
- (void)_handleMergeEdit;
- (void)_scrapeDiffResults;
- (void)_oneShotDiffAndScrapeResults;
- (void)_updateConflictCount;
- (void)_loadPreviousMergeSession:(id)arg1;
- (void)_setupBinaryMergeSession;
- (void)_switchDiffingEngine;
- (id)initWithOriginalDataSource:(id)arg1 modifiedDataSource:(id)arg2 ancestorDataSource:(id)arg3 undoManager:(id)arg4 mergeTextStorage:(id)arg5 mergeState:(id)arg6;
- (id)initWithOriginalDataSource:(id)arg1 modifiedDataSource:(id)arg2 ancestorDataSource:(id)arg3;
- (id)initWithBinaryConflictResolutionMergeState:(id)arg1;
- (id)initWithOriginalBinaryDataSource:(id)arg1 modifiedBinaryDataSource:(id)arg2 ancestorBinaryDataSource:(id)arg3;

@end

@interface DVTDiffTextStorageDataSource : DVTDiffLineDataSource
{
}

+ (void)initialize;
- (void)_textStorageDidProcessEditing:(id)arg1;
- (void)_coalescedTextStorageDidProcessEditing:(id)arg1;
- (id)THREAD_arrangedContent;
- (id)arrangedContent;
- (id)THREAD_content;
- (void)didChangeContent;
- (void)willChangeContent;
- (id)initWithContent:(id)arg1;

@end

@interface DVTDisclosureHeaderView : DVTBorderedView <DVTIssueDisplayingView>
{
    NSButton *_disclosureButton;
    NSTextField *_titleField;
    NSPopUpButton *_actionMenuButton;
    DVTRolloverImageButton *_closeButton;
    NSImageView *_iconView;
    NSButton *_issueIconButton;
    NSDictionary *_issueInfoDictionary;
    double _lastHeightForBackgroundLayer;
    struct CGLayer *_backgroundLayer;
    double _distanceFromLeftEdgeToDisclosureButton;
    id _closeClickHandler;
    double _rightEdgeInset;
    BOOL _showDisclosureButton;
    BOOL _drawsBackground;
    BOOL _disclosed;
    BOOL _disclosable;
    BOOL _draggable;
}

@property(getter=isDisclosed) BOOL disclosed; // @synthesize disclosed=_disclosed;
@property(getter=isDraggable) BOOL draggable; // @synthesize draggable=_draggable;
@property(getter=isDisclosable) BOOL disclosable; // @synthesize disclosable=_disclosable;
@property double rightEdgeInset; // @synthesize rightEdgeInset=_rightEdgeInset;
@property(nonatomic) BOOL drawsBackground; // @synthesize drawsBackground=_drawsBackground;
@property(copy) NSDictionary *issueInfoDictionary; // @synthesize issueInfoDictionary=_issueInfoDictionary;
@property(nonatomic) BOOL showDisclosureButton; // @synthesize showDisclosureButton=_showDisclosureButton;
@property double distanceFromLeftEdgeToDisclosureButton; // @synthesize distanceFromLeftEdgeToDisclosureButton=_distanceFromLeftEdgeToDisclosureButton;
- (void)drawRect:(struct CGRect)arg1;
- (struct CGLayer *)_createBackgroundLayerForCurrentHeight;
- (struct CGRect)backgroundRect;
- (void)layoutBottomUp;
- (void)layoutTopDown;
@property(copy) NSImage *icon;
- (void)fireIssueIconButtonHandlerBlock:(id)arg1;
@property(readonly) struct CGRect grabRect;
@property(retain) NSMenu *actionMenu;
@property(retain) NSTextField *titleField;
@property(copy) NSString *title;
- (void)mouseDown:(id)arg1;
- (void)insertCloseButtonWithAccessibilityDescription:(id)arg1 withClickHandler:(id)arg2;
- (void)insertCloseButtonWithClickHandler:(id)arg1;
- (void)closeButtonWasClicked:(id)arg1;
- (void)insertCloseButtonWithTarget:(id)arg1 action:(SEL)arg2 withAccessibilityDescription:(id)arg3;
- (void)insertCloseButtonWithTarget:(id)arg1 action:(SEL)arg2;
- (void)dealloc;
- (void)finalize;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_commonInit;
- (void)_configureIssueIconButton;
- (void)_configureIconView;
- (id)_defaultTitleField;
- (void)_configureCloseButton;
- (void)_configureActionButton;
@property(retain) NSButton *disclosureButton;
- (id)_defaultDisclosureButton;
- (double)preferredHeight;

@end

@interface DVTDisclosureView : DVTLayoutView_ML <DVTDraggableView, DVTIssueDisplayingView>
{
    NSView *contentView;
    DVTDisclosureHeaderView *_headerView;
    NSColor *_bottomBorderColor;
    NSColor *_backgroundColor;
    NSString *_disclosureStatePersistenceDefaultsKey;
}

+ (id)keyPathsForValuesAffectingDisclosed;
+ (void)initialize;
@property(copy) NSDictionary *issueInfoDictionary;
- (struct CGRect)draggingRect;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
@property(copy) NSString *disclosureStatePersistenceDefaultsKey; // @dynamic disclosureStatePersistenceDefaultsKey;
@property(getter=isDisclosed) BOOL disclosed;
@property(copy) NSColor *backgroundColor;
@property(copy) NSColor *bottomBorderColor;
@property(retain) NSView *contentView;
- (void)reflectDefaultsDisclosureState;
- (void)drawRect:(struct CGRect)arg1;
- (struct CGRect)bottomBorderRect;
- (void)layoutBottomUp;
- (void)layoutTopDown;
- (BOOL)shouldDrawBottomBorder;
- (BOOL)isFlipped;
@property(retain) DVTDisclosureHeaderView *headerView; // @dynamic headerView;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface DVTDispatchDelayedValidator : NSObject
{
    id _validateBlock;
    DVTStackBacktrace *_debugInvalidationBacktrace;
    DVTDispatchLock *_ivarAccessLock;
    double _delay;
    unsigned long long _dispatchGeneration;
    struct dispatch_queue_s *_dispatchQueue;
    BOOL _scheduledValidation;
}

@property(nonatomic) double delay; // @synthesize delay=_delay;
- (void)cancelValidation;
- (void)invalidate;
- (void)finalize;
- (id)initWithBlock:(id)arg1;
- (id)initWithTarget:(id)arg1 selector:(SEL)arg2;

@end

@interface DVTDragDeleteTarget : NSObject
{
}

- (BOOL)performDragOperation:(id)arg1;
- (BOOL)prepareForDragOperation:(id)arg1;
- (unsigned long long)draggingUpdated:(id)arg1;
- (unsigned long long)draggingEntered:(id)arg1;

@end

@interface DVTDragManager : NSObject
{
}

+ (BOOL)isUserDragging;
+ (id)sharedInstance;
- (unsigned long long)dragImage:(id)arg1 at:(struct CGPoint)arg2 offset:(struct CGSize)arg3 mouseDownEvent:(id)arg4 mouseDraggedEvent:(id)arg5 pasteboard:(id)arg6 allowedOperations:(unsigned long long)arg7 source:(id)arg8 slideBack:(BOOL)arg9 draggingSourceContext:(id)arg10;

@end

@interface DVTDraggedImageState : NSObject
{
    struct CGPoint _anchorPoint;
    BOOL _isAnchorPointExplicit;
}

- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (BOOL)synthesizedAnchorPoint:(struct CGPoint *)arg1 forSubiquentState:(id)arg2;
- (void)synthesizeAnchorPointFromPreviousStates:(id)arg1;
- (id)image;
- (struct CGPoint)anchorPoint;
- (void)setAnchorPoint:(struct CGPoint)arg1;
- (BOOL)isAnchorPointExplicit;

@end

@interface DVTDraggedImageStateTransitionRegistry : NSObject
{
    NSMutableDictionary *_registry;
}

+ (id)sharedInstance;
- (id)transitionFromState:(id)arg1 toState:(id)arg2;
- (void)registerTransition:(Class)arg1 fromImageStateClass:(Class)arg2 toImageStateClass:(Class)arg3;
- (id)init;

@end

@interface DVTDraggedImageStateTransitionView : NSView
{
    float _progress;
    DVTDraggedImageState *_fromState;
    DVTDraggedImageState *_toState;
}

- (id)toState;
- (id)fromState;
- (float)progress;
- (void)setProgress:(float)arg1;
- (double)duration;
- (struct CGPoint)anchorPoint;
- (id)initWithFromState:(id)arg1 andToState:(id)arg2;

@end

@interface DVTDraggedObjectsImageState : DVTDraggedImageState
{
    NSMutableDictionary *_places;
    NSMutableDictionary *_views;
    NSMutableDictionary *_images;
    NSMutableArray *_identifiers;
    NSImage *_image;
    NSString *_name;
    struct CGPoint _frameOffset;
    BOOL _forcesImageScaling;
}

+ (id)draggedObjectStateWithIdentifiers:(id)arg1 views:(id)arg2 name:(id)arg3;
+ (id)draggedObjectStateWithIdentifiers:(id)arg1 images:(id)arg2 frames:(id)arg3 name:(id)arg4;
+ (id)draggedObjectStateWithImage:(id)arg1;
+ (id)draggedObjectStateWithIdentifier:(id)arg1 view:(id)arg2 name:(id)arg3;
+ (id)draggedObjectStateWithIdentifier:(id)arg1 image:(id)arg2 name:(id)arg3;
@property BOOL forcesImageScaling; // @synthesize forcesImageScaling=_forcesImageScaling;
@property(readonly) NSString *name; // @synthesize name=_name;
@property(readonly) NSArray *identifiers; // @synthesize identifiers=_identifiers;
- (id)description;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (BOOL)synthesizedAnchorPoint:(struct CGPoint *)arg1 forSubiquentState:(id)arg2;
- (id)identifierForPoint:(struct CGPoint)arg1;
- (BOOL)containsIdentifier:(id)arg1;
- (id)image;
- (id)views;
- (id)imageForIdentifier:(id)arg1;
- (id)viewForIdentifier:(id)arg1;
- (struct CGRect)frameForIdentifier:(id)arg1;
- (void)remapIdentifiers:(id)arg1;
- (id)initWithIdentifiers:(id)arg1 views:(id)arg2 name:(id)arg3;
- (id)initWithIdentifiers:(id)arg1 images:(id)arg2 frames:(id)arg3 name:(id)arg4;

@end

@interface DVTDraggedObjectsTransitionView : DVTDraggedImageStateTransitionView
{
    NSAffineTransform *_transformFromToState;
    NSAffineTransform *_transformFromFromState;
}

- (void)drawRect:(struct CGRect)arg1;
- (void)setProgress:(float)arg1;
- (id)toState;
- (id)fromState;
- (id)description;
- (id)initWithFromState:(id)arg1 andToState:(id)arg2;

@end

@interface DVTDraggingContext : NSObject <DVTDraggingInfo>
{
    NSWindow *_draggingDestinationWindow;
    struct CGPoint _draggingLocation;
    struct CGPoint _draggedImageLocation;
    NSImage *_draggedImage;
    NSPasteboard *_draggingPasteboard;
    id _draggingSource;
    NSDictionary *_draggingSourceContext;
    long long _draggingSequenceNumber;
    DVTDraggedImageState *_draggedImageState;
    struct CGSize _draggingStickiness;
    NSMutableArray *_invalidationPool;
    unsigned long long _draggingSourceOperationMask;
    unsigned long long _lastDragDestinationOperationMask;
    BOOL _draggedImageStateNeedsUpdate;
    long long _draggingFormation;
    long long _numberOfValidItemsForDrop;
    BOOL _animatesToDestination;
}

@property long long draggingFormation; // @synthesize draggingFormation=_draggingFormation;
@property long long numberOfValidItemsForDrop; // @synthesize numberOfValidItemsForDrop=_numberOfValidItemsForDrop;
@property BOOL animatesToDestination; // @synthesize animatesToDestination=_animatesToDestination;
@property struct CGSize draggingStickiness; // @synthesize draggingStickiness=_draggingStickiness;
@property BOOL draggedImageStateNeedsUpdate; // @synthesize draggedImageStateNeedsUpdate=_draggedImageStateNeedsUpdate;
@property unsigned long long lastDragDestinationOperationMask; // @synthesize lastDragDestinationOperationMask=_lastDragDestinationOperationMask;
@property(retain) NSDictionary *draggingSourceContext; // @synthesize draggingSourceContext=_draggingSourceContext;
@property(readonly) NSPasteboard *draggingPasteboard; // @synthesize draggingPasteboard=_draggingPasteboard;
@property(retain) NSImage *draggedImage; // @synthesize draggedImage=_draggedImage;
@property struct CGPoint draggedImageLocation; // @synthesize draggedImageLocation=_draggedImageLocation;
@property(retain) id draggingSource; // @synthesize draggingSource=_draggingSource;
@property struct CGPoint draggingLocation; // @synthesize draggingLocation=_draggingLocation;
@property unsigned long long draggingSourceOperationMask; // @synthesize draggingSourceOperationMask=_draggingSourceOperationMask;
@property(retain) NSWindow *draggingDestinationWindow; // @synthesize draggingDestinationWindow=_draggingDestinationWindow;
@property(retain) DVTDraggedImageState *draggedImageState; // @synthesize draggedImageState=_draggedImageState;
@property long long draggingSequenceNumber; // @synthesize draggingSequenceNumber=_draggingSequenceNumber;
- (void)enumerateDraggingItemsWithOptions:(unsigned long long)arg1 forView:(id)arg2 classes:(id)arg3 searchOptions:(id)arg4 usingBlock:(id)arg5;
- (void)invalidatePooledObjects;
- (void)invalidateObjectAtEndOfDragLoop:(id)arg1;
- (struct CGPoint)draggingLocationOnScreen;
- (id)namesOfPromisedFilesDroppedAtDestination:(id)arg1;
- (void)slideDraggedImageTo:(struct CGPoint)arg1;
- (unsigned long long)_lastDragDestinationOperation;
- (id)description;
- (id)initWithSource:(id)arg1 andPasteboard:(id)arg2;

@end

@interface DVTDualProxyWindow : NSWindow
{
    DVTDualProxyWindowTitleView *_titleView;
    NSURL *_secondaryRepresentedURL;
    NSString *_titlePrefix;
    id _primaryRepresentedDocumentBlock;
    id _secondaryRepresentedDocumentBlock;
}

- (id)_accessibilityTitleCell;
- (struct CGRect)_accessibilityTitleRect;
- (id)accessibilityTitleUIElementAttribute;
- (void)dvt_updateTitle:(id)arg1;
- (void)setTitle:(id)arg1;
- (id)title;
@property(copy) id secondaryRepresentedDocumentBlock;
@property(copy) id primaryRepresentedDocumentBlock;
@property(copy) NSString *titlePrefix;
@property(copy) NSURL *secondaryRepresentedURL;
- (void)setRepresentedURL:(id)arg1;
- (void)invalidateTitle;
- (BOOL)_isTitleHidden;
- (id)dvt_titleView;

@end

@interface DVTDualProxyWindowTitleView : NSView
{
    DVTWindowProxyDragButton *_primaryDragButton;
    DVTWindowProxyDragButton *_secondaryDragButton;
    NSString *_primaryName;
    NSImage *_primaryImage;
    NSString *_secondaryName;
    NSImage *_secondaryImage;
}

+ (id)_titleCell;
- (BOOL)mouseDownCanMoveWindow;
- (void)rightMouseDown:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (void)_drawText:(id)arg1 inRect:(struct CGRect)arg2;
- (void)_superViewFrameDidChange:(id)arg1;
- (void)viewDidMoveToSuperview;
- (void)viewWillMoveToSuperview:(id)arg1;
- (void)_updateFrame;
- (void)_updateDragButtons;
- (struct CGRect)dvt_maxTitlebarTitleRect;
- (void)_getTitlePrefixRect:(struct CGRect *)arg1 titlePrefixSeparatorRect:(struct CGRect *)arg2 primaryImageRect:(struct CGRect *)arg3 primaryTitleRect:(struct CGRect *)arg4 separatorRect:(struct CGRect *)arg5 secondaryImageRect:(struct CGRect *)arg6 secondaryTitleRect:(struct CGRect *)arg7;
- (struct CGSize)_desiredSize;
- (struct CGSize)_titlePrefixSize;
- (struct CGSize)_secondaryTitleSize;
- (struct CGSize)_secondaryImageSize;
- (struct CGSize)_separatorSize;
- (struct CGSize)_primaryTitleSize;
- (struct CGSize)_primaryImageSize;
- (struct CGSize)_sizeForString:(id)arg1;
@property(readonly) DVTWindowProxyDragButton *_secondaryDragButton;
@property(readonly) DVTWindowProxyDragButton *_primaryDragButton;
- (void)invalidateTitle;
- (void)_getDocumentIcon:(id *)arg1 andDisplayName:(id *)arg2 forURL:(id)arg3;
@property(readonly) NSString *title;
@property(readonly) NSString *titlePrefix;
- (void)_setSecondaryName:(id)arg1 andImage:(id)arg2;
- (void)_setPrimaryName:(id)arg1 andImage:(id)arg2;
@property(readonly) NSString *secondaryName;
@property(readonly) NSImage *secondaryImage;
@property(readonly) NSString *primaryName;
@property(readonly) NSImage *primaryImage;
@property(readonly) NSURL *secondaryRepresentedURL;
@property(readonly) NSURL *primaryRepresentedURL;
- (id)_dualProxyWindow;

@end

@interface DVTDynamicTableHeaderView : NSView
{
    DVTImageAndTextCell *_imageAndTextCell;
    NSTextFieldCell *_textCell;
    NSButton *_disclosureButton;
    BOOL _showDisclosureButton;
}

+ (id)stringDropShadow;
+ (id)matchAttributedStringForCount:(long long)arg1;
@property(readonly) NSButton *disclosureButton; // @synthesize disclosureButton=_disclosureButton;
@property(nonatomic) BOOL showDisclosureButton; // @synthesize showDisclosureButton=_showDisclosureButton;
@property(retain) DVTImageAndTextCell *imageAndTextCell; // @synthesize imageAndTextCell=_imageAndTextCell;
@property(retain) NSTextFieldCell *textCell; // @synthesize textCell=_textCell;
- (void)drawRect:(struct CGRect)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface DVTDynamicTableRowProgressIndicatorView : DVTBorderedView
{
    NSProgressIndicator *_progressIndicator;
}

+ (id)dynamicTableRowProgressIndicatorView;
@property(retain) NSProgressIndicator *progressIndicator; // @synthesize progressIndicator=_progressIndicator;

@end

@interface DVTDynamicTableRowView : DVTBorderedView <DVTDynamicTableRowViewSupport>
{
    DVTComparisonSplitView *_splitView;
    NSView *_leftContentView;
    NSView *_rightContentView;
    NSViewAnimation *_viewAnimation;
    id _populationBlock;
    struct dispatch_queue_s *_popQ;
    BOOL _removed;
}

+ (id)dynamicTableRowViewUsingSplitViewStyle:(int)arg1;
+ (id)keyPathsForValuesAffectingSelected;
@property(getter=isRemoved) BOOL removed; // @synthesize removed=_removed;
@property struct dispatch_queue_s *popQ; // @synthesize popQ=_popQ;
@property(copy) id populationBlock; // @synthesize populationBlock=_populationBlock;
@property(retain) NSViewAnimation *viewAnimation; // @synthesize viewAnimation=_viewAnimation;
@property(retain) NSView *rightContentView; // @synthesize rightContentView=_rightContentView;
@property(retain) NSView *leftContentView; // @synthesize leftContentView=_leftContentView;
@property(retain) DVTComparisonSplitView *splitView; // @synthesize splitView=_splitView;
- (void)finalize;
- (void)populateLeftContentSubview:(id)arg1 rightContentSubview:(id)arg2 withAnimation:(BOOL)arg3;
- (void)viewWillMoveToSuperview:(id)arg1;
- (void)showPlaceholderWithPopulationBlock:(id)arg1 usingQueue:(void)arg2;

@end

@interface DVTTableView : NSTableView <DVTProgressIndicatorProvidingView>
{
    int _emptyContentStringStyle;
    NSString *_emptyContentString;
    NSTextField *_emptyContentTextField;
    NSIndexSet *_draggedRows;
    NSEvent *_event;
    id _progressIndicatorsByItem;
}

@property int emptyContentStringStyle; // @synthesize emptyContentStringStyle=_emptyContentStringStyle;
@property(copy, nonatomic) NSString *emptyContentString; // @synthesize emptyContentString=_emptyContentString;
@property(retain) NSEvent *event; // @synthesize event=_event;
@property(copy) NSIndexSet *draggedRows; // @synthesize draggedRows=_draggedRows;
- (id)progressIndicatorForItem:(id)arg1 createIfNecessary:(BOOL)arg2 progressIndicatorStyle:(unsigned long long)arg3;
- (void)highlightSelectionInClipRect:(struct CGRect)arg1;
- (void)concludeDragOperation:(id)arg1;
- (void)draggingEnded:(id)arg1;
- (unsigned long long)draggingUpdated:(id)arg1;
- (unsigned long long)draggingEntered:(id)arg1;
- (unsigned long long)draggingSourceOperationMaskForLocal:(BOOL)arg1;
- (id)dragImageForRowsWithIndexes:(id)arg1 tableColumns:(id)arg2 event:(id)arg3 offset:(struct CGPoint *)arg4;
- (void)insertText:(id)arg1;
- (void)doCommandBySelector:(SEL)arg1;
- (void)keyDown:(id)arg1;
@property(readonly) NSIndexSet *contextMenuSelectedRowIndexes;
- (id)clickedRowIndexes;
- (void)viewWillDraw;
- (void)_showEmptyContentString;
- (void)_hideEmptyContentString;

@end

@interface DVTDynamicTableView : DVTTableView <NSTableViewDelegate, NSTableViewDataSource>
{
    DVTMapTable *_viewsInVisibleRows;
    long long _dynEditingRow;
    long long _editingCount;
    long long _lastNumSections;
    long long _lastNumTableRows;
    long long *_rowsPerSectionCache;
    id /*<DVTDynamicTableViewDelegate>*/ _dynamicDelegate;
    id /*<DVTDynamicTableViewDataSource>*/ _dynamicDataSource;
    BOOL _hasSectionHeaders;
    BOOL _allowsSelection;
}

@property BOOL allowsSelection; // @synthesize allowsSelection=_allowsSelection;
@property(retain) id /*<DVTDynamicTableViewDataSource>*/ dynamicDataSource; // @synthesize dynamicDataSource=_dynamicDataSource;
- (BOOL)tableView:(id)arg1 shouldSelectRow:(long long)arg2;
- (BOOL)validateProposedFirstResponder:(id)arg1 forEvent:(id)arg2;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (id)tableView:(id)arg1 viewForTableColumn:(id)arg2 row:(long long)arg3;
- (BOOL)tableView:(id)arg1 isGroupRow:(long long)arg2;
- (double)tableView:(id)arg1 heightOfRow:(long long)arg2;
- (long long)numberOfRowsInTableView:(id)arg1;
- (void)tableView:(id)arg1 didRemoveRowView:(id)arg2 forRow:(long long)arg3;
- (void)tableView:(id)arg1 didAddRowView:(id)arg2 forRow:(long long)arg3;
- (id)keyForRow:(long long)arg1 inSection:(long long)arg2;
- (long long)_mapDynamicRow:(long long)arg1 dynamicSection:(long long)arg2;
- (void)_mapTableRow:(long long)arg1 toDynamicRow:(long long *)arg2 dynamicSection:(long long *)arg3;
- (void)noteHeightOfRow:(long long)arg1 inSectionChanged:(long long)arg2 animate:(BOOL)arg3;
- (struct CGRect)rectOfRow:(long long)arg1 inSection:(long long)arg2;
- (struct CGRect)rectOfHeaderInSection:(long long)arg1;
- (void)didEndEditingRow:(long long)arg1 inSection:(long long)arg2;
- (void)willStartEditingRow:(long long)arg1 inSection:(long long)arg2;
- (long long)editedRow;
- (void)reloadSectionsForIndexes:(id)arg1;
- (void)reloadDataForRowIndexes:(id)arg1 columnIndexes:(id)arg2;
- (void)reloadData;
- (void)_removeAllCachedViews;
- (void)_removeCachedViewsInIndexSet:(id)arg1;
- (void)_removeCachedViewForRow:(long long)arg1;
@property(retain) id /*<DVTDynamicTableViewDelegate>*/ dynamicDelegate;
- (void)setDataSource:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)dealloc;
- (void)_commonInit;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface DVTFilePathField : NSTextField
{
    BOOL _pathIsEditing;
}

+ (Class)cellClass;
@property BOOL pathIsEditing; // @synthesize pathIsEditing=_pathIsEditing;
- (void)mouseDown:(id)arg1;
- (void)textDidChange:(id)arg1;
- (void)willRemoveSubview:(id)arg1;
- (void)didAddSubview:(id)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (void)setCell:(id)arg1;

@end

@interface DVTFilePathFieldCell : NSTextFieldCell
{
    NSButtonCell *_chooseButtonCell;
    NSButtonCell *_linkButtonCell;
    double _chooseButtonWidth;
    double _linkButtonWidth;
    NSString *_choosePathMessage;
    NSString *_choosePathDefaultFilePath;
    id _delegate;
    BOOL _alwaysShowChooser;
    BOOL _showLinkButton;
    BOOL _chooseFile;
    BOOL _chooseDir;
    BOOL _showChooserButton;
}

@property BOOL showChooserButton; // @synthesize showChooserButton=_showChooserButton;
@property BOOL chooseDir; // @synthesize chooseDir=_chooseDir;
@property BOOL chooseFile; // @synthesize chooseFile=_chooseFile;
@property BOOL showLinkButton; // @synthesize showLinkButton=_showLinkButton;
@property BOOL alwaysShowChooser; // @synthesize alwaysShowChooser=_alwaysShowChooser;
@property(retain) id delegate; // @synthesize delegate=_delegate;
@property(copy) NSString *choosePathDefaultFilePath; // @synthesize choosePathDefaultFilePath=_choosePathDefaultFilePath;
@property(copy) NSString *choosePathMessage; // @synthesize choosePathMessage=_choosePathMessage;
- (BOOL)eventIsInSubCellArea:(id)arg1 ofView:(id)arg2;
- (unsigned long long)hitTestForEvent:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (void)resetCursorRect:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)_configureSubCells;
- (struct CGRect)_linkButtonFrameForCellFrame:(struct CGRect)arg1 inView:(id)arg2;
- (struct CGRect)_chooseButtonFrameForCellFrame:(struct CGRect)arg1;
- (void)selectWithFrame:(struct CGRect)arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 start:(long long)arg5 length:(long long)arg6;
- (void)editWithFrame:(struct CGRect)arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 event:(id)arg5;
- (struct CGSize)cellSizeForBounds:(struct CGRect)arg1;
- (struct CGRect)titleRectForBounds:(struct CGRect)arg1;
- (struct CGRect)_adjustedTextRectForRect:(struct CGRect)arg1;
- (double)_adjustedTextWidthForRect:(struct CGRect)arg1 inView:(id)arg2;
- (BOOL)_showLinkButtonInView:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initImageCell:(id)arg1;
- (id)initTextCell:(id)arg1;
- (id)init;
- (double)linkButtonWidth;
- (double)chooseButtonWidth;
- (void)linkAction:(id)arg1;
- (void)chooseAction:(id)arg1;
- (BOOL)_shouldShowChooseButton;
- (void)_commonInitForFilePathCell;

@end

@interface DVTFilteringMenu : NSMenu <DVTFilteringMenuSearchViewDelegate, NSMenuDelegate, NSTextFieldDelegate>
{
    id _dvtDelegate;
    DVTFilteringMenuSearchView *_newSearchView;
    struct {
        unsigned int _delegateRespondsToFilterItemsInMenuForSearchString:1;
        unsigned int _delegateRespondsToMenuHasKeyEquivalentForEventTargetAction:1;
        unsigned int _delegateRespondsToMenuUpdateItemAtIndexShouldCancel:1;
        unsigned int _delegateRespondsToConfinementRectForMenuOnScreen:1;
        unsigned int _delegateRespondsToMenuWillHighlightItem:1;
        unsigned int _delegateRespondsToMenuWillOpen:1;
        unsigned int _delegateRespondsToMenuDidClose:1;
        unsigned int _delegateRespondsToNumberOfItemsInMenu:1;
        unsigned int _delegateRespondsToMenuNeedsUpdate:1;
    } _dvtFilteringMenuFlags;
}

- (void)controlTextDidChange:(id)arg1;
- (BOOL)control:(id)arg1 textView:(id)arg2 doCommandBySelector:(SEL)arg3;
- (void)menuNeedsUpdate:(id)arg1;
- (long long)numberOfItemsInMenu:(id)arg1;
- (void)menuDidClose:(id)arg1;
- (void)menuWillOpen:(id)arg1;
- (void)menu:(id)arg1 willHighlightItem:(id)arg2;
- (struct CGRect)confinementRectForMenu:(id)arg1 onScreen:(id)arg2;
- (BOOL)menu:(id)arg1 updateItem:(id)arg2 atIndex:(long long)arg3 shouldCancel:(BOOL)arg4;
- (BOOL)menuHasKeyEquivalent:(id)arg1 forEvent:(id)arg2 target:(id *)arg3 action:(SEL *)arg4;
- (void)filteringSearchView:(id)arg1 makeSearchFieldKey:(id)arg2;
- (void)performSearchWithString:(id)arg1 inMenu:(id)arg2;
- (BOOL)searchFieldShouldTakeFocus:(id)arg1;
- (void)setUpSearchFieldInMenu:(id)arg1 withString:(id)arg2;
- (id)_newSearchMenuItem;
- (id)dvt_delegate;
- (id)delegate;
- (void)setDelegate:(id)arg1;
- (id)initWithTitle:(id)arg1;

@end

@interface DVTFilteringMenuSearchView : NSView
{
    NSSearchField *_searchField;
    NSMenuItem *_menuItem;
    NSString *_stringValue;
    id _delegate;
    struct {
        unsigned int _delegateRespondsToFilteringSearchViewMakeSearchFieldKey:1;
    } _dvtFilteringMenuSearchViewFlags;
}

@property(retain, nonatomic) id delegate; // @synthesize delegate=_delegate;
@property(copy) NSString *initialStringValue; // @synthesize initialStringValue=_stringValue;
@property(retain) NSMenuItem *menuItem; // @synthesize menuItem=_menuItem;
@property(retain) NSSearchField *searchField; // @synthesize searchField=_searchField;
- (void)viewDidMoveToWindow;
- (void)drawRect:(struct CGRect)arg1;
- (void)awakeFromNib;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface DVTFindBarBorderedView : DVTBorderedView
{
    DVTFindBar *_hostFindBar;
}

@property(retain) DVTFindBar *hostFindBar; // @synthesize hostFindBar=_hostFindBar;
- (void)layoutTopDown;

@end

@interface DVTFindBarOptionsCtrl : DVTViewController
{
    NSImageView *_shadowImageView;
    DVTBorderedView *_borderView;
    NSTextField *_styleLabel;
    NSPopUpButton *_stylePopUp;
    NSTextField *_wordSearchLabel;
    NSPopUpButton *_wordSearchPopUp;
    NSButton *_ignoreCaseCheckbox;
    unsigned long long _findType;
    int _matchStyle;
    BOOL _supportsRegex;
    BOOL _supportsWordMatching;
    BOOL _supportsCaseInsensitiveMatching;
    BOOL _findIgnoresCase;
    BOOL _findWraps;
}

+ (void)initialize;
+ (void)setDefaultFindType:(unsigned long long)arg1;
+ (long long)defaultFindType;
+ (void)setDefaultWrapText:(BOOL)arg1;
+ (BOOL)defaultWrapText;
+ (void)setDefaultIgnoresCase:(BOOL)arg1;
+ (BOOL)defaultIgnoresCase;
+ (void)setDefaultMatchStyle:(int)arg1;
+ (int)defaultMatchStyle;
@property(nonatomic) int matchStyle; // @synthesize matchStyle=_matchStyle;
@property(nonatomic) BOOL findWraps; // @synthesize findWraps=_findWraps;
@property(nonatomic) BOOL findIgnoresCase; // @synthesize findIgnoresCase=_findIgnoresCase;
@property(nonatomic) unsigned long long findType; // @synthesize findType=_findType;
- (void)_sendChangeNotificiation;
- (void)setOptionsFromFindDescriptor:(id)arg1;
- (id)descriptionForDescriptor:(id)arg1;
- (id)findDescriptorForString:(id)arg1 error:(id *)arg2;
- (void)loadView;
- (id)initWithSupportForRegex:(BOOL)arg1 andSupportForWordMatching:(BOOL)arg2 supportsCaseInsensitiveMatching:(BOOL)arg3;

@end

@interface DVTFirstResponderDrawingStrategy : NSObject <DVTWindowActivationStateObserver>
{
    NSView *_view;
    BOOL _viewIsFirstResponder;
    BOOL _windowIsKey;
    id <DVTObservingToken> _windowActivationObservation;
}

- (void)viewWillMoveToWindow:(id)arg1;
- (void)window:(id)arg1 didChangeActivationState:(long long)arg2;
- (void)resignedFirstResponder;
- (void)becameFirstResponder;
- (BOOL)viewSouldDrawLikeFirstResponder;
- (void)setWindowIsKey:(BOOL)arg1;
- (void)setViewIsFirstResponder:(BOOL)arg1;
- (void)dispose;
- (void)finishObservingWindow:(id)arg1;
- (void)beginObservingWindow:(id)arg1;
- (id)initWithView:(id)arg1;

@end

@interface DVTFocusableScrollView : NSScrollView
{
    BOOL _drawsFocusRing;
}

@property(nonatomic) BOOL drawsFocusRing; // @synthesize drawsFocusRing=_drawsFocusRing;
- (void)setFrameOrigin:(struct CGPoint)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (void)viewWillDraw;
- (void)setNilValueForKey:(id)arg1;

@end

@interface DVTSourceTextStorage : NSTextStorage
{
}

+ (id)allocWithZone:(struct _NSZone *)arg1;
- (unsigned long long)nextExpressionFromIndex:(unsigned long long)arg1 forward:(BOOL)arg2;
- (id)description;
- (id)stringByTogglingCommentsInRange:(struct _NSRange)arg1;
- (BOOL)stringContainsUncommentedLines:(id)arg1 lineCommentPrefix:(id *)arg2;
- (id)stringBySwappingRange:(struct _NSRange)arg1 withAdjacentRange:(struct _NSRange)arg2;
- (id)tokenizableItemsForItemAtRange:(struct _NSRange)arg1;
- (struct _NSRange)functionOrMethodBodyRangeAtIndex:(unsigned long long)arg1;
- (struct _NSRange)functionRangeAtIndex:(unsigned long long)arg1 isDefinitionOrCall:(char *)arg2;
- (struct _NSRange)methodDefinitionRangeAtIndex:(unsigned long long)arg1;
- (struct _NSRange)methodCallRangeAtIndex:(unsigned long long)arg1;
- (BOOL)isAssociatedTextView:(id)arg1;
- (void)replaceCharactersInRange:(struct _NSRange)arg1 withAttributedString:(id)arg2 withUndoManager:(id)arg3;
- (void)replaceCharactersInRange:(struct _NSRange)arg1 withString:(id)arg2 withUndoManager:(id)arg3;
- (id)importStatementStringAtCharacterIndex:(unsigned long long)arg1;
- (id)symbolNameAtCharacterIndex:(unsigned long long)arg1 nameRanges:(id *)arg2;
- (id)importLandmarkItems;
- (id)sourceLandmarkAtCharacterIndex:(unsigned long long)arg1;
- (struct _NSRange)lineRangeForLineRange:(struct _NSRange)arg1 fromTimestamp:(double)arg2 toTimestamp:(double)arg3;
- (struct _NSRange)characterRangeForCharacterRange:(struct _NSRange)arg1 fromTimestamp:(double)arg2 toTimestamp:(double)arg3;
- (void)clearChangeHistory;
- (void)breakChangeTrackingCoalescing;
- (struct _NSRange)lineRangeForCharacterRange:(struct _NSRange)arg1;
- (struct _NSRange)characterRangeForLineRange:(struct _NSRange)arg1;
- (id)init;
- (unsigned long long)locationForOpeningBracketForClosingBracket:(unsigned long long)arg1 withArgs:(char *)arg2;
- (id)_parenLikeItemAtLocation:(unsigned long long)arg1;
- (BOOL)_isItemBracketExpression:(id)arg1;
- (BOOL)indentAtBeginningOfLineForCharacterRange:(struct _NSRange)arg1 undoManager:(id)arg2;
- (BOOL)isAtBOL:(struct _NSRange)arg1;
- (void)indentCharacterRange:(struct _NSRange)arg1 undoManager:(id)arg2;
- (void)indentLineRange:(struct _NSRange)arg1 undoManager:(id)arg2;
- (BOOL)indentLine:(long long)arg1 onlyIfMovingRight:(BOOL)arg2 undoManager:(id)arg3;
- (void)indentLine:(long long)arg1 to:(long long)arg2 undoManager:(id)arg3;
- (long long)firstNonblankForLine:(long long)arg1 convertTabs:(BOOL)arg2;
- (id)getTextForLineSansBlanks:(long long)arg1;
@property(readonly, getter=isIndentable) BOOL indentable;
- (long long)getIndentForLine:(long long)arg1;
- (unsigned long long)firstColonAfterItem:(id)arg1 inRange:(struct _NSRange)arg2;
- (long long)columnForPositionConvertingTabs:(unsigned long long)arg1;

// Remaining properties
@property(retain) id <DVTSourceTextStorageDelegate> delegate; // @dynamic delegate;
@property(readonly) BOOL hasPendingSourceLandmarkInvalidation; // @dynamic hasPendingSourceLandmarkInvalidation;
@property unsigned long long indentWidth; // @dynamic indentWidth;
@property(readonly) BOOL isEditable; // @dynamic isEditable;
@property(copy) DVTSourceCodeLanguage *language; // @dynamic language;
@property(readonly) double lastEditTimestamp; // @dynamic lastEditTimestamp;
@property unsigned long long lineEndings; // @dynamic lineEndings;
@property(readonly) unsigned long long numberOfLines; // @dynamic numberOfLines;
@property unsigned long long tabWidth; // @dynamic tabWidth;
@property(readonly) DVTSourceLandmarkItem *topSourceLandmark; // @dynamic topSourceLandmark;
@property BOOL usesTabs; // @dynamic usesTabs;
@property unsigned long long wrappedLineIndentWidth; // @dynamic wrappedLineIndentWidth;

@end

@interface DVTFoldingTextStorage : DVTSourceTextStorage <DVTAnnotationManagerDelegate>
{
    DVTTextStorage *_realStorage;
    NSMutableAttributedString *_contents;
    long long _drawingDepth;
    DVTTextFold *_topLevelFold;
    NSMutableArray *_annotations;
    DVTPointerArray *_lastDeletedAnnotations;
    NSMapTable *_messageBubblesForAnnotations;
    NSMutableSet *_accessoryAnnotations;
    NSArray *_sortedAccessoryAnnotations;
    struct _NSRange _visibleRange;
    struct _NSRange _previousVisibleRange;
    struct _NSRange _delayedInvalidationRange;
    BOOL _fixingAttributes;
    BOOL invalidatingOurAttrs;
    BOOL _usesGraphicalPlaceholder;
    BOOL _insertingFromPasteboard;
    BOOL _severeBubbleAnnotationsMiniaturized;
}

@property(nonatomic) BOOL usesGraphicalPlaceholder; // @synthesize usesGraphicalPlaceholder=_usesGraphicalPlaceholder;
@property(retain, nonatomic) DVTTextFold *folds; // @synthesize folds=_topLevelFold;
@property(readonly) NSSet *accessoryAnnotations; // @synthesize accessoryAnnotations=_accessoryAnnotations;
@property(readonly) NSArray *annotations; // @synthesize annotations=_annotations;
@property struct _NSRange delayedInvalidationRange; // @synthesize delayedInvalidationRange=_delayedInvalidationRange;
@property(getter=isInsertingFromPasteboard) BOOL insertingFromPasteboard; // @synthesize insertingFromPasteboard=_insertingFromPasteboard;
@property(nonatomic) BOOL severeBubbleAnnotationsMiniaturized; // @synthesize severeBubbleAnnotationsMiniaturized=_severeBubbleAnnotationsMiniaturized;
@property(readonly) DVTTextStorage *realStorage; // @synthesize realStorage=_realStorage;
- (id)tokenizableItemsForItemAtRealRange:(struct _NSRange)arg1;
- (id)tokenizableItemsForItemAtRange:(struct _NSRange)arg1;
- (unsigned long long)nextExpressionFromIndex:(unsigned long long)arg1 forward:(BOOL)arg2;
- (struct _NSRange)functionOrMethodBodyRangeAtIndex:(unsigned long long)arg1;
- (struct _NSRange)functionRangeAtIndex:(unsigned long long)arg1 isDefinitionOrCall:(char *)arg2;
- (struct _NSRange)methodDefinitionRangeAtIndex:(unsigned long long)arg1;
- (struct _NSRange)methodCallRangeAtIndex:(unsigned long long)arg1;
- (unsigned long long)locationForOpeningBracketForClosingBracket:(unsigned long long)arg1 withArgs:(char *)arg2;
- (struct _NSRange)doubleClickAtIndex:(unsigned long long)arg1 inRange:(struct _NSRange)arg2;
- (struct _NSRange)rangeOfWordAtIndex:(unsigned long long)arg1;
- (unsigned long long)lineBreakBeforeIndex:(unsigned long long)arg1 withinRange:(struct _NSRange)arg2;
- (unsigned long long)dvt_nextWordFromIndex:(unsigned long long)arg1 forward:(BOOL)arg2;
- (unsigned long long)nextWordFromIndex:(unsigned long long)arg1 forward:(BOOL)arg2;
- (void)setExpressionMovement:(BOOL)arg1;
- (void)setSubwordMovement:(BOOL)arg1;
- (struct _NSRange)foldedRangeForRealRange:(struct _NSRange)arg1;
- (struct _NSRange)realRangeForFoldedRange:(struct _NSRange)arg1;
- (unsigned long long)foldedLocationForRealLocation:(unsigned long long)arg1;
- (unsigned long long)realLocationForFoldedLocation:(unsigned long long)arg1;
- (void)adjustFoldsForRange:(struct _NSRange)arg1 changeInLength:(long long)arg2;
- (void)unfoldItems:(id)arg1;
- (void)foldItems:(id)arg1;
- (BOOL)isRealRangeFolded:(struct _NSRange)arg1;
- (void)foldRecursiveItem:(id)arg1 animateInView:(id)arg2;
- (void)_recursivelyFoldItem:(id)arg1 toFold:(id)arg2;
- (void)foldRange:(struct _NSRange)arg1 animateInView:(id)arg2;
- (void)foldRealRange:(struct _NSRange)arg1;
- (void)foldRealRange:(struct _NSRange)arg1 label:(id)arg2 style:(unsigned long long)arg3;
- (void)unfoldFoldsEnclosingRange:(struct _NSRange)arg1;
- (void)unfoldRecursiveRealRange:(struct _NSRange)arg1;
- (void)unfoldRealRange:(struct _NSRange)arg1;
- (void)unfoldRecursiveRange:(struct _NSRange)arg1;
- (void)unfoldRange:(struct _NSRange)arg1;
- (void)unfoldAll;
- (void)_reShowMessageBubblesInRange:(struct _NSRange)arg1;
- (void)_hideMessageBubblesInRange:(struct _NSRange)arg1;
- (BOOL)foldsAreValid:(id)arg1;
- (void)_refreshVisibleRange;
@property struct _NSRange visibleRange;
- (struct _NSRange)rangeForBlockContainingRange:(struct _NSRange)arg1;
- (id)foldableBlockItemForLocation:(unsigned long long)arg1;
- (id)foldableBlockItemForLineAtLocation:(unsigned long long)arg1;
- (long long)foldingDepthAtLocation:(unsigned long long)arg1;
- (id)blockItemAtLocation:(unsigned long long)arg1;
- (BOOL)realRangeIsInsideAFold:(struct _NSRange)arg1;
- (id)foldsInRange:(struct _NSRange)arg1;
@property(readonly, getter=isUsingFoldedRanges) BOOL usingFoldedRanges;
- (void)decreaseUsingFoldedRanges;
- (void)increaseUsingFoldedRanges;
- (BOOL)fixesAttributesLazily;
- (void)realStorageDidInvalidateDisplayInRange:(struct _NSRange)arg1;
- (void)realStorageDidInvalidateLayoutAndDisplayInRange:(struct _NSRange)arg1 forceInvalidateAttributes:(BOOL)arg2;
- (void)realStorageDidFixAttributesInRange:(struct _NSRange)arg1;
- (void)_copyRealStorageAttributesInRange:(struct _NSRange)arg1;
- (void)realStorageDidReplaceCharactersInRange:(struct _NSRange)arg1 withString:(id)arg2 changeInLength:(long long)arg3;
- (void)realStorageDidUpdateLineRange:(struct _NSRange)arg1 changeInLength:(long long)arg2 entireFirstLineReplaced:(BOOL)arg3;
- (void)realStorageWillReplaceCharactersInRange:(struct _NSRange)arg1 withString:(id)arg2 changeInLength:(long long)arg3;
- (double)advancementForSpace;
- (void)fontSetChanged;
- (void)processEditing;
- (void)endEditing;
- (void)beginEditing;
- (id)_undoRedoAttributedSubstringFromRange:(struct _NSRange)arg1;
- (id)attributedSubstringFromRange:(struct _NSRange)arg1;
- (void)fixAttributesInRange:(struct _NSRange)arg1;
- (id)attribute:(id)arg1 atIndex:(unsigned long long)arg2 longestEffectiveRange:(struct _NSRange *)arg3 inRange:(struct _NSRange)arg4;
- (id)attribute:(id)arg1 atIndex:(unsigned long long)arg2 effectiveRange:(struct _NSRange *)arg3;
- (id)attributesAtIndex:(unsigned long long)arg1 longestEffectiveRange:(struct _NSRange *)arg2 inRange:(struct _NSRange)arg3;
- (id)attributesAtIndex:(unsigned long long)arg1 effectiveRange:(struct _NSRange *)arg2;
- (unsigned long long)_attributeIndexForRealLocation:(unsigned long long)arg1;
- (void)removeAttribute:(id)arg1 range:(struct _NSRange)arg2;
- (void)addAttribute:(id)arg1 value:(id)arg2 range:(struct _NSRange)arg3;
- (void)addAttributes:(id)arg1 range:(struct _NSRange)arg2;
- (void)setAttributes:(id)arg1 range:(struct _NSRange)arg2;
- (struct _NSRange)_fixRangeIfNeeded:(struct _NSRange)arg1;
- (BOOL)isAssociatedTextView:(id)arg1;
- (void)replaceCharactersInRange:(struct _NSRange)arg1 withAttributedString:(id)arg2 withUndoManager:(id)arg3;
- (void)replaceCharactersInRange:(struct _NSRange)arg1 withString:(id)arg2 withUndoManager:(id)arg3;
- (void)replaceCharactersInRange:(struct _NSRange)arg1 withAttributedString:(id)arg2;
- (void)replaceCharactersInRange:(struct _NSRange)arg1 withString:(id)arg2;
- (id)description;
- (unsigned long long)length;
- (id)string;
- (void)removeLayoutManager:(id)arg1;
- (void)addLayoutManager:(id)arg1;
- (void)fixAttachmentAttributeInRange:(struct _NSRange)arg1;
- (id)accessoryAnnotationsInRange:(struct _NSRange)arg1;
- (id)messageBubbleViewForAnnotation:(id)arg1;
- (void)messageBubbleAnnotation:(id)arg1 needsBubble:(BOOL)arg2;
- (void)removeAnnotationsInRange:(struct _NSRange)arg1;
- (void)removeAnnotation:(id)arg1;
- (void)_removeAnnotationsAtIndexes:(id)arg1;
- (void)addAnnotation:(id)arg1;
- (id)annotationsInRange:(struct _NSRange)arg1;
- (id)_annotationIndicesInParagraphRange:(struct _NSRange)arg1 suggestedIndex:(unsigned long long *)arg2;
- (void)_mergeBubbleViewsAtParagraphIndex:(unsigned long long)arg1;
- (void)_takeAwayBubbleViewFromAnnotation:(id)arg1;
- (void)_giveBubbleViewToAnnotation:(id)arg1 annotationsInRange:(id)arg2;
- (void)_assertAnnotationIntegrity;
- (void)didRemoveAnnotations:(id)arg1;
- (void)didInsertAnnotations:(id)arg1;
- (void)_updateMessageBubbleVisibilityForAnnotation:(id)arg1;
- (BOOL)indentAtBeginningOfLineForCharacterRange:(struct _NSRange)arg1 undoManager:(id)arg2;
- (void)indentCharacterRange:(struct _NSRange)arg1 undoManager:(id)arg2;
- (id)stringByTogglingCommentsInRange:(struct _NSRange)arg1;
- (id)stringBySwappingRange:(struct _NSRange)arg1 withAdjacentRange:(struct _NSRange)arg2;
- (void)indentLineRange:(struct _NSRange)arg1 undoManager:(id)arg2;
- (BOOL)indentLine:(long long)arg1 onlyIfMovingRight:(BOOL)arg2 undoManager:(id)arg3;
- (void)indentLine:(long long)arg1 to:(long long)arg2 undoManager:(id)arg3;
- (id)getTextForLineSansBlanks:(long long)arg1;
- (long long)firstNonblankForLine:(long long)arg1 convertTabs:(BOOL)arg2;
- (id)colorAtCharacterIndex:(unsigned long long)arg1 inTextView:(id)arg2 effectiveRange:(struct _NSRange *)arg3;
- (long long)nodeTypeAtCharacterIndex:(unsigned long long)arg1 inTextView:(id)arg2 effectiveRange:(struct _NSRange *)arg3;
- (id)importStatementStringAtCharacterIndex:(unsigned long long)arg1;
- (id)symbolNameAtCharacterIndex:(unsigned long long)arg1 nameRanges:(id *)arg2;
- (id)sourceLandmarkAtCharacterIndex:(unsigned long long)arg1;
- (id)importLandmarkItems;
- (id)commonSourceModelItemAtRange:(struct _NSRange)arg1;
- (id)sourceModelItemAtCharacterIndex:(unsigned long long)arg1;
- (id)sourceModel;
- (struct _NSRange)lineRangeForLineRange:(struct _NSRange)arg1 fromTimestamp:(double)arg2 toTimestamp:(double)arg3;
- (struct _NSRange)characterRangeForCharacterRange:(struct _NSRange)arg1 fromTimestamp:(double)arg2 toTimestamp:(double)arg3;
- (struct _NSRange)lineRangeForLineRange:(struct _NSRange)arg1 fromChangeIndex:(unsigned long long)arg2 toChangeIndex:(unsigned long long)arg3;
- (struct _NSRange)characterRangeForCharacterRange:(struct _NSRange)arg1 fromChangeIndex:(unsigned long long)arg2 toChangeIndex:(unsigned long long)arg3;
- (void)clearChangeHistory;
- (void)breakChangeTrackingCoalescing;
- (unsigned long long)currentChangeIndex;
- (long long)columnForPositionConvertingTabs:(unsigned long long)arg1;
- (double)indentationForWrappedLineAtIndex:(unsigned long long)arg1;
- (unsigned long long)leadingWhitespacePositionsForLine:(unsigned long long)arg1;
- (unsigned long long)numberOfLines;
- (struct _NSRange)lineRangeForCharacterRange:(struct _NSRange)arg1;
- (struct _NSRange)characterRangeForLineRange:(struct _NSRange)arg1;
- (struct _NSRange)_constrainRealRangeToVisibleRange:(struct _NSRange)arg1;
- (double)lastEditTimestamp;
- (void)delayedInvalidateDisplayForLineRange:(struct _NSRange)arg1;
- (void)invalidateDisplayForLineRange:(struct _NSRange)arg1;
- (void)invalidateLayoutForLineRange:(struct _NSRange)arg1;
- (id)fontAndColorTheme;
- (void)setFontAndColorTheme:(id)arg1;
- (BOOL)isSyntaxColoringEnabled;
- (BOOL)isEditable;
- (id)methodSignatureForSelector:(SEL)arg1;
- (void)forwardInvocation:(id)arg1;
- (BOOL)respondsToSelector:(SEL)arg1;
- (id)initWithTextStorage:(id)arg1;

@end

@interface DVTFontAndColorTheme : NSObject <DVTPreferenceSet>
{
    NSString *_name;
    NSImage *_image;
    NSURL *_dataURL;
    DVTCustomDataSpecifier *_customDataSpecifier;
    NSColor *_sourceTextBackgroundColor;
    NSColor *_sourceTextSidebarBackgroundColor;
    NSColor *_sourceTextSidebarNumbersColor;
    NSColor *_sourceTextFoldbarBackgroundColor;
    NSColor *_sourceTextSelectionColor;
    NSColor *_sourceTextInsertionPointColor;
    NSColor *_sourceTextInvisiblesColor;
    NSColor *_sourceTextBlockDimBackgroundColor;
    NSColor *_sourceTextTokenizedBorderColor;
    NSColor *_sourceTextTokenizedBackgroundColor;
    NSColor *_sourceTextTokenizedBorderSelectedColor;
    NSColor *_sourceTextTokenizedBackgroundSelectedColor;
    NSColor *_consoleTextBackgroundColor;
    NSColor *_consoleTextSelectionColor;
    NSColor *_consoleTextInsertionPointColor;
    NSColor *_consoleDebuggerPromptTextColor;
    NSColor *_consoleDebuggerInputTextColor;
    NSColor *_consoleDebuggerOutputTextColor;
    NSColor *_consoleExecutableInputTextColor;
    NSColor *_consoleExecutableOutputTextColor;
    NSFont *_consoleDebuggerPromptTextFont;
    NSFont *_consoleDebuggerInputTextFont;
    NSFont *_consoleDebuggerOutputTextFont;
    NSFont *_consoleExecutableInputTextFont;
    NSFont *_consoleExecutableOutputTextFont;
    NSColor *_debuggerInstructionPointerColor;
    NSColor *_sourcePlainTextColor;
    NSFont *_sourcePlainTextFont;
    DVTPointerArray *_syntaxColorsByNodeType;
    DVTPointerArray *_syntaxFontsByNodeType;
    NSColor *_sourceTextCompletionPreviewColor;
    BOOL _builtIn;
    BOOL _loadedData;
    BOOL _contentNeedsSaving;
    BOOL _hasMultipleSourceTextFonts;
}

+ (id)_defaultSourceCodeFont;
+ (id)titleForNewPreferenceSetFromTemplate;
+ (id)preferenceSetsListHeader;
+ (id)preferenceSetsFileExtension;
+ (id)defaultKeyForExcludedBuiltInPreferenceSets;
+ (id)defaultKeyForCurrentPreferenceSet;
+ (id)builtInPreferenceSetsDirectoryURL;
+ (id)systemPreferenceSet;
+ (id)preferenceSetGroupingName;
+ (id)_nodeTypesIncludedInPreferences;
+ (id)_stringRepresentationOfFont:(id)arg1;
+ (id)_fontWithName:(id)arg1 size:(double)arg2;
+ (id)currentTheme;
+ (id)preferenceSetsManager;
+ (void)initialize;
@property(readonly) BOOL loadedData; // @synthesize loadedData=_loadedData;
@property(readonly) DVTPointerArray *syntaxFontsByNodeType; // @synthesize syntaxFontsByNodeType=_syntaxFontsByNodeType;
@property(readonly) DVTPointerArray *syntaxColorsByNodeType; // @synthesize syntaxColorsByNodeType=_syntaxColorsByNodeType;
@property(nonatomic) BOOL hasMultipleSourceTextFonts; // @synthesize hasMultipleSourceTextFonts=_hasMultipleSourceTextFonts;
@property BOOL contentNeedsSaving; // @synthesize contentNeedsSaving=_contentNeedsSaving;
@property(retain) DVTCustomDataSpecifier *customDataSpecifier; // @synthesize customDataSpecifier=_customDataSpecifier;
@property(readonly, getter=isBuiltIn) BOOL builtIn; // @synthesize builtIn=_builtIn;
@property(retain) NSImage *image; // @synthesize image=_image;
@property(copy) NSString *name; // @synthesize name=_name;
- (void)setFont:(id)arg1 forNodeTypes:(id)arg2;
- (void)setColor:(id)arg1 forNodeTypes:(id)arg2;
- (void)_setColorOrFont:(id)arg1 forNodeTypes:(id)arg2;
- (id)fontForNodeType:(short)arg1;
- (id)colorForNodeType:(short)arg1;
@property(readonly) NSFont *sourcePlainTextFont;
@property(readonly) NSColor *sourcePlainTextColor;
- (void)setDebuggerInstructionPointerColor:(id)arg1;
- (void)setConsoleExecutableOutputTextFont:(id)arg1;
- (void)setConsoleExecutableInputTextFont:(id)arg1;
- (void)setConsoleDebuggerOutputTextFont:(id)arg1;
- (void)setConsoleDebuggerInputTextFont:(id)arg1;
- (void)setConsoleDebuggerPromptTextFont:(id)arg1;
- (void)setConsoleExecutableOutputTextColor:(id)arg1;
- (void)setConsoleExecutableInputTextColor:(id)arg1;
- (void)setConsoleDebuggerOutputTextColor:(id)arg1;
- (void)setConsoleDebuggerInputTextColor:(id)arg1;
- (void)setConsoleDebuggerPromptTextColor:(id)arg1;
- (void)primitiveSetConsoleDebuggerPromptTextColor:(id)arg1;
- (void)setConsoleTextInsertionPointColor:(id)arg1;
- (void)setConsoleTextSelectionColor:(id)arg1;
- (void)setConsoleTextBackgroundColor:(id)arg1;
- (void)setSourceTextInvisiblesColor:(id)arg1;
- (void)setSourceTextInsertionPointColor:(id)arg1;
- (void)setSourceTextSelectionColor:(id)arg1;
- (void)setSourceTextBackgroundColor:(id)arg1;
- (void)_setColorOrFont:(id)arg1 forKey:(id)arg2 colorOrFontivar:(id *)arg3;
@property(readonly) NSColor *debuggerInstructionPointerColor;
@property(readonly) NSFont *consoleExecutableOutputTextFont;
@property(readonly) NSFont *consoleExecutableInputTextFont;
@property(readonly) NSFont *consoleDebuggerOutputTextFont;
@property(readonly) NSFont *consoleDebuggerInputTextFont;
@property(readonly) NSFont *consoleDebuggerPromptTextFont;
@property(readonly) NSColor *consoleExecutableOutputTextColor;
@property(readonly) NSColor *consoleExecutableInputTextColor;
@property(readonly) NSColor *consoleDebuggerOutputTextColor;
@property(readonly) NSColor *consoleDebuggerInputTextColor;
@property(readonly) NSColor *consoleDebuggerPromptTextColor;
@property(readonly) NSColor *consoleTextInsertionPointColor;
@property(readonly) NSColor *consoleTextSelectionColor;
@property(readonly) NSColor *consoleTextBackgroundColor;
@property(readonly) NSColor *sourceTextTokenizedBackgroundSelectedColor;
@property(readonly) NSColor *sourceTextTokenizedBorderSelectedColor;
@property(readonly) NSColor *sourceTextTokenizedBackgroundColor;
@property(readonly) NSColor *sourceTextTokenizedBorderColor;
@property(readonly) NSColor *sourceTextLinkColor;
@property(readonly) NSColor *sourceTextCompletionPreviewColor;
@property(readonly) NSColor *sourceTextBlockDimBackgroundColor;
@property(readonly) NSColor *sourceTextInvisiblesColor;
@property(readonly) NSColor *sourceTextInsertionPointColor;
@property(readonly) NSColor *sourceTextSelectionColor;
@property(readonly) NSColor *sourceTextFoldbarBackgroundColor;
@property(readonly) NSColor *sourceTextSidebarNumbersColor;
@property(readonly) NSColor *sourceTextSidebarBackgroundColor;
@property(readonly) NSColor *sourceTextBackgroundColor;
- (id)description;
@property(readonly) NSString *localizedName;
- (void)_updateHasMultipleSourceTextFonts;
- (void)_updateDerivedColors;
- (BOOL)_loadFontsAndColors;
- (id)dataRepresentationWithError:(id *)arg1;
- (id)initWithCustomDataSpecifier:(id)arg1 basePreferenceSet:(id)arg2;
- (id)initWithName:(id)arg1 dataURL:(id)arg2;
- (id)_initWithName:(id)arg1 syntaxColorsByNodeType:(id)arg2 syntaxFontsByNodeType:(id)arg3;
- (void)_themeCommonInit;
- (id)init;

@end

@interface DVTFontDataSource : NSObject <DVTFontTextFieldDataSource>
{
    NSMutableArray *_fonts;
    NSNumberFormatter *_sizeFormatter;
}

- (BOOL)fontTextField:(id)arg1 value:(id)arg2 isEqualToValue:(id)arg3;
- (BOOL)fontTextFieldCanShowFontPanel:(id)arg1;
- (id)fontTextField:(id)arg1 displaySizeForValue:(id)arg2;
- (id)fontTextField:(id)arg1 displayNameForValue:(id)arg2;
- (double)fontTextField:(id)arg1 pointSizeForValue:(id)arg2;
- (id)fontTextField:(id)arg1 fontNameForValue:(id)arg2;
- (id)fontTextField:(id)arg1 familyForValue:(id)arg2;
- (id)fontTextField:(id)arg1 transformValue:(id)arg2 toHavePointSize:(double)arg3;
- (id)fontTextField:(id)arg1 transformValue:(id)arg2 toHaveSize:(id)arg3;
- (id)fontTextField:(id)arg1 transformValue:(id)arg2 toHaveFontName:(id)arg3;
- (id)fontTextField:(id)arg1 transformValue:(id)arg2 toHaveFamily:(id)arg3;
- (id)fontTextField:(id)arg1 transformValue:(id)arg2 toFontValue:(id)arg3;
- (BOOL)fontTextField:(id)arg1 isValueSpecial:(id)arg2;
- (id)fontTextField:(id)arg1 descriptionForFontName:(id)arg2;
- (id)fontTextField:(id)arg1 descriptionForFamily:(id)arg2;
- (id)fontTextField:(id)arg1 descriptionForValue:(id)arg2 type:(int *)arg3;
- (id)fontTextField:(id)arg1 fontNamesForFontFamily:(id)arg2;
- (id)fontFamiliesForFontTextField:(id)arg1;
- (id)fontValuesForFontTextField:(id)arg1;
- (id)init;

@end

@interface DVTHUDPopUpContentViewController : DVTViewController
{
    CDStruct_bf6d4a14 _contentInset;
    DVTHUDPopUpController *_windowController;
}

+ (id)HUDPopUpContentViewController;
@property(retain) DVTHUDPopUpController *windowController; // @synthesize windowController=_windowController;
@property CDStruct_bf6d4a14 contentInset; // @synthesize contentInset=_contentInset;
- (void)alternateButtonAction:(id)arg1;
- (id)alternateButtonLabel;
- (BOOL)shouldShowDoneButton;
- (id)doneButtonLabel;
- (void)close:(id)arg1;
@property(readonly) struct CGSize doneButtonOffset;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

@end

@interface DVTFontPopUpViewController : DVTHUDPopUpContentViewController
{
    DVTFontTextField *_fontTextField;
    NSTextField *_fontLabel;
    NSPopUpButton *_fontPopUp;
    NSTextField *_familyLabel;
    NSPopUpButton *_familyPopUp;
    NSTextField *_styleLabel;
    NSPopUpButton *_stylePopUp;
    NSTextField *_sizeField;
    NSTextField *_sizeLabel;
    NSStepper *_sizeStepper;
    id _selectedSize;
    id _target;
    SEL _setter;
}

@property(retain, nonatomic) NSTextField *sizeLabel; // @synthesize sizeLabel=_sizeLabel;
@property(retain, nonatomic) NSTextField *styleLabel; // @synthesize styleLabel=_styleLabel;
@property(retain, nonatomic) NSTextField *familyLabel; // @synthesize familyLabel=_familyLabel;
@property(retain, nonatomic) NSTextField *fontLabel; // @synthesize fontLabel=_fontLabel;
@property(nonatomic) SEL setter; // @synthesize setter=_setter;
@property(retain, nonatomic) id target; // @synthesize target=_target;
@property(retain, nonatomic) NSStepper *sizeStepper; // @synthesize sizeStepper=_sizeStepper;
@property(retain, nonatomic) NSTextField *sizeField; // @synthesize sizeField=_sizeField;
@property(retain, nonatomic) NSPopUpButton *stylePopUp; // @synthesize stylePopUp=_stylePopUp;
@property(retain, nonatomic) NSPopUpButton *familyPopUp; // @synthesize familyPopUp=_familyPopUp;
@property(retain, nonatomic) NSPopUpButton *fontPopUp; // @synthesize fontPopUp=_fontPopUp;
@property(retain, nonatomic) DVTFontTextField *fontTextField; // @synthesize fontTextField=_fontTextField;
- (void)alternateButtonAction:(id)arg1;
- (id)alternateButtonLabel;
- (void)awakeFromNib;
- (void)_populateSizeFromDataSource;
- (void)_populateStylesFromDataSource;
- (void)_populateFamiliesFromDataSource;
- (void)_populateFontsFromDataSource;
- (void)_updateEnabledStates;
- (void)_updateFontsInFontPanel;
- (id)_fontRepresentation;
- (void)takeSizeFrom:(id)arg1;
- (void)incrementFontSize:(id)arg1;
- (void)selectFontName:(id)arg1;
- (void)selectFamily:(id)arg1;
- (void)selectFont:(id)arg1;
- (void)updateFontValue:(id)arg1;
- (id)dataSource;
- (id)initWithFontTextField:(id)arg1;

@end

@interface DVTFontTextField : DVTButtonTextField <NSTextViewDelegate, NSWindowDelegate>
{
}

+ (id)keyPathsForValuesAffectingPointSize;
+ (void)setCellClass:(Class)arg1;
+ (Class)cellClass;
- (void)bind:(id)arg1 toObject:(id)arg2 withKeyPath:(id)arg3 options:(id)arg4;
- (id)currentEditor;
- (void)textDidEndEditing:(id)arg1;
- (BOOL)resignFirstResponder;
@property double pointSize;
@property(retain) NSFont *fontValue;
@property(retain) id fontRepresentation;
@property(retain) id <DVTFontTextFieldDataSource> dataSource;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_commonInit;

@end

@interface DVTFontTextFieldCell : DVTButtonTextFieldCell <NSCoding>
{
    NSFont *_fontValue;
    id _fontRepresentation;
    NSString *_fontName;
    NSString *_fontSize;
    NSString *_placeholder;
    NSArray *_placeholderFonts;
    id <DVTObservingToken> _fontValueBindingObservation;
    NSString *_fontValueBindingKeyPath;
    id _fontValueBindingController;
    id <DVTFontTextFieldDataSource> _dataSource;
    BOOL _previewFont;
}

+ (void)activateFontCellInTableView:(id)arg1;
+ (id)keyPathsForValuesAffectingPointSize;
+ (id)defaultImage;
+ (void)initialize;
@property(readonly) NSArray *placeholderFonts; // @synthesize placeholderFonts=_placeholderFonts;
@property(retain, nonatomic) id <DVTFontTextFieldDataSource> dataSource; // @synthesize dataSource=_dataSource;
@property BOOL previewFont; // @synthesize previewFont=_previewFont;
@property(retain, nonatomic) id fontRepresentation; // @synthesize fontRepresentation=_fontRepresentation;
@property(retain, nonatomic) NSFont *fontValue; // @synthesize fontValue=_fontValue;
- (void)windowDidResignKey:(id)arg1;
- (void)unbind:(id)arg1;
- (void)bind:(id)arg1 toObject:(id)arg2 withKeyPath:(id)arg3 options:(id)arg4;
- (void)observedPointSizeDidChange:(id)arg1 options:(id)arg2;
- (void)observedFontValueDidChange:(id)arg1 options:(id)arg2;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (struct CGSize)cellSize;
- (id)objectValue;
- (void)setObjectValue:(id)arg1;
- (void)selectWithFrame:(struct CGRect)arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 start:(long long)arg5 length:(long long)arg6;
- (void)editWithFrame:(struct CGRect)arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 event:(id)arg5;
- (void)setHighlighted:(BOOL)arg1;
- (void)performEmbeddingButtonAction:(id)arg1;
- (void)orderFrontFontPopUp:(id)arg1;
- (void)orderFrontFontPanel:(id)arg1;
- (void)dvt_setValueFromController:(id)arg1;
- (void)changeFont:(id)arg1;
- (void)changeAttributes:(id)arg1;
- (void)dvt_updateViaBindingsForFont:(id)arg1;
- (void)dvt_updateViaTableDataSourceForFont:(id)arg1;
- (id)dvt_tableColumn;
- (void)enumerateValuesWithBlock:(id)arg1;
- (void)transformFontViaBlock:(id)arg1;
@property double pointSize;
- (void)dvt_setFontRepresentation:(id)arg1;
- (void)dvt_setFontValue:(id)arg1;
- (id)dvt_valuesViaKeyPath:(id *)arg1;
- (void)dvt_sendAction;
- (void)dvt_resignFirstResponder;
- (void)dvt_becomeFirstResponder;
- (void)dvt_updateFontDisplay;
- (void)dvt_updateFontRepresentationDisplay;
- (void)dvt_updateFocusWithControlView:(id)arg1;
- (void)dvt_updateSelectedFontInConrolView:(id)arg1;
- (BOOL)dvt_inResponderChain;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initTextCell:(id)arg1;
- (void)dvt_commonInit;

@end

@interface DVTToolbarViewController : NSViewController
{
    NSString *_itemIdentifier;
    NSWindow *_window;
    NSString *_label;
    NSString *_tooltip;
}

@property(copy) NSString *tooltip; // @synthesize tooltip=_tooltip;
@property(copy) NSString *label; // @synthesize label=_label;
@property(readonly) NSWindow *window; // @synthesize window=_window;
@property(readonly) NSString *itemIdentifier; // @synthesize itemIdentifier=_itemIdentifier;
@property(readonly) struct CGSize maxSize;
@property(readonly) struct CGSize minSize;
- (id)menuForMenuFormRepresentation;
- (id)menuFormRepresentation;
- (id)initWithToolbarItemIdentifier:(id)arg1 window:(id)arg2;

@end

@interface DVTGenericButtonViewController : DVTToolbarViewController
{
    NSMenuItem *_menuItem;
    id _actionBlock;
}

@property(copy, nonatomic) id actionBlock; // @synthesize actionBlock=_actionBlock;
- (BOOL)validateMenuItem:(id)arg1;
- (id)menuFormRepresentation;
- (void)_buttonAction:(id)arg1;
- (id)initWithButton:(id)arg1 actionBlock:(id)arg2 itemIdentifier:(void)arg3 window:(id)arg4;

@end

@interface DVTGradientImagePopUpButton : NSPopUpButton
{
}

+ (Class)cellClass;
- (void)setHighlightSides:(int)arg1;
- (int)highlightSides;
@property int borderSides;
@property int gradientStyle;
- (void)_doInit;
- (void)awakeFromNib;
- (id)initWithFrame:(struct CGRect)arg1 pullsDown:(BOOL)arg2;
- (id)initWithFrame:(struct CGRect)arg1;
- (id)init;

@end

@interface DVTGradientImagePopUpButtonCell : NSPopUpButtonCell
{
    int _gradientStyle;
    int _borderSides;
    int _highlightSides;
}

@property int highlightSides; // @synthesize highlightSides=_highlightSides;
@property int borderSides; // @synthesize borderSides=_borderSides;
@property int gradientStyle; // @synthesize gradientStyle=_gradientStyle;
- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawImageWithFrame:(struct CGRect)arg1 inView:(id)arg2;

@end

@interface DVTGroupedAssetHighlightView : NSView
{
}

- (void)drawRect:(struct CGRect)arg1;

@end

@interface DVTTileView : NSView <NSAnimationDelegate>
{
    DVTTypeCompletionHandler *_typeCompletionHandler;
    id /*<DVTTileViewDelegate>*/ _delegate;
    id _clickedContentObject;
    NSArray *_content;
    NSIndexSet *selectionIndexes;
    DVTTileViewItem *_layoutItemPrototype;
    struct CGSize _minGridSize;
    struct CGSize _maxGridSize;
    unsigned long long _minGridRows;
    unsigned long long _maxGridRows;
    unsigned long long _minGridColumns;
    unsigned long long _maxGridColumns;
    NSArray *_backgroundColors;
    struct __tileViewanimationContainerFlags {
        unsigned int _selectable:1;
        unsigned int _allowsMultipleSelection:1;
        unsigned int _avoidsEmptySelection:1;
        unsigned int _superviewIsClipView:1;
        unsigned int _gridParametersReadFromPrototype:1;
        unsigned int _showsFirstResponder:1;
        unsigned int _reservedAnimationContainer:26;
    } _animationContainerFlags;
    struct CGSize _targetFrameSize;
    struct CGSize _targetGridSize;
    struct CGSize _targetUnfilledViewSpace;
    unsigned long long _targetNumberOfGridRows;
    unsigned long long _targetNumberOfGridColumns;
    NSMutableArray *_targetItems;
    struct CGSize _appliedFrameSize;
    struct CGSize _appliedGridSize;
    struct CGSize _appliedUnfilledViewSpace;
    unsigned long long _appliedNumberOfGridRows;
    unsigned long long _appliedNumberOfGridColumns;
    NSMutableArray *_appliedItems;
    NSMutableSet *_appliedItemsAsSet;
    NSMutableSet *_appliedRemovedItemsAsSet;
    double _animationDuration;
    NSViewAnimation *_animation;
    NSMutableArray *_hideLayoutItems;
    NSMutableArray *_showLayoutItems;
    DVTFirstResponderDrawingStrategy *_firstResponderDrawingStrategy;
    BOOL _animates;
    int _emptyContentStringStyle;
    NSString *_emptyContentString;
    NSTextField *_emptyContentTextField;
}

@property int emptyContentStringStyle; // @synthesize emptyContentStringStyle=_emptyContentStringStyle;
@property(retain, nonatomic) NSString *emptyContentString; // @synthesize emptyContentString=_emptyContentString;
- (void)rightMouseDown:(id)arg1;
- (void)setContextClickedContentObject:(id)arg1;
@property(readonly) id clickedContentObject;
- (id)_recursiveFindDefaultButtonCell;
- (void)moveWordLeftAndModifySelection:(id)arg1;
- (void)moveWordRightAndModifySelection:(id)arg1;
- (void)moveToEndOfParagraph:(id)arg1;
- (void)moveToBeginningOfParagraph:(id)arg1;
- (void)moveWordLeft:(id)arg1;
- (void)moveWordRight:(id)arg1;
- (void)moveDownAndModifySelection:(id)arg1;
- (void)moveUpAndModifySelection:(id)arg1;
- (void)moveLeftAndModifySelection:(id)arg1;
- (void)moveRightAndModifySelection:(id)arg1;
- (void)moveDown:(id)arg1;
- (void)moveUp:(id)arg1;
- (void)moveLeft:(id)arg1;
- (void)moveRight:(id)arg1;
- (unsigned long long)_indexForMoveDown;
- (unsigned long long)_indexForMoveUp;
- (unsigned long long)_indexForMoveLeft;
- (unsigned long long)_indexForMoveRight;
- (unsigned long long)_indexForIncrementMove:(unsigned long long)arg1;
- (unsigned long long)_indexForDecrementMove:(unsigned long long)arg1;
- (void)selectAll:(id)arg1;
- (void)_contentChanged:(BOOL)arg1 regenerate:(BOOL)arg2;
- (void)discardEditing;
- (void)gridGeometryChanged:(BOOL)arg1;
- (void)_animateAtEndOfEvent;
- (void)applyPendingChangesAndFinishAnimating;
- (void)_applyTargetConfiguration:(BOOL)arg1;
- (void)animationDidEnd:(id)arg1;
- (void)_itemRemovalCompleted:(id)arg1;
- (void)_itemAdditionCompleted:(id)arg1;
- (void)_stopAnimationCompletingOperations:(BOOL)arg1;
- (double)_animationDuration;
- (void)_setAnimationDuration:(double)arg1;
- (id)backgroundColors;
- (void)setBackgroundColors:(id)arg1;
- (struct _NSRange)columnCountRange;
- (void)setColumnCountRange:(struct _NSRange)arg1;
- (struct _NSRange)rowCountRange;
- (void)setRowCountRange:(struct _NSRange)arg1;
- (unsigned long long)maxNumberOfColumns;
- (void)setMaxNumberOfColumns:(unsigned long long)arg1;
- (unsigned long long)maxNumberOfRows;
- (void)setMaxNumberOfRows:(unsigned long long)arg1;
- (struct CGSize)maxGridSize;
- (void)setMaxGridSize:(struct CGSize)arg1;
- (struct CGSize)minGridSize;
- (void)setMinGridSize:(struct CGSize)arg1;
- (void)setTargetFrameSize:(struct CGSize)arg1;
- (struct CGSize)targetFrameSize;
- (struct CGSize)targetGridSize;
- (struct CGSize)appliedGridSize;
- (id)appliedItems;
- (unsigned long long)targetNumberOfGridColumns;
- (unsigned long long)appliedNumberOfGridColumns;
- (void)_computeTargetItemViewFrameRects;
- (struct CGRect)_frameRectForIndexInGrid:(unsigned long long)arg1 gridSize:(struct CGSize)arg2;
- (id)_mutableIndexSetInAppliedGridForRect:(struct CGRect)arg1;
- (unsigned long long)_indexInAppliedGridForPoint:(struct CGPoint)arg1;
- (void)_getRow:(unsigned long long *)arg1 column:(unsigned long long *)arg2 forPoint:(struct CGPoint)arg3;
- (void)_computeTargetItemsByRegenerating:(BOOL)arg1;
- (void)computeTargetGridGeometry;
- (BOOL)_allowsResizingHorizontally;
- (BOOL)_allowsResizingVertically;
- (void)_determineGridParametersFromItemPrototype;
- (void)_scrollSelectionToVisible;
- (void)_scrollToVisibleItemAtIndex:(unsigned long long)arg1;
- (id)layoutItemPrototype;
- (void)setLayoutItemPrototype:(id)arg1;
- (id)newLayoutItemForRepresentedObject:(id)arg1;
@property(retain) id /*<DVTTileViewDelegate>*/ delegate;
@property BOOL avoidsEmptySelection;
@property BOOL allowsMultipleSelection;
@property(getter=isSelectable) BOOL selectable;
- (id)_layoutItemForRepresentedObject:(id)arg1;
@property(copy) NSArray *content;
@property(copy) NSIndexSet *selectionIndexes;
- (void)validateSelectionIndexes;
- (void)_selectFromIndex:(unsigned long long)arg1 toIndex:(unsigned long long)arg2 scrollIndexToVisible:(unsigned long long)arg3;
- (void)_selectIndex:(unsigned long long)arg1 scrollToVisible:(BOOL)arg2;
- (void)_selectionStateChanged:(id)arg1;
- (void)viewWillMoveToWindow:(id)arg1;
- (BOOL)resignFirstResponder;
- (BOOL)becomeFirstResponder;
- (BOOL)acceptsFirstResponder;
- (BOOL)needsPanelToBecomeKey;
@property(readonly) BOOL showsFirstResponder;
- (void)setShowsFirstResponder:(BOOL)arg1;
- (void)mouseDown:(id)arg1;
- (id)_handleMouseEvent:(id)arg1 numberOfObjects:(unsigned long long)arg2 startingPoint:(struct CGPoint)arg3 commandKey:(BOOL)arg4 shiftKey:(BOOL)arg5 rubberband:(id)arg6;
- (struct CGPoint)_pointWithinBounds:(struct CGPoint)arg1;
- (void)cancelOperation:(id)arg1;
- (void)keyDown:(id)arg1;
- (void)insertText:(id)arg1;
- (id)typeCompletionHandler:(id)arg1 typeCompletionStringForObject:(id)arg2;
- (void)insertBacktab:(id)arg1;
- (void)insertTab:(id)arg1;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (unsigned long long)accessibilityIndexOfChild:(id)arg1;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAttributeNames;
- (id)accessibleChildren;
- (id)accessibilityHitTest:(struct CGPoint)arg1;
- (BOOL)accessibilityIsIgnored;
- (id)hitTest:(struct CGPoint)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (void)viewWillDraw;
- (void)_hideEmptyContentString;
- (void)_showEmptyContentString;
- (BOOL)isFlipped;
- (void)viewDidMoveToSuperview;
- (void)viewWillMoveToSuperview:(id)arg1;
- (void)_superviewFrameChanged:(id)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
@property BOOL animates;
- (void)_applySelectionToItems:(id)arg1;
- (void)_applySelectionIndexes:(id)arg1 toItems:(id)arg2;
- (void)_updateContainerReferenceCounterForArraysOfItems:(id)arg1 direction:(BOOL)arg2;
- (void)_updateContainerReferenceCounterForItems:(id)arg1 direction:(BOOL)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_init;

@end

@interface DVTGroupedTileView : DVTTileView
{
    long long _groupDragTargetIndex;
    long long _groupLocalDragTargetIndex;
    NSArray *_groupCounts;
    NSArray *_groups;
    DVTGroupedAssetHighlightView *_overlayView;
    NSEvent *_activeMouseDown;
    BOOL _dragInsertAfterInitialTarget;
    BOOL _dropOnGroup;
    BOOL _showingHeaders;
}

+ (BOOL)eventWouldToggleSelection:(id)arg1;
+ (BOOL)eventWouldExtendSelection:(id)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (void)drawRect:(struct CGRect)arg1 inDecoratedView:(id)arg2;
- (id)dropHighlightColor;
- (void)copy:(id)arg1;
- (void)keyDown:(id)arg1;
- (void)deleteBackward:(id)arg1;
- (void)deleteForward:(id)arg1;
- (void)insertNewline:(id)arg1;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (void)mouseDown:(id)arg1;
- (BOOL)shouldTrackSelectionWithMouseDownEvent:(id)arg1;
- (void)selectItemWithEvent:(id)arg1;
- (void)dropGroup:(id *)arg1 andItemInsertionIndex:(long long *)arg2 atPoint:(struct CGPoint)arg3;
- (void)dropGroup:(id *)arg1 andItemInsertionIndex:(long long *)arg2 after:(char *)arg3 atPoint:(struct CGPoint)arg4;
- (unsigned long long)indexOfGroupAtPoint:(struct CGPoint)arg1;
- (id)contentObjectAtPoint:(struct CGPoint)arg1;
- (id)tileViewItemAtPoint:(struct CGPoint)arg1;
- (struct CGRect)headerRectForGroupWithIndex:(long long)arg1;
- (id)headerRects;
- (struct CGRect)titleRectForHeaderRect:(struct CGRect)arg1;
- (struct CGRect)titleBackgroundRectForHeaderRect:(struct CGRect)arg1;
- (id)_mutableIndexSetInAppliedGridForRect:(struct CGRect)arg1;
- (unsigned long long)_indexInAppliedGridForPoint:(struct CGPoint)arg1;
- (void)getGlobalIndex:(long long *)arg1 groupIndex:(long long *)arg2 andLocalIndex:(long long *)arg3 atPoint:(struct CGPoint)arg4;
- (void)_getRow:(unsigned long long *)arg1 column:(unsigned long long *)arg2 forPoint:(struct CGPoint)arg3;
- (void)computeTargetGridGeometry;
- (struct CGSize)recalculateTargetFrameSize;
- (id)attributedTitleForGroup:(id)arg1;
- (struct CGRect)rectForTileViewItemAtIndex:(long long)arg1;
- (struct CGRect)_frameRectForIndexInGrid:(unsigned long long)arg1 gridSize:(struct CGSize)arg2;
- (BOOL)isGroupLocalIndex:(long long)arg1 theFirstItemInAnyRowInGroupWithIndex:(long long)arg2;
- (BOOL)isGroupLocalIndex:(long long)arg1 theLastItemInAnyRowInGroupWithIndex:(long long)arg2;
- (long long)appliedColumnsInRow:(long long)arg1 ofGroup:(long long)arg2;
- (long long)appliedRowsInGroupWithIndex:(long long)arg1;
- (long long)targetRowsInGroupWithIndex:(long long)arg1;
- (double)headerHeight;
- (double)headerPostpadHeight;
- (double)headerPrepadHeight;
- (double)headerTitleHeight;
- (long long)numberOfColumns;
- (long long)localIndexForGlobalIndex:(unsigned long long)arg1;
- (long long)groupIndexForGlobalIndex:(unsigned long long)arg1;
- (long long)globalIndexForLocalIndex:(long long)arg1 inGroupWithIndex:(long long)arg2;
- (void)setDragInsertionPoint:(struct CGPoint)arg1;
- (void)setDropGroup:(id)arg1;
- (void)setDropGroup:(id)arg1 dropChildIndex:(long long)arg2 after:(BOOL)arg3 on:(BOOL)arg4;
- (void)clearDragInsertionPoint;
- (struct CGRect)dragInsertionRect;
- (id)dragInsertionPath;
- (id)bezierPathWithLineFrom:(struct CGPoint)arg1 to:(struct CGPoint)arg2 andCapRadius:(double)arg3;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)orderOutOverlayView;
- (void)orderInOverlayView;
- (id)overlayView;
- (id)draggedImageState:(id)arg1;
- (void)concludeDragOperation:(id)arg1;
- (BOOL)performDragOperation:(id)arg1;
- (BOOL)prepareForDragOperation:(id)arg1;
- (void)draggingExited:(id)arg1;
- (unsigned long long)draggingEntered:(id)arg1;
- (unsigned long long)draggingUpdated:(id)arg1;
- (id)newLayoutItemForRepresentedObject:(id)arg1;
- (void)setSelectedContentObjects:(id)arg1;
- (id)indexesForContentObjects:(id)arg1;
- (void)setContent:(id)arg1;
@property(copy) DVTMutableOrderedDictionary *groups;
@property(getter=isShowingHeaders) BOOL showingHeaders;
@property(retain) id /*<DVTGroupedTileViewDelegate>*/ delegate;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface DVTHUDPopUpController : NSWindowController <NSWindowDelegate>
{
    id _doneButtonClickHandlerBlock;
    DVTHUDPopUpContentViewController *_viewController;
    DVTDelayedValidator *_layoutValidator;
    struct CGSize _lastLayoutContentSize;
    DVTHUDPopUpView *_popupView;
    NSButton *_doneButton;
    NSButton *_alternateButton;
    struct CGPoint _targetPoint;
    struct CGSize _contentSize;
    struct CGRect _visibleArea;
    BOOL _isOpen;
    BOOL _hostWindowCanBecomeKey;
    BOOL _hidesArrow;
}

@property(nonatomic) BOOL hidesArrow; // @synthesize hidesArrow=_hidesArrow;
@property(copy) id doneButtonClickHandlerBlock; // @synthesize doneButtonClickHandlerBlock=_doneButtonClickHandlerBlock;
@property(nonatomic) BOOL hostWindowCanBecomeKey; // @synthesize hostWindowCanBecomeKey=_hostWindowCanBecomeKey;
@property(readonly) NSButton *doneButton; // @synthesize doneButton=_doneButton;
@property(nonatomic) struct CGSize contentSize; // @synthesize contentSize=_contentSize;
@property struct CGRect visibleArea; // @synthesize visibleArea=_visibleArea;
@property(readonly) DVTHUDPopUpContentViewController *contentViewController; // @synthesize contentViewController=_viewController;
- (void)insertText:(id)arg1;
- (void)cancel:(id)arg1;
- (void)cancelOperation:(id)arg1;
- (void)closeForCancelling;
- (BOOL)spaceBarClosesPopUp;
- (BOOL)escapeClosesPopUp;
- (void)keyDown:(id)arg1;
- (void)_contentViewFrameChangedNotification:(id)arg1;
- (void)clickedDoneButton:(id)arg1;
- (void)close:(id)arg1;
- (BOOL)windowShouldClose:(id)arg1;
- (void)fadeOutAndCloseWindow;
- (void)closeWindowAndEnd;
- (void)showWindowPointingAtLocation:(struct CGPoint)arg1 orientation:(unsigned long long)arg2;
- (void)showWindowPointingAtLocation:(struct CGPoint)arg1 orientation:(unsigned long long)arg2 arrowLocation:(double)arg3;
- (void)positionWindow;
- (struct CGPoint)targetOrigin;
- (void)setWindowOrigin:(struct CGPoint)arg1 clipToScreen:(BOOL)arg2;
- (void)setArrowPointWithTargetPointHidingIfInvalid:(struct CGPoint)arg1;
- (void)layout;
- (void)addSubviews;
- (void)applyContentSize;
- (id)windowNibName;
- (void)setArrowEdge:(unsigned long long)arg1;
@property double arrowHeight;
- (void)validateLayout;
- (void)invalidateLayout;
- (void)loadWindow;
- (id)initWithViewController:(id)arg1;

@end

@interface DVTHUDPopUpView : NSView
{
    double _arrowHeight;
    double _arrowPoint;
    unsigned long long _arrowEdge;
    BOOL _hidesArrow;
}

+ (void)initialize;
@property(nonatomic) BOOL hidesArrow; // @synthesize hidesArrow=_hidesArrow;
@property(nonatomic) double arrowHeight; // @synthesize arrowHeight=_arrowHeight;
@property(nonatomic) double arrowPoint; // @synthesize arrowPoint=_arrowPoint;
@property(nonatomic) unsigned long long arrowEdge; // @synthesize arrowEdge=_arrowEdge;
- (void)drawRect:(struct CGRect)arg1;
- (id)backgroundPathInRect:(struct CGRect)arg1;
- (struct CGRect)highlightRect;
@property(readonly) struct CGRect contentRect;
@property(readonly) struct CGPoint maximumArrowPoint;
@property(readonly) struct CGPoint minimumArrowPoint;
@property(readonly) struct CGPoint arrowCoordinates;
- (struct CGPoint)arrowCoordinatesForArrowPoint:(double)arg1;
- (double)adjustedArrowPointForArrowPoint:(double)arg1;
- (void)setArrowPointWithTargetPoint:(struct CGPoint)arg1;
- (BOOL)isValidTargetPoint:(struct CGPoint)arg1;
- (double)adjustedEdgeDistance;
- (double)edgeDistance;
- (BOOL)arrowOnTopOrBottomEdge;
- (BOOL)arrowOnLeftOrRightEdge;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)commonInit;

@end

@interface DVTHUDPopUpWindow : NSWindow
{
    BOOL canBecomeKey;
}

@property BOOL canBecomeKey; // @synthesize canBecomeKey;
- (BOOL)canBecomeMainWindow;
- (BOOL)canBecomeKeyWindow;

@end

@interface DVTHUDScrollView : NSScrollView
{
    double _scrollerPaddingLeft;
    double _scrollerPaddingRight;
    BOOL _drawsVerticalBorder;
}

+ (Class)_verticalScrollerClass;
@property BOOL drawsVerticalBorder; // @synthesize drawsVerticalBorder=_drawsVerticalBorder;
@property double scrollerPaddingRight; // @synthesize scrollerPaddingRight=_scrollerPaddingRight;
@property double scrollerPaddingLeft; // @synthesize scrollerPaddingLeft=_scrollerPaddingLeft;
- (void)tile;
- (void)drawRect:(struct CGRect)arg1;
- (id)verticalScroller;

@end

@interface DVTHUDScroller : NSScroller
{
    NSGradient *_slotGradient;
    NSGradient *_knobGradient;
    BOOL _visible;
    BOOL _translucent;
}

+ (double)scrollerWidth;
+ (double)scrollerWidthForControlSize:(unsigned long long)arg1;
@property BOOL translucent; // @synthesize translucent=_translucent;
@property(retain) NSGradient *slotGradient; // @synthesize slotGradient=_slotGradient;
@property(retain) NSGradient *knobGradient; // @synthesize knobGradient=_knobGradient;
@property(nonatomic) BOOL visible; // @synthesize visible=_visible;
- (BOOL)isOpaque;
- (void)drawArrow:(unsigned long long)arg1 highlightPart:(unsigned long long)arg2;
- (void)drawKnob;
- (void)drawKnobSlotInRect:(struct CGRect)arg1 highlight:(BOOL)arg2;
- (id)_knobPath;
- (struct CGRect)rectForPart:(unsigned long long)arg1;
- (unsigned int)_CAViewFlags;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_hudScrollerCommonInit;

@end

@interface DVTHelperApplication : NSObject
{
    NSURL *_bundleURL;
    NSString *_bundleIdentifier;
    NSString *_localizedName;
    NSRunningApplication *_runningApplication;
}

+ (id)moreHelperApplicationsURL;
+ (id)availableHelperApplications;
+ (id)_helperAppsContentForKey:(id)arg1;
+ (id)helperApplicationWithIdentifier:(id)arg1;
+ (void)initialize;
@property(readonly) NSString *localizedName; // @synthesize localizedName=_localizedName;
@property(readonly) NSURL *bundleURL; // @synthesize bundleURL=_bundleURL;
- (BOOL)launchAndActivateHelperApplication:(id *)arg1;
@property(readonly) NSRunningApplication *runningApplication;
- (id)initWithBundleURL:(id)arg1;

@end

@interface DVTIdentityDragImageStateTransition : DVTDraggedImageStateTransitionView
{
}

- (double)duration;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface DVTImageAndTextCell : NSTextFieldCell
{
    DVTBindingHelper *_bindingHelper;
    NSArray *_statusCategoryNames;
    NSColor *_subtitleTextColor;
    NSColor *_inactiveTitleTextColor;
    NSDictionary *_statusCellsByCategoryName;
    NSFont *_subtitleFont;
    NSImage *_image;
    NSProgressIndicator *_progressIndicator;
    unsigned long long _progressIndicatorStyle;
    NSString *_subtitle;
    id _attributedStringValue;
    long long _leftEdgeSpacing;
    long long _subtitleSpacing;
    struct CGSize _baseImageSize;
    double _layoutHeight;
    long long _titleAndSubTitleLeftEdgeSpacing;
    long long _progressValue;
    int _emphasizeMarkerStyle;
    unsigned long long _imageScaling;
    int _subtitleLayout;
    BOOL _drawsEmphasizeMarker;
    BOOL _showsStatusItems;
}

+ (void)initialize;
@property long long titleAndSubTitleLeftEdgeSpacing; // @synthesize titleAndSubTitleLeftEdgeSpacing=_titleAndSubTitleLeftEdgeSpacing;
@property int subtitleLayout; // @synthesize subtitleLayout=_subtitleLayout;
@property int emphasizeMarkerStyle; // @synthesize emphasizeMarkerStyle=_emphasizeMarkerStyle;
@property BOOL drawsEmphasizeMarker; // @synthesize drawsEmphasizeMarker=_drawsEmphasizeMarker;
@property long long subtitleSpacing; // @synthesize subtitleSpacing=_subtitleSpacing;
@property(copy, nonatomic) NSColor *inactiveTitleTextColor; // @synthesize inactiveTitleTextColor=_inactiveTitleTextColor;
@property(copy, nonatomic) NSColor *subtitleTextColor; // @synthesize subtitleTextColor=_subtitleTextColor;
@property(copy, nonatomic) NSFont *subtitleFont; // @synthesize subtitleFont=_subtitleFont;
@property(copy) NSString *subtitle; // @synthesize subtitle=_subtitle;
@property(copy) NSArray *statusCategoryNames; // @synthesize statusCategoryNames=_statusCategoryNames;
@property BOOL showsStatusItems; // @synthesize showsStatusItems=_showsStatusItems;
@property long long progressValue; // @synthesize progressValue=_progressValue;
@property unsigned long long progressIndicatorStyle; // @synthesize progressIndicatorStyle=_progressIndicatorStyle;
@property(retain) NSProgressIndicator *progressIndicator; // @synthesize progressIndicator=_progressIndicator;
@property double layoutHeight; // @synthesize layoutHeight=_layoutHeight;
@property long long leftEdgeSpacing; // @synthesize leftEdgeSpacing=_leftEdgeSpacing;
@property unsigned long long imageScaling; // @synthesize imageScaling=_imageScaling;
@property struct CGSize baseImageSize; // @synthesize baseImageSize=_baseImageSize;
@property(retain) NSImage *image; // @synthesize image=_image;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAttributeNames;
- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawEmphasizeMarkerWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawStatusWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawProgressIndicatorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawWithExpansionFrame:(struct CGRect)arg1 inView:(id)arg2;
- (id)subtitleAttributedStringValue;
- (void)invalidateAttributedStringValue;
- (void)setAttributedStringValue:(id)arg1;
- (id)attributedStringValue;
- (id)_attributedStringWithString:(id)arg1 font:(id)arg2 foregroundColor:(id)arg3;
- (struct CGSize)cellSize;
- (struct CGRect)statusRectForBounds:(struct CGRect)arg1;
- (struct CGRect)progressIndicatorRectForBounds:(struct CGRect)arg1;
- (struct CGRect)subtitleRectForBounds:(struct CGRect)arg1;
- (struct CGRect)titleRectForBounds:(struct CGRect)arg1;
- (struct CGRect)fullLineTitleRectForBounds:(struct CGRect)arg1;
- (struct CGSize)_attributedStringValueSize;
- (struct CGRect)imageRectForBounds:(struct CGRect)arg1;
- (struct CGSize)_imageSizeForLayoutFrame:(struct CGRect)arg1;
- (struct CGSize)_scaledImageSize:(struct CGSize)arg1 forTargetHeight:(double)arg2;
- (struct CGRect)expansionFrameWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (struct CGRect)_textFrameForSelectingOrEditingWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (struct CGRect)_layoutFrameForCellFrame:(struct CGRect)arg1;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (unsigned long long)hitTestForEvent:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3;
- (void)selectWithFrame:(struct CGRect)arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 start:(long long)arg5 length:(long long)arg6;
- (void)editWithFrame:(struct CGRect)arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 event:(id)arg5;
- (void)setBackgroundStyle:(long long)arg1;
- (id)statusItemCellsForCategory:(id)arg1;
- (void)setStatusItemCells:(id)arg1 forCategory:(id)arg2;
- (id)_statusCellsByCategoryName;
- (id)titleDropShadow;
- (void)setProgress:(id)arg1;
- (void)updateBoundTitle;
@property(copy) NSString *title; // @dynamic title;
- (void)setHighlighted:(BOOL)arg1;
@property(readonly) NSColor *titleTextColor;
- (BOOL)_controlViewHasFocusOrIsSourceList;
- (void)setFont:(id)arg1;
- (id)bindingHelper;
- (id)dvtExtraBindings;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initImageCell:(id)arg1;
- (id)initTextCell:(id)arg1;
- (id)init;
- (void)_dvt_commonInit;

@end

@interface DVTImageAndTextColumn : NSTableColumn
{
    DVTMapTable *_progressIndicators;
    id _outlineViewCollapseObservation;
    id _outlineViewExpandObservation;
    struct {
        unsigned int _tableViewIsOutlineView:1;
        unsigned int _reserved:31;
    } _imageAndTextColumnFlags;
}

+ (void)initialize;
- (id)dataCellForRow:(long long)arg1;
- (id)_progressIndicatorWithKeyPath:(id)arg1 ofItem:(id)arg2 forNode:(id)arg3;
- (id)_configuredSpinningProgressIndicator;
- (void)updateBoundProgress;
- (void)updateBoundImage;
- (id)dvtExtraBindings;
- (void)awakeFromNib;
- (void)setTableView:(id)arg1;
- (void)_stopObservingExpandAndCollapseOfOutlineView;
- (id)initWithCoder:(id)arg1;
- (id)initWithIdentifier:(id)arg1;
- (void)setupDataCell;

@end

@interface DVTImageAndTextLayer : CALayer
{
    double _imageToTextSpacing;
    /*CATextLayer * */ id _textLayer;
    CALayer *_imageLayer;
    struct CGSize _imageSize;
}

+ (struct CGColor *)defaultTextShadowColor;
+ (id)defaultAttributes;
@property(nonatomic) struct CGSize imageSize; // @synthesize imageSize=_imageSize;
@property(nonatomic) double imageToTextSpacing; // @synthesize imageToTextSpacing=_imageToTextSpacing;
- (void)layoutSublayers;
@property(readonly) struct CGRect stringRect;
@property(readonly) struct CGRect imageRect;
@property(copy) NSString *textAlignmentMode;
@property(retain) NSImage *image;
@property(copy) NSAttributedString *attributedStringValue;
@property(copy) NSString *stringValue;
- (id)init;

@end

@interface DVTImageLibraryDetailController : DVTLibraryDetailController
{
    NSImageView *_imageView;
}

- (void)sizeToFitSuggestedSize:(struct CGSize)arg1 forAsset:(id)arg2;
- (void)refreshWithAsset:(id)arg1;

@end

@interface DVTImagePopUpButton : NSPopUpButton
{
}

+ (id)keyPathsForValuesAffectingArrowImage;
+ (id)keyPathsForValuesAffectingIconSize;
+ (id)keyPathsForValuesAffectingIconImage;
+ (id)keyPathsForValuesAffectingUsedInToolbar;
+ (id)keyPathsForValuesAffectingImmediatelyShowsMenu;
+ (id)keyPathsForValuesAffectingShowsMenuOnlyForMultipleItems;
+ (Class)cellClass;
@property(copy) NSImage *arrowImage;
@property struct CGSize iconSize;
@property(copy) NSImage *iconImage;
@property BOOL usedInToolbar;
@property BOOL immediatelyShowsMenu;
@property BOOL showsMenuOnlyForMultipleItems;
- (id)initWithFrame:(struct CGRect)arg1 pullsDown:(BOOL)arg2;

@end

@interface DVTImagePopUpButtonCell : NSPopUpButtonCell
{
    NSButtonCell *_buttonCell;
    NSImage *_iconImage;
    NSImage *_alternateIconImage;
    struct CGSize _iconSize;
    double _widthRatio;
    NSImage *_arrowImage;
    struct CGSize _originalArrowSize;
    NSTimer *_menuTimer;
    SEL _buttonCellAction;
    BOOL _showsMenuOnlyForMultipleItems;
    BOOL _immediatelyShowsMenu;
    BOOL _usedInToolbar;
    BOOL _timerFired;
}

@property(readonly) NSCell *internalCell; // @synthesize internalCell=_buttonCell;
@property(copy, nonatomic) NSImage *arrowImage; // @synthesize arrowImage=_arrowImage;
@property struct CGSize iconSize; // @synthesize iconSize=_iconSize;
@property(nonatomic) BOOL usedInToolbar; // @synthesize usedInToolbar=_usedInToolbar;
@property BOOL immediatelyShowsMenu; // @synthesize immediatelyShowsMenu=_immediatelyShowsMenu;
@property BOOL showsMenuOnlyForMultipleItems; // @synthesize showsMenuOnlyForMultipleItems=_showsMenuOnlyForMultipleItems;
- (void)_showMenuTimerFired:(id)arg1;
- (BOOL)_showMenu:(id)arg1 fromTimer:(BOOL)arg2 inRect:(struct CGRect)arg3 ofView:(id)arg4 untilMouseUp:(BOOL)arg5;
- (BOOL)_shouldShowMenuImmediately:(id)arg1;
- (BOOL)_shouldShowMenu;
- (void)setControlSize:(unsigned long long)arg1;
@property(copy) NSImage *alternateIconImage;
@property(copy) NSImage *iconImage; // @synthesize iconImage=_iconImage;
- (void)highlight:(BOOL)arg1 withFrame:(struct CGRect)arg2 inView:(id)arg3;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)setEnabled:(BOOL)arg1;
- (void)setAction:(SEL)arg1;
- (void)setTarget:(id)arg1;
- (void)performClick:(id)arg1;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (BOOL)_shouldDoRegularTracking;
- (unsigned long long)_numberItemsThreshold;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface DVTIncrementalFindBar : DVTFindBar
{
    DVTTextFinder *_finder;
    DVTFindResult *_currentResult;
    DVTDocumentLocation *_findAnchor;
    struct _DVTIncrementalFindBarFlags _ifbflags;
}

@property(copy) DVTDocumentLocation *_findAnchor; // @synthesize _findAnchor;
- (void)invalidate;
- (id)_finder;
- (void)_tellDelegateAboutFoundResults:(id)arg1;
- (void)_tellDelegateAboutCurrentResult:(id)arg1;
- (void)updateStatusInformingDelegate:(BOOL)arg1;
- (void)_delayedUpdateStatusString:(id)arg1;
- (void)clearResults;
- (void)_resetFindAnchor;
- (void)_setFindInProgress:(BOOL)arg1;
- (BOOL)supportsCaseInsensitiveMatch;
- (BOOL)supportsTextMatchStyle:(int)arg1;
- (BOOL)supportsFindBarMode:(unsigned long long)arg1;
- (BOOL)supportsFindBarType:(unsigned long long)arg1;
@property(retain, nonatomic) id findObject;
- (void)findBarLostFocus;
- (void)performFindHighlightingFirstResult:(BOOL)arg1 informDelegate:(BOOL)arg2;
- (void)replaceAll:(id)arg1;
- (void)replaceAndFindPrevious:(id)arg1;
- (void)replaceAndFindNext:(id)arg1;
- (void)replace:(id)arg1;
- (void)findPrevious:(id)arg1;
- (void)findNext:(id)arg1;
- (void)_showWrapOrEndOfFileBezel:(BOOL)arg1 reverse:(BOOL)arg2;
- (void)_findBackwardsFrom:(id)arg1;
- (void)selectFindField:(id)arg1;
- (void)viewWillUninstall;
- (void)viewDidInstall;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

@end

@interface DVTInfoPlistValueCell : NSTextFieldCell
{
    id /*<DVTInfoPlistValueCellDelegate>*/ _delegate;
    NSMutableArray *_tokens;
}

@property(copy, nonatomic) NSArray *_tokens; // @synthesize _tokens;
@property(retain) id /*<DVTInfoPlistValueCellDelegate>*/ delegate; // @synthesize delegate=_delegate;
- (BOOL)textView:(id)arg1 shouldChangeTextInRange:(struct _NSRange)arg2 replacementString:(id)arg3;
- (struct _NSRange)textView:(id)arg1 willChangeSelectionFromCharacterRange:(struct _NSRange)arg2 toCharacterRange:(struct _NSRange)arg3;
- (id)_tokenContainingCharacterLocation:(unsigned long long)arg1;
- (void)selectWithFrame:(struct CGRect)arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 start:(long long)arg5 length:(long long)arg6;
- (void)editWithFrame:(struct CGRect)arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 event:(id)arg5;
- (void)setObjectValue:(id)arg1;
@property(copy) NSString *unexpandedStringValue;

@end

@interface DVTLayerController : NSObject
{
    CALayer *_layer;
}

@property(retain, nonatomic) CALayer *layer; // @synthesize layer=_layer;
- (void)loadLayer;

@end

@interface DVTLayerHostingView : NSView
{
    CALayer<DVTClickableLayer> *_currentClickedLayer;
}

- (BOOL)clickableLayerExistsForEvent:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)mouseDown:(id)arg1;
- (id)clickableLayerForEvent:(id)arg1;
- (id)clickableLayerAtPoint:(struct CGPoint)arg1;
- (unsigned int)_CAViewFlags;
- (BOOL)requireOptimumPerformance;

@end

@interface DVTLayoutManager : NSLayoutManager
{
}

+ (void)initialize;
- (void)setShowsControlCharacters:(BOOL)arg1;
- (void)setShowsInvisibleCharacters:(BOOL)arg1;
- (struct _NSRange)rangeForCharacterRange:(struct _NSRange)arg1 withContextLines:(long long)arg2 proposedHeight:(double *)arg3 contentLines:(unsigned long long *)arg4 totalLines:(unsigned long long *)arg5;
- (void)drawUnderlineForGlyphRange:(struct _NSRange)arg1 underlineType:(long long)arg2 baselineOffset:(double)arg3 lineFragmentRect:(struct CGRect)arg4 lineFragmentGlyphRange:(struct _NSRange)arg5 containerOrigin:(struct CGPoint)arg6;
- (void)drawBackgroundForGlyphRange:(struct _NSRange)arg1 atPoint:(struct CGPoint)arg2;
- (void)invalidateDisplayForCharacterRange:(struct _NSRange)arg1;
- (unsigned long long)layoutOptions;
- (void)addTemporaryAttribute:(id)arg1 value:(id)arg2 forCharacterRange:(struct _NSRange)arg3;
- (void)removeTemporaryAttribute:(id)arg1 forCharacterRange:(struct _NSRange)arg2;
- (void)addTemporaryAttributes:(id)arg1 forCharacterRange:(struct _NSRange)arg2;
- (void)setTemporaryAttributes:(id)arg1 forCharacterRange:(struct _NSRange)arg2;
- (void)textContainerChangedGeometry:(id)arg1;
- (struct _NSRange)_characterRangeCurrentlyInAndAfterContainer:(id)arg1;
- (void)_fillLayoutHoleAtIndex:(unsigned long long)arg1 desiredNumberOfLines:(unsigned long long)arg2;
- (id)init;

@end

@interface DVTLayoutView_MLObservanceKey : NSObject
{
    id object;
    NSString *keyPath;
}

+ (id)observanceKeyWithObject:(id)arg1 andKeyPath:(id)arg2;
- (id)description;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (BOOL)isEqualToObservanceKey:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithObject:(id)arg1 andKeyPath:(id)arg2;

@end

@interface DVTLibrary : NSObject
{
    NSMutableDictionary *_librarySourceGroupsByLibrarySourceID;
    NSMutableArray *_orderedLibrarySourceIdentifiers;
    DVTAbstractLibraryGroup *_everythingGroup;
    DVTLibraryController *_libraryController;
    NSMutableDictionary *_identifiedAssets;
    NSArray *_detailControllerIdentifiers;
    DVTAbstractLibraryGroup *_rootGroup;
    DVTExtension *_representedExtension;
    NSString *_identifier;
    id _groupComparator;
}

+ (id)regularGroupImage;
+ (id)smartGroupImage;
+ (id)everythingGroupImage;
+ (id)librarySourceGroupImage;
@property(copy, nonatomic) id groupComparator; // @synthesize groupComparator=_groupComparator;
@property(copy, nonatomic) NSArray *detailControllerIdentifiers; // @synthesize detailControllerIdentifiers=_detailControllerIdentifiers;
@property(readonly) DVTAbstractLibraryGroup *everythingGroup; // @synthesize everythingGroup=_everythingGroup;
@property(readonly) DVTAbstractLibraryGroup *rootGroup; // @synthesize rootGroup=_rootGroup;
@property(retain) DVTLibraryController *libraryController; // @synthesize libraryController=_libraryController;
@property(readonly) NSString *identifier; // @synthesize identifier=_identifier;
@property(retain, nonatomic) NSArray *orderedLibrarySourceIdentifiers; // @synthesize orderedLibrarySourceIdentifiers=_orderedLibrarySourceIdentifiers;
@property(readonly) DVTExtension *representedExtension; // @synthesize representedExtension=_representedExtension;
@property(readonly) NSDictionary *identifiedAssets; // @synthesize identifiedAssets=_identifiedAssets;
- (void)removeAllAssets;
- (void)removeAsset:(id)arg1;
- (void)addAsset:(id)arg1 toLibrarySourceWithIdentifier:(id)arg2 subpath:(id)arg3;
- (id)assetWithIdentifier:(id)arg1;
- (BOOL)containsAssetWithIdentifier:(id)arg1;
- (id)assets;
- (id)groupWithDisplayPath:(id)arg1 fromGroup:(id)arg2 create:(BOOL)arg3;
- (void)setImage:(id)arg1 forLibrarySourceWithIdentifier:(id)arg2 subpath:(id)arg3;
- (void)setTitle:(id)arg1 forLibrarySourceWithIdentifier:(id)arg2;
- (void)removeSubpath:(id)arg1 fromLibrarySourceWithIdentifier:(id)arg2;
- (id)subpathsForLibrarySourceWithIdentifier:(id)arg1;
- (void)removeLibrarySourceWithIdentifier:(id)arg1;
- (void)addLibrarySourceWithIdentifier:(id)arg1 andTitle:(id)arg2;
- (void)insertLibrarySourceWithIdentifier:(id)arg1 andTitle:(id)arg2 atIndex:(long long)arg3;
- (BOOL)containsLibrarySourceWithIdentifier:(id)arg1;
- (id)libraryGroupForLibrarySourceWithIdentifier:(id)arg1;
@property(copy) NSString *title;
@property(retain) NSImage *image;
- (void)loadDetailControllerIdentifiersFromExtension;
- (void)loadAssetsFromExtension;
- (id)effectiveSubpathsForAsset:(id)arg1;
- (id)effectiveLibrarySourceIdentifierForAsset:(id)arg1;
- (void)loadLibrarySourcesFromExtension;
- (id)assetExtensionsForLibrary;
- (id)initWithExtension:(id)arg1 andLibraryController:(id)arg2;
- (id)initWithIdentifier:(id)arg1 andTitle:(id)arg2;

@end

@interface DVTLibraryAsset : NSObject
{
    NSArray *_detailControllerIdentifiers;
    NSAttributedString *_fullDescription;
    NSHashTable *_knownGroups;
    DVTExtension *_extension;
    id _representedObject;
    NSDate *_lastUsedDate;
    NSString *_identifier;
    DVTLibrary *_library;
    NSString *_summary;
    NSString *_title;
    NSString *_subtitle;
    NSImage *_image;
    BOOL _selected;
}

@property(copy) NSArray *detailControllerIdentifiers; // @synthesize detailControllerIdentifiers=_detailControllerIdentifiers;
@property(readonly) DVTExtension *representedExtension; // @synthesize representedExtension=_extension;
@property(getter=isSelected) BOOL selected; // @synthesize selected=_selected;
@property(retain) NSDate *lastUsedDate; // @synthesize lastUsedDate=_lastUsedDate;
@property(copy) NSString *subtitle; // @synthesize subtitle=_subtitle;
@property(readonly) NSString *identifier; // @synthesize identifier=_identifier;
@property(copy) NSAttributedString *fullDescription; // @synthesize fullDescription=_fullDescription;
@property(retain) DVTLibrary *library; // @synthesize library=_library;
@property(copy) NSString *summary; // @synthesize summary=_summary;
@property(copy) NSString *title; // @synthesize title=_title;
@property(retain) NSImage *image; // @synthesize image=_image;
@property(retain) id representedObject; // @synthesize representedObject=_representedObject;
- (id)description;
- (void)removeKnownGroup:(id)arg1;
- (void)addKnownGroup:(id)arg1;
- (id)searchTerms;
@property(readonly) double timeIntervalSinceUsed;
@property(readonly) NSSet *knownGroups;
- (void)loadDetailControllerIdentifiersFromExtension;
- (id)initWithExtension:(id)arg1;
- (id)initWithIdentifier:(id)arg1;

@end

@interface DVTLibraryAssetView : NSView
{
    NSImage *_image;
    NSString *_title;
    NSString *_summary;
    id _delegate;
    long long _style;
    struct {
        unsigned int drawsWithSelectionHighlight:1;
        unsigned int showsFirstResponder:1;
        unsigned int showingGridLines:1;
        unsigned int drawsWithClickFrame:1;
        unsigned int _reserved:4;
    } _flags;
}

+ (struct CGSize)maximumSizeForStyle:(long long)arg1;
+ (struct CGSize)minimumSizeForStyle:(long long)arg1;
+ (struct CGSize)maximumIconSize;
@property(copy, nonatomic) NSString *summary; // @synthesize summary=_summary;
@property(copy, nonatomic) NSString *title; // @synthesize title=_title;
@property(retain, nonatomic) NSImage *image; // @synthesize image=_image;
@property long long style; // @synthesize style=_style;
@property(retain) id delegate; // @synthesize delegate=_delegate;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (id)accessibilityAttributeNames;
- (id)accessibilityAttributeValue:(id)arg1;
- (BOOL)accessibilityIsIgnored;
- (void)drawRect:(struct CGRect)arg1;
- (void)viewWillDraw;
- (BOOL)isOpaque;
- (id)effectiveBackgroundColor;
- (id)effectiveBorderColor;
- (id)clickedBorderColor;
- (id)normalBorderColor;
- (id)secondarySelectedBorderColor;
- (id)primarySelectedBorderColor;
- (id)normalBackgroundColor;
- (id)secondarySelectedBackgroundColor;
- (id)primarySelectedBackgroundColor;
- (id)text;
- (id)effectiveShortDescriptionFont;
- (id)effectiveLabelFont;
- (BOOL)shouldBandSelectWithMouseDownEvent:(id)arg1;
- (struct CGRect)textAreaBounds;
- (struct CGRect)imageRect;
- (struct CGRect)imageAreaBounds;
- (BOOL)isFlipped;
@property(getter=isShowingGridLines) BOOL showingGridLines;
- (BOOL)shouldDrawWithClickFrame;
@property BOOL drawsWithClickFrame;
@property BOOL drawsWithSelectionHighlight;
@property BOOL showsFirstResponder;
- (void)setNilValueForKey:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface DVTLibraryController : DVTViewController
{
    NSTreeController *_groupController;
    DVTGroupedTileView *_assetTileView;
    NSSearchField *_assetFilterField;
    DVTBorderedView *_filterBar;
    NSPopUpButton *_groupPopUp;
    NSMenu *_groupMenu;
    NSSegmentedControl *_libraryView;
    DVTLibrary *_library;
    DVTLibraryDetailPopUpController *_detailPopUpController;
    long long _assetViewStyle;
    NSString *_filterString;
    NSArray *_filterComponents;
    id <DVTObservingToken> _tileViewShowsFirstResponderKVOToken;
    id <DVTObservingToken> _tileViewIsFirstResponderKVOToken;
    id <DVTObservingToken> _tileViewSelectionIndexesKVOToken;
    id <DVTObservingToken> _libraryDeepChildGroupsKVOToken;
    id <DVTObservingToken> _libraryAssetsKVOToken;
    NSIndexSet *_selectedLibraryGroupPairIndexes;
    id <DVTObservingToken> _popUpTimerToken;
    NSMutableSet *_uniquedGroupSets;
    NSMutableSet *_uniquedAssetGroupSets;
    id _detailPopUpControllerCloseToken;
    id <DVTObservingToken> _assetScrollViewNotificationToken;
    id <DVTObservingToken> _assetClipViewNotificationToken;
    struct CGSize _initialDraggingOffset;
    NSArray *_observedGroups;
    NSDate *_lastFilterDate;
    NSArray *_draggedGroups;
    NSArray *_draggedPairs;
    struct {
        unsigned int synchronizingDetailViewContentViewWithAsset:1;
        unsigned int identifiesAssetsPerGroup:1;
        unsigned int filterCallbackIsPending:1;
        unsigned int isGroupMenuContentValid:1;
        unsigned int acceptedDraggedAssets:1;
        unsigned int isIconContentValid:1;
        unsigned int viewingLeafGroup:1;
        unsigned int inFilterMethod:1;
        unsigned int _reserved:8;
    } _flags;
}

+ (struct CGSize)maximumThumbnailSize;
+ (id)libraryImage;
+ (id)defaultViewNibBundle;
+ (id)defaultViewNibName;
@property(readonly) DVTLibrary *library; // @synthesize library=_library;
@property(readonly) NSMenu *groupMenu; // @synthesize groupMenu=_groupMenu;
@property(readonly) NSPopUpButton *groupPopUp; // @synthesize groupPopUp=_groupPopUp;
@property(readonly) NSString *filterString; // @synthesize filterString=_filterString;
@property(retain) NSArray *draggedPairs; // @synthesize draggedPairs=_draggedPairs;
@property(copy) NSArray *draggedGroups; // @synthesize draggedGroups=_draggedGroups;
@property(nonatomic) long long assetViewStyle; // @synthesize assetViewStyle=_assetViewStyle;
@property(readonly) NSTreeController *groupController; // @synthesize groupController=_groupController;
@property(readonly) NSSearchField *assetFilterField; // @synthesize assetFilterField=_assetFilterField;
- (void)userDidChooseGroupFromPopUp:(id)arg1;
- (void)selectAssetFilterField;
- (BOOL)control:(id)arg1 textView:(id)arg2 doCommandBySelector:(SEL)arg3;
- (void)filterAssetsFromFilterField:(id)arg1;
- (void)cancelFiltering;
- (void)reallyFilter:(id)arg1;
- (void)clearFilterString;
- (void)beginFilteringWithString:(id)arg1;
- (void)setFilterString:(id)arg1;
- (id)filterComponents;
- (void)editSelectedAsset;
- (struct CGSize)detailAreaSize;
- (void)userDidPressEscapeInTileView:(id)arg1;
- (void)userDidPressSpaceBarInTileView:(id)arg1;
- (id)tileView:(SEL)arg1 willProcessClick:(id)arg2;
- (void)tileView:(id)arg1 didProcessKeyEvent:(id)arg2;
- (void)stopTimerForShowingDetailPopUpController;
- (void)startTimerForShowingDetailPopUpControllerForAssetAndGroupPair:(id)arg1;
- (void)updatePositionOfDetailPopUp;
- (BOOL)detailPopUpController:(id)arg1 canEditAsset:(id)arg2;
- (id)detailPopUpController:(id)arg1 viewControllerForEditingAsset:(id)arg2;
- (void)detailPopUpController:(id)arg1 dragAssetPairs:(id)arg2 withMouseDownEvent:(id)arg3 mouseDraggedEvent:(id)arg4 initialDraggedImageState:(id)arg5 allowedOperations:(unsigned long long)arg6 imageLocationOnScreen:(struct CGPoint)arg7;
- (void)detailPopUpControllerHeaderWasDoubleClicked:(id)arg1;
- (void)closeDetailPopUpController;
- (void)openDetailPopUpController;
- (void)cleanUpAfterClosingDetailPopUpController;
- (void)willDisplayAsset:(id)arg1;
- (void)refreshDetailView;
- (BOOL)canOpenDetailPopUp;
- (void)makeTileViewFirstResponder;
- (BOOL)tileViewIsFirstResponder;
@property(readonly) DVTLibraryDetailController *currentDetailController;
- (id)detailPopUpContentController;
- (struct CGSize)draggingStickiness:(id)arg1;
- (id)draggedImageState:(id)arg1;
- (void)draggingEnded:(id)arg1;
- (void)concludeDragOperation:(id)arg1;
- (BOOL)performDragOperation:(id)arg1;
- (BOOL)prepareForDragOperation:(id)arg1;
- (void)draggingExited:(id)arg1;
- (unsigned long long)draggingUpdated:(id)arg1;
- (unsigned long long)draggingEntered:(id)arg1;
- (void)tileView:(id)arg1 didChangeContextClickedObjectFrom:(id)arg2;
- (id)tileView:(id)arg1 typeCompletionStringForContentObject:(id)arg2;
- (BOOL)groupedTileView:(id)arg1 shouldDragLayoutItem:(id)arg2 withMouseDownEvent:(id)arg3;
- (id)groupedTileView:(id)arg1 layoutItemForRepresentedObject:(id)arg2;
- (id)groupedTileView:(id)arg1 labelForGroup:(id)arg2;
- (BOOL)groupedTileView:(id)arg1 shouldDrawAlternateHeaderColorForGroup:(id)arg2;
- (void)groupedTileViewDeleteSelectedItems:(id)arg1;
- (void)groupedTileViewUserPressedEnter:(id)arg1;
- (void)groupedTileView:(id)arg1 wasDoubleClicked:(id)arg2;
- (void)askDelegateToDepositeAssets:(id)arg1;
- (BOOL)depositAssets:(id)arg1;
- (BOOL)assetViewShouldAllowAssetDrops;
- (void)resetIconContent;
- (id)orderedAssetsForDisplayedAssets:(id)arg1;
- (id)orderedAssetsForDisplayedAssets:(id)arg1 inGroup:(id)arg2;
- (BOOL)assetPassesFilter:(id)arg1;
- (void)applyAssetViewStyle;
- (void)applyAssetViewStyleToAssetView:(id)arg1;
- (BOOL)selectAsset:(id)arg1 inGroup:(id)arg2;
@property(readonly) NSArray *selectedAssets;
@property(readonly) NSArray *selectedAssetPairs;
- (BOOL)shouldShowGridLines;
- (id)makeItemForGroupVisible:(id)arg1 select:(BOOL)arg2 byExtendingSelection:(BOOL)arg3 edit:(BOOL)arg4;
- (void)rebuildGroupMenu;
- (void)selectAssets:(id)arg1 inGroup:(id)arg2;
- (id)assetTileViewContent;
- (id)unsynchronizedAssetTileViewContent;
- (id)imageForGroup:(id)arg1;
- (id)assetViewSourceGroups;
- (id)selectedGroups;
- (void)selectLibrarySourceWithIdentifier:(id)arg1 subpath:(id)arg2 byExtendingSelection:(BOOL)arg3;
- (id)currentTileViewUIState;
- (void)applyTileViewUIState:(id)arg1;
- (void)restoreUIState;
- (void)saveUIState;
- (id)libraryUIStateDefaultsKey;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (BOOL)canPerformRemoveSelectedAssetGroups;
- (BOOL)canPerformRemoveSelectedAssetsFromGroup;
- (BOOL)canPerformRemoveSelectedAssetsFromLibrary;
- (void)performRemoveAssetsFromGroups:(id)arg1;
- (void)performRemoveSelectedAssetGroups;
- (BOOL)firstResponderHasSelectedAsset:(id)arg1;
- (id)parentForNewGroup;
- (id)groupedTileView:(id)arg1 draggedImageState:(id)arg2;
- (void)groupedTileView:(id)arg1 concludeDragOperation:(id)arg2;
- (BOOL)groupedTileView:(id)arg1 performDragOperation:(id)arg2;
- (BOOL)groupedTileView:(id)arg1 prepareForDragOperation:(id)arg2;
- (void)groupedTileView:(id)arg1 draggingExited:(id)arg2;
- (unsigned long long)groupedTileView:(id)arg1 draggingEntered:(id)arg2;
- (unsigned long long)groupedTileView:(id)arg1 draggingUpdated:(id)arg2;
- (unsigned long long)calculateAssetViewDragOperation:(id)arg1 targetGroup:(id *)arg2 targetIndex:(long long *)arg3;
- (unsigned long long)draggingOperationForDragInfo:(id)arg1 withTargetGroup:(id)arg2 targetCanBeMoveWithinGroup:(BOOL)arg3;
- (BOOL)canCreateAssetsFromPasteboard:(id)arg1 targetingLibrarySourceIdentifier:(id *)arg2;
- (void)addObjectsFromDraggingInfo:(id)arg1 toGroup:(id)arg2;
- (void)insertObjectsFromDraggingInfo:(id)arg1 intoGroup:(id)arg2 atIndex:(long long)arg3;
- (BOOL)createAsset:(id *)arg1 forLibrarySourceWithIdentifier:(id *)arg2 fromPasteboard:(id)arg3;
- (id)addAssetsFromDraggingInfo:(id)arg1 toGroup:(id)arg2 copy:(BOOL)arg3;
- (id)insertAssetsFromDraggingInfo:(id)arg1 intoGroup:(id)arg2 atIndex:(long long)arg3 copy:(BOOL)arg4;
- (void)groupedTileViewDragSelectedItems:(id)arg1 withMouseDownEvent:(id)arg2 andMouseDraggedEvent:(id)arg3;
- (id)draggedImageStateForAssetGroupPairs:(id)arg1 draggedPair:(id)arg2 referenceRectForClickedItem:(struct CGRect *)arg3;
- (void)groupedTileViewCopySelectedItems:(id)arg1;
- (void)dragDidUpdate:(id)arg1 operation:(unsigned long long)arg2 previousOperation:(unsigned long long)arg3;
- (void)draggedImage:(id)arg1 endedAt:(struct CGPoint)arg2 operation:(unsigned long long)arg3 withException:(id)arg4 shouldSlideBack:(char *)arg5;
- (void)didFinishDraggingAssets:(id)arg1 info:(id)arg2 shouldSlideBack:(char *)arg3;
- (void)dragAssetPairs:(id)arg1 withMouseDownEvent:(id)arg2 mouseDraggedEvent:(id)arg3 initialDraggedImageState:(id)arg4 allowedOperations:(unsigned long long)arg5 imageLocationInWindow:(struct CGPoint)arg6;
- (void)willBeginDraggingAssets:(id)arg1;
- (void)populatePasteboard:(id)arg1 withAssetAndCategoryPairs:(id)arg2 defaultDraggedImageState:(id *)arg3 identifierMapTable:(id *)arg4;
- (void)populatePasteboard:(id)arg1 withAssets:(id)arg2 defaultDraggedImageState:(id *)arg3 identifierMapTable:(id *)arg4;
- (void)populatePasteboard:(id)arg1 withAssets:(id)arg2;
- (id)defaultDragImageState:(id)arg1;
- (id)initialDragImageState:(id)arg1;
- (BOOL)transfersFirstResponderToDragDestination:(id)arg1;
- (void)registerForDropTypes;
- (id)draggedAssets;
- (id)readableAssetPasteboardTypes;
- (id)assetGroupPasteboardType;
- (id)assetPasteboardType;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)userDidEditAsset:(id)arg1;
- (void)applyAssetSelectionIndexes;
- (void)forceGroupMenuContentValidation;
- (void)invalidateGroupMenuContent;
- (void)validateGroupMenuContent:(id)arg1;
- (void)forceIconContentValidation;
- (void)invalidateIconContent;
- (void)validateIconContent:(id)arg1;
- (void)startObservingLibraryGroups;
- (void)setObservedGroups:(id)arg1;
- (void)dropUnusedAssetAndGroupSets:(id)arg1;
- (id)allAssetAndGroupSets;
- (id)uniquedAssetAndGroupSetForAsset:(id)arg1 andGroups:(id)arg2;
- (BOOL)removeAssets:(id)arg1 error:(id *)arg2;
- (BOOL)canPerformRemoveAssetFromLibrary:(id)arg1;
- (BOOL)canRemoveAsset:(id)arg1;
- (id)editorViewControllerForAsset:(id)arg1;
- (BOOL)canEditAsset:(id)arg1;
- (id)searchStringsForAsset:(id)arg1;
- (BOOL)isGroupDisplayedInAssetView:(id)arg1;
- (void)libraryDidLoad;
- (id)representedObjectWithString:(id)arg1 forAsset:(id)arg2;
- (id)imageForLibraryAsset:(id)arg1;
- (void)viewWillUninstall;
- (void)viewDidInstall;
- (void)setupScrollMonitoringAfterInstall;
- (void)setupLibraryObservingAfterInstalling;
- (void)setupFilterBarAfterInstalling;
- (void)setupAssetTileViewAfterInstalling;
@property(readonly) BOOL searchFieldIsFirstResponder;
@property(readonly, getter=isViewingLeafGroup) BOOL viewingLeafGroup;
- (id)libraryWindow;
@property BOOL identifiesAssetsPerGroup;
- (id)assetScrollView;
- (id)assetTileViewForceSynchronizedContent:(BOOL)arg1;
- (void)finalize;
- (void)dealloc;
- (void)loadView;
- (void)setRepresentedExtension:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;

@end

@interface DVTLibraryDetailEditorController : DVTViewController
{
    id _didEditHandlerBlock;
    DVTLibraryDetailController *_currentDetailController;
    DVTLibraryAsset *_editedAsset;
    NSResponder *_initialResponder;
}

@property(retain) NSResponder *initialResponder; // @synthesize initialResponder=_initialResponder;
@property(retain) DVTLibraryDetailController *currentDetailController; // @synthesize currentDetailController=_currentDetailController;
@property(readonly) id didEditHandlerBlock; // @synthesize didEditHandlerBlock=_didEditHandlerBlock;
@property(retain, nonatomic) DVTLibraryAsset *editedAsset; // @synthesize editedAsset=_editedAsset;
- (void)didChangeCurrentDetailController;
- (void)willChangeCurrentDetailController;
- (id)initWithDidEditHandlerBlock:(id)arg1;

@end

@interface DVTLibraryDetailPopUpContentController : DVTHUDPopUpContentViewController
{
    DVTAssetDetailView *_assetDetailView;
    DVTLibraryDetailEditorController *_currentEditorViewController;
    id /*<DVhhhTLibraryDetailPopUpContentControllerDelegate>*/ _delegate;
    DVTLibraryDetailPopUpController *_popUpController;
    DVTDelayedValidator *_replacementViewValidator;
    DVTChoice *_selectedDetailControllerChoice;
    DVTLibraryController *_libraryController;
    DVTLibraryAsset *_assetDetailViewAsset;
    NSArray *_detailControllerChoices;
    struct {
        unsigned int isOpen:1;
        unsigned int synchronizingDetailViewContentViewWithAsset:1;
        unsigned char editingSelectedAsset;
        unsigned char canEditSelectedAsset;
        unsigned int _reserved:4;
    } _flags;
}

+ (id)synchronizedAssetKeyPathsForDetailView;
@property(retain, nonatomic) DVTLibraryDetailPopUpController *popUpController; // @synthesize popUpController=_popUpController;
@property(retain) id /*<DVTLibraryDetailPopUpContentControllerDelegate>*/ delegate; // @synthesize delegate=_delegate;
@property(retain, nonatomic) DVTChoice *selectedDetailControllerChoice; // @synthesize selectedDetailControllerChoice=_selectedDetailControllerChoice;
@property(retain, nonatomic) NSArray *detailControllerChoices; // @synthesize detailControllerChoices=_detailControllerChoices;
@property(readonly) DVTAssetDetailView *assetDetailView; // @synthesize assetDetailView=_assetDetailView;
@property(readonly) DVTLibraryController *libraryController; // @synthesize libraryController=_libraryController;
- (void)stopEditingSelectedAsset;
- (void)startEditingSelectedAsset;
- (void)synchronizeCurrentDetailControllerWithCurrentEditorController:(id)arg1;
- (void)makeSureCurrentEditorControllerHasFirstResponder;
- (void)scrollTopOfAssetDetailViewIntoView;
- (void)assetDetailView:(id)arg1 beginDraggingWithMouseDownEvent:(id)arg2 andMouseDraggedEvent:(id)arg3;
- (void)refreshDetailController:(id)arg1 withAsset:(id)arg2;
- (void)sizeDetailController:(id)arg1 toFitSuggestedSize:(struct CGSize)arg2 forAsset:(id)arg3;
- (void)assetDetailView:(id)arg1 didInstallDetailController:(id)arg2;
- (void)assetDetailView:(id)arg1 sizeViewController:(id)arg2 toFitSuggestedSize:(struct CGSize)arg3;
- (void)assetDetailView:(id)arg1 wasDoubleClickedInHeader:(id)arg2;
- (void)refreshDetailView;
@property(readonly) DVTLibraryDetailController *currentDetailController;
- (void)refreshDetailControllerTabChooserForAsset:(id)arg1;
- (id)detailControllerIdentifiersForAsset:(id)arg1;
- (void)synchronizeDetailViewContentViewWithAsset;
@property(readonly) DVTLibraryAsset *assetDetailViewAsset;
- (void)setAssetDetailViewAsset:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)viewDidInstall;
- (id)selectedAsset;
@property BOOL canEditSelectedAsset;
@property(getter=isEditingSelectedAsset) BOOL editingSelectedAsset;
- (BOOL)firstResponderHasSelectedAsset:(id)arg1;
- (id)library;
- (id)initWithLibraryController:(id)arg1;

@end

@interface DVTLibraryDetailPopUpController : DVTHUDPopUpController
{
    NSButton *_editButton;
}

- (void)addSubviews;
@property(readonly) NSButton *editButton; // @synthesize editButton=_editButton;

@end

@interface DVTLibraryGroup : DVTAbstractLibraryGroup
{
    DVTMutableOrderedSet *_assets;
    BOOL _assetsAreEditable;
    BOOL _groupsAreEditable;
    BOOL _needsSort;
}

@property BOOL groupsAreEditable; // @synthesize groupsAreEditable=_groupsAreEditable;
@property BOOL assetsAreEditable; // @synthesize assetsAreEditable=_assetsAreEditable;
- (BOOL)containsAsset:(id)arg1;
- (id)assetsEnumerator;
- (id)assets;
- (long long)numberOfAssets;
- (void)insertAsset:(id)arg1 atIndex:(long long)arg2;
- (void)removeAsset:(id)arg1;
- (void)_checkSort;
- (id)initWithPropertyListRepresentation:(id)arg1 library:(id)arg2 andIdentifiedAssets:(id)arg3;
- (void)buildPropertyListRepresentation:(id)arg1;
- (id)initWithTitle:(id)arg1 andLibrary:(id)arg2;

@end

@interface DVTLocalProcessInformation (DVTLocalProcessInformationAdditions)
@property(readonly) BOOL isApplication;
@property(readonly) NSImage *applicationImage;
@end

@interface DVTLocalProcessInformation (DVTLocalProcessInformationAdditionsPrivate)
+ (id)_imageForTerminal;
@property(readonly) NSString *processBundlePath;
@property(readonly) struct ProcessSerialNumber processSerialNumber;
@end

@interface DVTLozengeTextField : NSTextField
{
    id _superviewFrameChangeObserver;
}

+ (Class)cellClass;
- (void)setAutoCenterAndResizeToFitSuperview:(BOOL)arg1;
- (void)_centerAndResizeToFitSuperview;
- (BOOL)isOpaque;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_sharedDVTLozengeTextFieldInit;

@end

@interface DVTMainViewControllerMonitor : NSObject
{
}

+ (void)monitorMainViewControllerInWindow:(id)arg1;

@end

@interface DVTMergedSortedArray : NSArray
{
    NSArray *_array1;
    NSArray *_array2;
    struct _mergedIndexes {
        unsigned int :1;
        unsigned int :31;
    } *_combinedInfo;
    unsigned long long _count;
}

- (void)getObjects:(id *)arg1 range:(struct _NSRange)arg2;
- (id)objectAtIndex:(unsigned long long)arg1;
- (unsigned long long)count;
- (void)finalize;
- (id)initWithArray:(id)arg1 array:(id)arg2 context:(void *)arg3 mergeDuplicates:(BOOL)arg4 comparator:(id)arg5;
- (id)initWithArray:(id)arg1 array:(id)arg2 context:(void *)arg3 comparator:(id)arg4;
- (id)_initWithArray:(id)arg1 array:(id)arg2 context:(void *)arg3 mergeDuplicates:(BOOL)arg4 comparator:(id)arg5;

@end

@interface DVTMessageBubbleAnnotation : DVTTextAnnotation
{
    NSString *_messageBubbleText;
    NSImage *_messageBubbleIcon;
    BOOL _miniaturized;
}

@property(retain, nonatomic) NSImage *messageBubbleIcon; // @synthesize messageBubbleIcon=_messageBubbleIcon;
@property(copy, nonatomic) NSString *messageBubbleText; // @synthesize messageBubbleText=_messageBubbleText;
@property(nonatomic, getter=isMiniaturized) BOOL miniaturized; // @synthesize miniaturized=_miniaturized;
- (id)annotationDisplayDescription;
@property(retain) id /*<DVTMessageBubbleAnnotationDelegate>*/ delegate;
- (void)fontAndColorThemeChanged:(id)arg1;
- (void)invalidateDisplayAndLayoutIfNeeded:(BOOL)arg1;
- (void)setNeedsInvalidate;
- (id)currentStateInTextView:(id)arg1;
- (BOOL)drawsHighlightedRanges;
- (void)drawLineHighlightInRect:(struct CGRect)arg1 textView:(id)arg2;
- (BOOL)drawsLineHighlight;
- (void)setVisible:(BOOL)arg1;
- (id)init;

@end

@interface DVTMessageBubbleView : NSView
{
    NSMutableArray *_annotations;
    NSDictionary *_cachedMessageTextAttributes;
    NSDictionary *_cachedExpandButtonTextAttributes;
    NSMutableDictionary *_messageWidths;
    NSFont *_messageFont;
    NSTrackingArea *_expandButtonTrackingArea;
    double _arrowheadWidth;
    NSMutableIndexSet *_annotsNeedTooltip;
    double _collapsedHeight;
    struct CGSize _preferredSize;
    int _position;
    struct {
        unsigned int _mouseInExpandButton:1;
        unsigned int _mouseIsDown:1;
    } _flags;
    BOOL _expanded;
    BOOL _needsParagraphSpacing;
}

+ (double)_defaultMessageFontSize;
+ (id)defaultAnimationForKey:(id)arg1;
@property(nonatomic) double collapsedHeight; // @synthesize collapsedHeight=_collapsedHeight;
@property BOOL needsParagraphSpacing; // @synthesize needsParagraphSpacing=_needsParagraphSpacing;
@property int position; // @synthesize position=_position;
@property(nonatomic, getter=isExpanded) BOOL expanded; // @synthesize expanded=_expanded;
- (id)_collapseButtonTrianglePathInRect:(struct CGRect)arg1;
- (id)_backgroundBezierPathInRect:(struct CGRect)arg1;
- (void)noticeFontAndColorsChanged;
- (void)drawRect:(struct CGRect)arg1;
- (void)_drawExpandButton;
- (void)_drawAnnotationMessages;
- (void)_drawBackground;
- (void)mouseDown:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)updateTrackingAreas;
- (id)view:(id)arg1 stringForToolTip:(long long)arg2 point:(struct CGPoint)arg3 userData:(void *)arg4;
- (void)resetCursorRects;
- (id)_cachedExpandButtonTextAttributes;
- (id)_cachedMessageTextAttributes;
- (struct CGRect)_expandButtonArea;
- (double)_expandButtonWidth;
- (double)_messageWidthForString:(id)arg1;
- (struct CGRect)_annotationIconRectAtIndex:(unsigned long long)arg1;
- (double)_iconMaxWidth;
- (id)_themeForMainAnnotation;
- (struct CGRect)_rectForAnnotationAtIndex:(unsigned long long)arg1;
@property(readonly) struct CGSize preferredSize; // @synthesize preferredSize=_preferredSize;
- (unsigned long long)annotationIndexAtPoint:(struct CGPoint)arg1;
- (void)removeAnnotation:(id)arg1;
- (void)addAnnotation:(id)arg1;
@property(readonly) NSArray *annotations;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface DVTMorphingDragImageController : NSObject <NSAnimationDelegate>
{
    NSImage *originalImage;
    struct CGSize maxImageSize;
    struct CGPoint originalViewLocation;
    NSPasteboard *dragPasteboard;
    id dragSource;
    NSView *sourceView;
    NSWindow *dragWindow;
    DVTMorphingDragImageView *dragImageView;
    NSAnimation *morphAnimation;
    NSAnimation *slideBackAnimation;
    struct CGPoint slideBackStartTranslation;
    struct CGPoint slideBackEndTranslation;
    NSWindow *windowUnderMouse;
    id <DVTMorphingDragImageDropTarget> targetUnderMouse;
    NSString *runLoopMode;
    long long _draggingFormation;
    long long _numberOfValidItemsForDrop;
    BOOL _animatesToDestination;
    BOOL dragDone;
    BOOL _targetAcceptsDrag;
    BOOL mouseOverSystemWindow;
    BOOL scheduledRedisplay;
}

+ (void)dragImage:(id)arg1 maximumSize:(struct CGSize)arg2 fromView:(id)arg3 at:(struct CGPoint)arg4 pasteboard:(id)arg5 source:(id)arg6 inMode:(id)arg7;
- (void)_morphToDragImage:(id)arg1 force:(BOOL)arg2;
- (void)_sendMovedToPointOnScreenToDragSource;
- (void)_setTargetUnderMouse:(id)arg1;
- (void)_setWindowUnderMouse:(id)arg1;
- (void)_findWindowUnderMouse:(id *)arg1 level:(int *)arg2 viewUnderMouse:(id *)arg3;
- (id)_dragInfoForNoTargetUnderMouse;
- (id)_dragInfoForTargetUnderMouse;
- (void)_animateSlideBack;
- (void)_animateMorphWindow;
- (void)_dragComplete;
- (void)_applicationDidResignActive;
- (void)_handleMouseUp;
- (void)_handleFlagsChanged;
- (void)_handleMouseDragged;
- (void)_handleEvent:(id)arg1;
- (id)_runLoopMode;
- (void)_runDrag;
- (void)_prepareForDragWithImage:(id)arg1;
- (void)_dragImage:(id)arg1 maximumSize:(struct CGSize)arg2 fromView:(id)arg3 at:(struct CGPoint)arg4 pasteboard:(id)arg5 source:(id)arg6 inMode:(id)arg7;
- (void)_redisplayWindows;
- (void)_scheduleRedisplay;
- (void)animationDidEnd:(id)arg1;
- (id)dragWindow;
- (void)morphToDragImage:(id)arg1;

@end

@interface DVTMorphingDragImageView : NSView
{
    NSImage *startImage;
    NSImage *endImage;
    float progress;
}

- (void)drawRect:(struct CGRect)arg1;
- (void)setProgress:(float)arg1;
- (void)setEndImage:(id)arg1;
- (id)endImage;
- (void)setStartImage:(id)arg1;
- (id)startImage;

@end

@interface DVTRolloverTrackingButton : DVTMainStatusAwareButton
{
    long long _trackingRectTag;
    BOOL _mouseOver;
    BOOL _redrawOnMouseEnteredAndExited;
    BOOL _trackingMouseDown;
    BOOL _trackingRectUpdatePending;
}

- (void)rightMouseDown:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)viewDidMoveToWindow;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)_updateTrackingRectSoon;
- (void)updateTrackingRect;
- (void)_removeTrackingRect;
- (void)updateMouseIsOver:(int)arg1;
- (BOOL)shouldUseRolloverAppearance;
- (BOOL)redrawOnMouseEnteredAndExited;
- (void)setRedrawOnMouseEnteredAndExited:(BOOL)arg1;
- (void)mouseDown:(id)arg1;
- (void)mouseEnteredOrExited:(BOOL)arg1;
- (BOOL)mouseIsOver;
- (void)awakeFromNib;
- (void)setBoundsRotation:(double)arg1;
- (void)setBoundsSize:(struct CGSize)arg1;
- (void)setBoundsOrigin:(struct CGPoint)arg1;
- (void)setFrameRotation:(double)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)setFrameOrigin:(struct CGPoint)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_initTrackingRect;

@end

@interface DVTNewTabButton : DVTRolloverTrackingButton
{
    int _rolloverStyle;
}

- (void)setRolloverStyle:(int)arg1;
- (int)rolloverStyle;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface DVTNonLossyASCIIFormatter : NSFormatter
{
    BOOL _escapeInvisibleASCII;
}

@property BOOL escapeInvisibleASCII; // @synthesize escapeInvisibleASCII=_escapeInvisibleASCII;
- (BOOL)getObjectValue:(id *)arg1 forString:(id)arg2 errorDescription:(id *)arg3;
- (id)stringForObjectValue:(id)arg1;
- (id)nonLossyASCIIDataForString:(id)arg1;
- (id)init;
- (id)initWithEscapeInivisbleASCII:(BOOL)arg1;

@end

@interface DVTNumberToTextColorTransformer : NSValueTransformer
{
}

+ (BOOL)allowsReverseTransformation;
+ (Class)transformedValueClass;
- (id)transformedValue:(id)arg1;

@end

@interface DVTObjectBindingUtilities : NSObject
{
}

+ (BOOL)object:(id)arg1 extraBindingsContainsBinding:(id)arg2;
+ (void)initialize;
- (id)dvtGeneric_infoForBinding:(id)arg1;
- (void)dvtGeneric_unbind:(id)arg1;
- (void)dvtGeneric_bind:(id)arg1 toObject:(id)arg2 withKeyPath:(id)arg3 options:(id)arg4;
- (id)dvt_exposedBindings;

@end

@interface DVTOutlineView : NSOutlineView <DVTProgressIndicatorProvidingView>
{
    int _emptyContentStringStyle;
    NSString *_emptyContentString;
    NSTextField *_emptyContentTextField;
    NSIndexSet *_draggedRows;
    NSEvent *_event;
    id _progressIndicatorsByItem;
    long long _maxAlternatingRowBackgroundLevelInGroupRow;
    id _timer;
    id _itemUnderHoveredMouse;
    NSEvent *_stashedMouseMovedEvent;
    NSTrackingArea *_mouseHoverTrackingArea;
    NSTextFieldCell *_dataCellForGroupRow;
    int _indentationStyle;
    int _groupHeaderStyle;
    struct {
        unsigned int breaksCyclicSortDescriptors:1;
        unsigned int delegateRespondsToShouldMouseHover:1;
        unsigned int hasSetCustomNonLocalDraggingSourceOperationMask:1;
        unsigned int hasSetCustomLocalDraggingSourceOperationMask:1;
        unsigned int revealsOutlineCellUnderHoveredMouseAfterDelay:1;
        unsigned int reserved:3;
    } _dvtOVFlags;
    BOOL _groupRowBreaksAlternatingRowBackgroundCycle;
}

@property int emptyContentStringStyle; // @synthesize emptyContentStringStyle=_emptyContentStringStyle;
@property(copy, nonatomic) NSString *emptyContentString; // @synthesize emptyContentString=_emptyContentString;
@property int groupHeaderStyle; // @synthesize groupHeaderStyle=_groupHeaderStyle;
@property int indentationStyle; // @synthesize indentationStyle=_indentationStyle;
@property(nonatomic) long long maxAlternatingRowBackgroundLevelInGroupRow; // @synthesize maxAlternatingRowBackgroundLevelInGroupRow=_maxAlternatingRowBackgroundLevelInGroupRow;
@property(nonatomic) BOOL groupRowBreaksAlternatingRowBackgroundCycle; // @synthesize groupRowBreaksAlternatingRowBackgroundCycle=_groupRowBreaksAlternatingRowBackgroundCycle;
@property(retain) id itemUnderHoveredMouse; // @synthesize itemUnderHoveredMouse=_itemUnderHoveredMouse;
@property(retain) NSEvent *event; // @synthesize event=_event;
@property(copy) NSIndexSet *draggedRows; // @synthesize draggedRows=_draggedRows;
- (unsigned long long)draggingSourceOperationMaskForLocal:(BOOL)arg1;
- (void)setDraggingSourceOperationMask:(unsigned long long)arg1 forLocal:(BOOL)arg2;
- (id)dragImageForRowsWithIndexes:(id)arg1 tableColumns:(id)arg2 event:(id)arg3 offset:(struct CGPoint *)arg4;
- (void)concludeDragOperation:(id)arg1;
- (void)draggingEnded:(id)arg1;
- (unsigned long long)draggingUpdated:(id)arg1;
- (unsigned long long)draggingEntered:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)mouseMoved:(id)arg1;
- (void)delayedProcessMouseMovedEvent;
- (void)restartMouseHoverTimer;
- (void)invalidateMouseHoverTimer;
- (void)updateDisplayOfItemUnderMouse:(id)arg1;
- (void)setItemUnderMouseAndMarkForRedisplay:(id)arg1;
- (void)updateTrackingAreas;
@property BOOL revealsOutlineCellUnderHoveredMouseAfterDelay;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)insertText:(id)arg1;
- (void)doCommandBySelector:(SEL)arg1;
- (void)keyDown:(id)arg1;
- (void)viewWillDraw;
- (void)_showEmptyContentString;
- (void)_hideEmptyContentString;
- (id)preparedCellAtColumn:(long long)arg1 row:(long long)arg2;
- (id)_dataCellForGroupRowWithClass:(Class)arg1;
- (void)_drawRowHeaderSeparatorInClipRect:(struct CGRect)arg1;
- (void)drawGridInClipRect:(struct CGRect)arg1;
- (void)_drawBackgroundForGroupRow:(long long)arg1 clipRect:(struct CGRect)arg2 isButtedUpRow:(BOOL)arg3;
- (void)drawBackgroundInClipRect:(struct CGRect)arg1;
- (struct CGRect)frameOfOutlineCellAtRow:(long long)arg1;
- (struct CGRect)frameOfCellAtColumn:(long long)arg1 row:(long long)arg2;
@property(readonly) NSArray *contextMenuSelectedItems;
@property(readonly) NSArray *selectedItems;
- (id)_itemsAtIndexes:(id)arg1;
@property(readonly) NSIndexSet *contextMenuSelectedRowIndexes;
@property(readonly) NSIndexSet *clickedRowIndexes;
- (void)setSortDescriptors:(id)arg1;
@property BOOL breaksCyclicSortDescriptors;
- (id)progressIndicatorForItem:(id)arg1 createIfNecessary:(BOOL)arg2 progressIndicatorStyle:(unsigned long long)arg3;
- (void)setDelegate:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)dvt_commonInit;

@end

@interface DVTPDFBlockCapturingView : NSView
{
    id drawingBlock;
}

@property(copy) id drawingBlock; // @synthesize drawingBlock;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface DVTPatternString : NSString
{
    NSString *_pattern;
    unsigned long long _count;
}

@property(readonly) unsigned long long count; // @synthesize count=_count;
@property(readonly) NSString *pattern; // @synthesize pattern=_pattern;
- (unsigned short)characterAtIndex:(unsigned long long)arg1;
- (unsigned long long)length;
- (id)init;
- (id)initWithPatternCharacter:(unsigned short)arg1 count:(unsigned long long)arg2;
- (id)initWithPatternString:(id)arg1 count:(unsigned long long)arg2;

@end

@interface DVTPlistNode : NSObject <NSCopying>
{
    DVTPlistNode *_parent;
}

+ (id)plistfromPropertyList:(id)arg1 withParent:(id)arg2;
@property(retain) DVTPlistNode *parent; // @synthesize parent=_parent;
- (id)findStringMatchingDescriptor:(id)arg1 backwards:(BOOL)arg2 startingAt:(id)arg3 document:(id)arg4;
- (id)stringForSearch;
- (id)keyPath;
- (id)keyForChild:(id)arg1;
- (id)rawPlist;
- (id)xmlStringWithIndent:(id)arg1;
- (id)plistStringWithIndent:(id)arg1;
- (void)setValueFromPlist:(id)arg1;
@property(retain) id value;
- (BOOL)isPlistCommentNode;
- (unsigned long long)indexOfKey:(id)arg1;
- (unsigned long long)indexOfChild:(id)arg1;
- (id)valueAtIndex:(unsigned long long)arg1;
- (id)keyAtIndex:(unsigned long long)arg1;
- (id)children;
- (unsigned long long)numberOfChildren;
@property(readonly, getter=isLeaf) BOOL leaf;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithParentNode:(id)arg1;

@end

@interface DVTPlistArrayNode : DVTPlistNode
{
    NSMutableArray *_array;
}

- (id)findStringMatchingDescriptor:(id)arg1 backwards:(BOOL)arg2 startingAt:(id)arg3 document:(id)arg4;
- (id)keyForChild:(id)arg1;
- (unsigned long long)indexOfKey:(id)arg1;
- (unsigned long long)indexOfChild:(id)arg1;
- (id)rawPlist;
- (id)xmlStringWithIndent:(id)arg1;
- (id)plistStringWithIndent:(id)arg1;
- (void)setValueFromPlist:(id)arg1;
- (id)value;
- (void)setValue:(id)arg1;
- (void)moveItemAtIndex:(unsigned long long)arg1 toIndex:(unsigned long long)arg2;
- (void)removeValue:(id)arg1;
- (void)removeValueAtIndex:(unsigned long long)arg1;
- (void)addValue:(id)arg1;
- (void)replaceValue:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)insertValue:(id)arg1 atIndex:(unsigned long long)arg2;
- (id)valueAtIndex:(unsigned long long)arg1;
- (id)keyAtIndex:(unsigned long long)arg1;
- (id)children;
- (unsigned long long)numberOfChildren;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithParentNode:(id)arg1;

@end

@interface DVTPlistBooleanNode : DVTPlistNode
{
    BOOL _value;
}

- (id)rawPlist;
- (id)xmlStringWithIndent:(id)arg1;
- (id)plistStringWithIndent:(id)arg1;
- (void)setValueFromPlist:(id)arg1;
- (id)value;
- (void)setValue:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface DVTPlistComboBoxCell : NSComboBoxCell
{
    BOOL _showsStatusItems;
    NSArray *_statusCategoryNames;
    NSDictionary *_statusCellsByCategoryName;
}

@property(copy) NSArray *statusCategoryNames; // @synthesize statusCategoryNames=_statusCategoryNames;
@property BOOL showsStatusItems; // @synthesize showsStatusItems=_showsStatusItems;
- (void)selectWithFrame:(struct CGRect)arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 start:(long long)arg5 length:(long long)arg6;
- (void)editWithFrame:(struct CGRect)arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 event:(id)arg5;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (unsigned long long)hitTestForEvent:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3;
- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)_drawThemeComboBoxButtonWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (id)accessibilityHitTest:(struct CGPoint)arg1;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)_createStatusItemProxyItemsForRowAtPoint:(struct CGPoint)arg1;
- (void)drawStatusWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (struct CGRect)comboBoxRectForBounds:(struct CGRect)arg1;
- (struct CGRect)statusRectForBounds:(struct CGRect)arg1;
- (id)statusItemCellsForCategory:(id)arg1;
- (void)setStatusItemCells:(id)arg1 forCategory:(id)arg2;
- (id)_statusCellsByCategoryName;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface DVTPlistCommentNode : DVTPlistNode
{
    NSString *_comment;
    BOOL isMultiLine;
}

@property BOOL isMultiLine; // @synthesize isMultiLine;
- (id)rawPlist;
- (id)xmlStringWithIndent:(id)arg1;
- (id)plistStringWithIndent:(id)arg1;
- (id)value;
- (void)setValueFromPlist:(id)arg1;
- (void)setValue:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (BOOL)isPlistCommentNode;

@end

@interface DVTPlistDataFormatter : NSFormatter
{
}

- (BOOL)getObjectValue:(id *)arg1 forString:(id)arg2 errorDescription:(id *)arg3;
- (id)stringForObjectValue:(id)arg1;

@end

@interface DVTPlistDataNode : DVTPlistNode
{
    NSData *_value;
}

- (id)rawPlist;
- (id)xmlStringWithIndent:(id)arg1;
- (id)base64EncodedString;
- (id)stringForSearch;
- (id)plistStringWithIndent:(id)arg1;
- (void)setValueFromPlist:(id)arg1;
- (id)value;
- (void)setValue:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface DVTPlistDateNode : DVTPlistNode
{
    NSDate *_value;
}

- (id)stringForSearch;
- (id)rawPlist;
- (id)xmlStringWithIndent:(id)arg1;
- (id)plistStringWithIndent:(id)arg1;
- (id)encodedString;
- (void)setValueFromPlist:(id)arg1;
- (id)_dateFormatter;
- (id)value;
- (void)setValue:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface DVTPlistDictionaryNode : DVTPlistArrayNode
{
    NSMutableDictionary *_dict;
}

- (id)findStringMatchingDescriptor:(id)arg1 backwards:(BOOL)arg2 startingAt:(id)arg3 document:(id)arg4;
- (id)_findStringInKey:(id)arg1 matchingDescriptor:(id)arg2 backwards:(BOOL)arg3 startingAt:(id)arg4 document:(id)arg5;
- (id)keyForChild:(id)arg1;
- (unsigned long long)indexOfKey:(id)arg1;
- (unsigned long long)indexOfChild:(id)arg1;
- (id)rawPlist;
- (id)xmlStringWithIndent:(id)arg1;
- (id)plistStringWithIndent:(id)arg1;
- (id)keyForNewChild;
- (id)keyByUniquingKey:(id)arg1;
- (void)setValueFromPlist:(id)arg1;
- (id)value;
- (void)setValue:(id)arg1;
- (void)insertValue:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)replaceKeyAtIndex:(unsigned long long)arg1 withKey:(id)arg2;
- (void)replaceValue:(id)arg1 forKey:(id)arg2;
- (void)removeValueForKey:(id)arg1;
- (void)removeValueAtIndex:(unsigned long long)arg1;
- (void)addValue:(id)arg1 forKey:(id)arg2;
- (void)insertValue:(id)arg1 forKey:(id)arg2 atIndex:(unsigned long long)arg3;
- (id)valueForKey:(id)arg1;
- (id)valueAtIndex:(unsigned long long)arg1;
- (id)keyAtIndex:(unsigned long long)arg1;
- (unsigned long long)numberOfChildren;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithParentNode:(id)arg1;

@end

@interface DVTPlistDocumentLocation : DVTDocumentLocation
{
    DVTPlistModel *_model;
    DVTPlistSelection *_selection;
}

@property(readonly) DVTPlistModel *model; // @synthesize model=_model;
@property(readonly) DVTPlistSelection *selection; // @synthesize selection=_selection;
- (long long)compare:(id)arg1;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithDocumentURL:(id)arg1 timestamp:(id)arg2 model:(id)arg3 selection:(id)arg4;

@end

@interface DVTPlistInvisibleOutlineCell : NSTextFieldCell
{
}

- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;

@end

@interface DVTPlistInvisibleOutlineHeaderCell : NSTableHeaderCell
{
}

- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;

@end

@interface DVTPlistModel : NSObject <DVTTextFindable, DVTTextReplacable, DVTInvalidation>
{
    NSDocument/*<DVTPlistDocumentProtocol>*/ *_document;
    DVTPlistNode *_plist;
    DVTPlistStructureDefinition *_structureDefinition;
    BOOL _isInvalidated;
    DVTStackBacktrace *_invalidationBacktrace;
}

@property(readonly) DVTStackBacktrace *invalidationBacktrace; // @synthesize invalidationBacktrace=_invalidationBacktrace;
@property(readonly) NSDocument/*<DVTPlistDocumentProtocol>*/ *document; // @synthesize document=_document;
- (unsigned long long)replaceAllResults:(id)arg1 inNode:(id)arg2 withString:(id)arg3;
- (BOOL)selection:(id)arg1 matchesString:(id)arg2 ignoreCase:(BOOL)arg3;
- (BOOL)replaceFindResults:(id)arg1 withString:(id)arg2 withError:(id *)arg3;
- (id)findStringMatchingDescriptor:(id)arg1 backwards:(BOOL)arg2 from:(id)arg3 to:(id)arg4;
- (void)_replaceValueInNode:(id)arg1 range:(struct _NSRange)arg2 replacement:(id)arg3;
- (id)replacePlist:(id)arg1 withPlist:(id)arg2;
- (void)movePlist:(id)arg1 toIndex:(long long)arg2;
- (id)setClass:(Class)arg1 forPlist:(id)arg2;
- (void)setLocalizedKey:(id)arg1 forPlist:(id)arg2;
- (void)setKey:(id)arg1 forPlist:(id)arg2;
- (void)deletePlist:(id)arg1;
- (id)addChild:(id)arg1 toPlist:(id)arg2 withKey:(id)arg3 atIndex:(long long)arg4;
- (void)_removeRoot;
- (id)setPlist:(id)arg1;
- (id)createNewChildForPlist:(id)arg1 withKey:(id)arg2;
- (id)keyForNewChildOfDictionary:(id)arg1;
- (id)keyByUniquingKey:(id)arg1 inDictionary:(id)arg2;
- (BOOL)canDeletePlist:(id)arg1;
- (BOOL)canAddChildToPlist:(id)arg1 withKey:(id)arg2;
- (id)placeholderValueForPlist:(id)arg1;
- (BOOL)canEditValueForPlist:(id)arg1;
- (BOOL)canEditClassForPlist:(id)arg1;
- (BOOL)canEditKeyForPlist:(id)arg1;
- (id)keyPathForPlist:(id)arg1;
- (id)plistForKeyPath:(id)arg1;
- (id)plist;
- (id)_setPlist:(id)arg1 forKeyPath:(id)arg2 atIndex:(long long)arg3 doReplace:(BOOL)arg4 doNotify:(BOOL)arg5;
- (void)_setPlistNoCopy:(id)arg1 forKeyPath:(id)arg2 atIndex:(long long)arg3 doReplace:(BOOL)arg4 doNotify:(BOOL)arg5;
- (void)_renameKey:(id)arg1 forKeyPath:(id)arg2;
@property(retain) DVTPlistStructureDefinition *plistStructureDefinition;
- (id)plistFromString:(id)arg1;
- (id)plistFromData:(id)arg1;
- (id)dataOfType:(id)arg1 error:(id *)arg2;
- (id)xmlPropertyListForNode:(id)arg1;
- (id)asciiPropertyListForNode:(id)arg1;
- (BOOL)isValidASCIIPropertyList;
@property(readonly, nonatomic, getter=isValid) BOOL valid;
- (void)invalidate;
- (id)initWithDocument:(id)arg1;

// Remaining properties
@property unsigned long long supportedMatchingOptions;

@end

@interface DVTPlistNumberNode : DVTPlistNode
{
    NSNumber *_value;
}

- (id)rawPlist;
- (id)xmlStringWithIndent:(id)arg1;
- (id)plistStringWithIndent:(id)arg1;
- (BOOL)isFloat;
- (void)setValueFromPlist:(id)arg1;
- (id)value;
- (void)setValue:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface DVTPlistOutlineHeaderCell : NSTableHeaderCell
{
}

@end

@interface DVTPlistOutlineHeaderView : NSTableHeaderView
{
    BOOL _hideEndSeparator;
}

@property BOOL hideEndSeparator; // @synthesize hideEndSeparator=_hideEndSeparator;
- (BOOL)_drawingEndSeparator;

@end

@interface DVTPlistOutlineView : DVTOutlineView
{
    struct CGRect lastOutlineRect;
    BOOL adjustRowRect;
    BOOL adjustBounds;
    BOOL isEditing;
    BOOL fitToSuperview;
}

@property BOOL fitToSuperview; // @synthesize fitToSuperview;
- (id)delegate;
- (void)setDelegate:(id)arg1;
- (void)drawContextMenuHighlightForRow:(long long)arg1;
- (struct CGRect)frameOfCellAtColumn:(long long)arg1 row:(long long)arg2;
- (struct CGRect)frameOfOutlineCellAtRow:(long long)arg1;
- (struct CGSize)_adjustFrameSizeToFitSuperview:(struct CGSize)arg1;
- (void)_highlightRow:(long long)arg1 clipRect:(struct CGRect)arg2;
- (void)_drawDropHighlightBetweenUpperRow:(long long)arg1 andLowerRow:(long long)arg2 onRow:(long long)arg3 atOffset:(double)arg4;
- (void)_drawDropHighlightOutlineForRow:(long long)arg1;
- (void)_drawDropHighlightBackgroundForRow:(long long)arg1;
- (struct CGRect)rectOfRow:(long long)arg1;
- (struct CGRect)bounds;
- (id)_highlightColorForCell:(id)arg1;
- (void)drawGridInClipRect:(struct CGRect)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (void)drawSelectedOutlineRowsForRect:(struct CGRect)arg1;
- (void)invalidateFrameRectOfRect:(struct CGRect)arg1;
- (long long)lastRowForItem:(id)arg1;
- (BOOL)selectionShouldUsePrimaryColor;
- (struct CGRect)rectOfExistingRowsAndColumnsLessOne;
- (BOOL)abortEditing;
- (void)textDidEndEditing:(id)arg1;
- (void)textDidBeginEditing:(id)arg1;
- (BOOL)isEditing;
- (id)menuForEvent:(id)arg1;
- (void)keyDown:(id)arg1;
- (BOOL)validateMenuItem:(id)arg1;

@end

@interface DVTPlistParser : NSObject
{
    const unsigned short *begin;
    const unsigned short *curr;
    const unsigned short *end;
    NSString *errorString;
}

- (id)errorString;
- (id)parseData:(id)arg1;
- (id)parseOldStylePropertyListOrStringsFile;
- (id)parsePlistObject:(BOOL)arg1;
- (id)parsePlistData;
- (int)getDataBytes:(char *)arg1 size:(int)arg2;
- (id)parsePlistDict;
- (id)parsePlistDictContent;
- (id)parsePlistArray;
- (id)parsePlistString:(BOOL)arg1;
- (id)parseUnquotedPlistString;
- (id)parseQuotedPlistStringWithQuote:(unsigned short)arg1;
- (unsigned short)getSlashedChar;
- (unsigned int)lineNumber;
- (void)advanceToNonSpace;

@end

@interface DVTPopUpButtonCell : NSPopUpButtonCell
{
    NSArray *_statusCategoryNames;
    NSDictionary *_statusCellsByCategoryName;
    int _arrowStyle;
    int _emphasizeMarkerStyle;
    BOOL _showsStatusItems;
    BOOL _drawsEmphasizeMarker;
}

+ (void)initialize;
@property int emphasizeMarkerStyle; // @synthesize emphasizeMarkerStyle=_emphasizeMarkerStyle;
@property BOOL drawsEmphasizeMarker; // @synthesize drawsEmphasizeMarker=_drawsEmphasizeMarker;
@property(copy) NSArray *statusCategoryNames; // @synthesize statusCategoryNames=_statusCategoryNames;
@property BOOL showsStatusItems; // @synthesize showsStatusItems=_showsStatusItems;
@property int arrowStyle; // @synthesize arrowStyle=_arrowStyle;
- (void)updateBoundTitle;
- (void)drawBorderAndBackgroundWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawEmphasizeMarkerWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawStatusWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawWithExpansionFrame:(struct CGRect)arg1 inView:(id)arg2;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (struct CGRect)expansionFrameWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (struct CGRect)statusRectForBounds:(struct CGRect)arg1;
- (void)setBackgroundStyle:(long long)arg1;
- (id)statusItemCellsForCategory:(id)arg1;
- (void)setStatusItemCells:(id)arg1 forCategory:(id)arg2;
- (id)_statusCellsByCategoryName;
- (struct CGRect)_indicatorFrameForCellFrame:(struct CGRect)arg1 isFlipped:(BOOL)arg2;
- (struct CGRect)titleRectForBounds:(struct CGRect)arg1;
- (id)dvtExtraBindings;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initImageCell:(id)arg1;
- (id)initTextCell:(id)arg1;

@end

@interface DVTPlistPopupCell : DVTPopUpButtonCell
{
}

- (struct CGRect)drawTitle:(id)arg1 withFrame:(struct CGRect)arg2 inView:(id)arg3;
- (void)_drawIndicatorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (long long)interiorBackgroundStyle;

@end

@interface DVTPlistScrollView : NSScrollView
{
}

- (void)tile;

@end

@interface DVTPlistSelection : NSObject
{
    NSArray *_keyPath;
    struct _NSRange _selectedTextRange;
    BOOL _keyIsSelected;
}

@property(readonly) BOOL keyIsSelected; // @synthesize keyIsSelected=_keyIsSelected;
@property(readonly) struct _NSRange selectedTextRange; // @synthesize selectedTextRange=_selectedTextRange;
@property(readonly) NSArray *keyPath; // @synthesize keyPath=_keyPath;
- (id)description;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithKeyPath:(id)arg1 selectedTextRange:(struct _NSRange)arg2 keyIsSelected:(BOOL)arg3;
- (id)initWithKeyPath:(id)arg1 keyIsSelected:(BOOL)arg2;
- (id)initWithKeyPath:(id)arg1 selectedTextRange:(struct _NSRange)arg2;
- (id)initWithKeyPath:(id)arg1;
- (long long)compareSelectionForReplacing:(id)arg1;

@end

@interface DVTPlistStringNode : DVTPlistNode
{
    NSString *_value;
}

- (id)rawPlist;
- (id)xmlStringWithIndent:(id)arg1;
- (id)plistStringWithIndent:(id)arg1;
- (void)setValueFromPlist:(id)arg1;
- (id)value;
- (void)setValue:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface DVTPlistStructureDefinition : NSObject
{
    DVTExtension *_extension;
}

+ (id)plistStructureDefinitionForFileWithName:(id)arg1;
+ (id)plistStructureDefinitionForIdentifier:(id)arg1;
+ (id)sortedPlistStructureDefinitions;
+ (id)plistStructureDefinitions;
+ (id)_plistStructureDefinitions;
- (id)identifyingKeyForElementDefinitionNamed:(id)arg1;
- (id)typeNameForArrayElementsInElementDefinitionNamed:(id)arg1;
- (id)placeholderForElementDefinitionNamed:(id)arg1;
- (id)defaultKeyNameForElementDefinitionNamed:(id)arg1;
- (id)priorityOrderedKeyNamesForElementDefinitionNamed:(id)arg1;
- (id)variantNameForUserName:(id)arg1 forElementDefinitionNamed:(id)arg2;
- (id)allowableVariantUserNamesForElementDefinitionNamed:(id)arg1;
- (id)allowableVariantNamesForElementDefinitionNamed:(id)arg1;
- (id)allowableKeyUserNamesForElementDefinitionNamed:(id)arg1;
- (id)allowableKeyNamesForElementDefinitionNamed:(id)arg1;
- (id)allowableValueUserNamesForElementDefinitionNamed:(id)arg1;
- (id)allowableValueNamesForElementDefinitionNamed:(id)arg1;
- (id)defaultValueObjectInArrayElementDefinitionNamed:(id)arg1;
- (id)defaultValueForKey:(id)arg1 inDictionaryElementDefinitionNamed:(id)arg2;
- (id)defaultValueForElementDefinitionNamed:(id)arg1;
- (BOOL)isAllowableKey:(id)arg1 inDictionaryElementDefinitionNamed:(id)arg2;
- (Class)classForElementDefinitionNamed:(id)arg1;
- (id)allowableValueForUserName:(id)arg1 inDictionaryElementDefinitionNamed:(id)arg2;
- (id)userNameForAllowableValue:(id)arg1 inDictionaryElementDefinitionNamed:(id)arg2;
- (id)keyForUserName:(id)arg1 inDictionaryElementDefinitionNamed:(id)arg2;
- (id)userNameForKey:(id)arg1 inDictionaryElementDefinitionNamed:(id)arg2;
- (id)elementDefinitionNameForPlist:(id)arg1 inPlistModel:(id)arg2;
- (BOOL)appliesToFileWithName:(id)arg1;
- (id)userNameForElementDefinitionNamed:(id)arg1;
- (id)definitionNamed:(id)arg1;
- (id)parentDefinitionForDefinitionNamed:(id)arg1;
@property(readonly) NSString *identifier;
@property(readonly) NSString *name;
- (id)initWithExtension:(id)arg1;

@end

@interface DVTPlistTableColumn : NSTableColumn
{
}

- (void)setWidth:(double)arg1;

@end

@interface DVTPlistTextFieldCell : NSTextFieldCell
{
    BOOL _showsStatusItems;
    NSArray *_statusCategoryNames;
    NSDictionary *_statusCellsByCategoryName;
}

@property(copy) NSArray *statusCategoryNames; // @synthesize statusCategoryNames=_statusCategoryNames;
@property BOOL showsStatusItems; // @synthesize showsStatusItems=_showsStatusItems;
- (void)selectWithFrame:(struct CGRect)arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 start:(long long)arg5 length:(long long)arg6;
- (void)editWithFrame:(struct CGRect)arg1 inView:(id)arg2 editor:(id)arg3 delegate:(id)arg4 event:(id)arg5;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (unsigned long long)hitTestForEvent:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3;
- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (id)accessibilityHitTest:(struct CGPoint)arg1;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)_createStatusItemProxyItemsForRowAtPoint:(struct CGPoint)arg1;
- (void)drawStatusWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (struct CGRect)textFieldRectForBounds:(struct CGRect)arg1;
- (struct CGRect)statusRectForBounds:(struct CGRect)arg1;
- (id)statusItemCellsForCategory:(id)arg1;
- (void)setStatusItemCells:(id)arg1 forCategory:(id)arg2;
- (id)_statusCellsByCategoryName;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface DVTPlistTitledPopupCell : DVTPlistPopupCell
{
    NSString *plistTitle;
}

@property(copy) NSString *plistTitle; // @synthesize plistTitle;
- (BOOL)pullsDown;
- (struct CGRect)drawTitle:(id)arg1 withFrame:(struct CGRect)arg2 inView:(id)arg3;
- (id)copyWithZone:(struct _NSZone *)arg1;

@end

@interface DVTPlistViewController : DVTViewController <DVTPlistViewControllerProtocol, DVTPlistOutlineViewDelegate, NSOutlineViewDataSource, NSUserInterfaceValidations>
{
    NSScrollView *scrollView;
    DVTPlistOutlineView *outlineView;
    NSTableHeaderView *headerView;
    NSPopUpButtonCell *_classPopUpCell;
    DVTPlistDataFormatter *_dataFormatter;
    NSDateFormatter *_dateFormatter;
    DVTNonLossyASCIIFormatter *_nonLossyASCIIFormatter;
    DVTPlistComboBoxCell *_comboBoxCell;
    DVTPlistTitledPopupCell *_popupCell;
    NSButtonCell *_checkBoxCell;
    NSDictionary *_statusButtonCells;
    DVTPlistTextFieldCell *_textCell;
    NSArray *_foundLocations;
    DVTPlistSelection *_currentFoundLocation;
    DVTPlistNode *_selectedNode;
    NSArray *draggedItems;
    id _editingObj;
    id _editingValue;
    NSDocument /*<DVTPlistDocumentProtocol>*/ *document;
    NSMutableSet *_expandedItems;
    struct __pecFlags {
        unsigned int showsRootPlist:1;
        unsigned int initedOutlineView:1;
        unsigned int nonLossyASCIIStrings:1;
        unsigned int editRawKeysAndValues:1;
        unsigned int reserved:28;
    } _pecFlags;
    BOOL _editingError;
    BOOL _duplicateKeySheetIsActive;
    BOOL _restoringState;
}

@property(retain) DVTPlistNode *selectedNode; // @synthesize selectedNode=_selectedNode;
- (void)invalidate;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (id)createPlistTypeMenuWithTitle:(id)arg1;
- (BOOL)outlineView:(id)arg1 acceptDrop:(id)arg2 item:(id)arg3 childIndex:(long long)arg4;
- (unsigned long long)outlineView:(id)arg1 validateDrop:(id)arg2 proposedItem:(id)arg3 proposedChildIndex:(long long)arg4;
- (BOOL)outlineView:(id)arg1 writeItems:(id)arg2 toPasteboard:(id)arg3;
- (void)selectDocumentLocations:(id)arg1;
- (struct _NSRange)foundRangeForItem:(id)arg1 inColumn:(id)arg2;
- (void)setCurrentFoundLocation:(id)arg1;
- (void)setFoundLocations:(id)arg1;
- (struct CGRect)currentSelectionFrame;
- (void)setSelection:(id)arg1 edit:(BOOL)arg2;
- (id)currentSelection;
- (BOOL)commitEdits;
- (BOOL)editInProgress;
- (void)revealNode:(id)arg1;
- (void)expandParent:(id)arg1;
- (void)textDidEndEditingColumn:(long long)arg1 row:(long long)arg2 withMovement:(long long)arg3;
- (void)controlTextDidEndEditing:(id)arg1;
- (void)restoreExpandedItemKeyPaths:(id)arg1;
- (id)expandedItemKeyPaths;
- (void)outlineViewItemDidCollapse:(id)arg1;
- (void)outlineViewItemDidExpand:(id)arg1;
- (void)outlineViewSelectionDidChange:(id)arg1;
- (void)outlineViewColumnDidResize:(id)arg1;
- (void)_outlineViewFrameChanged:(id)arg1;
- (BOOL)control:(id)arg1 textShouldEndEditing:(id)arg2;
- (void)invalidEntryAlertDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
- (BOOL)control:(id)arg1 didFailToFormatString:(id)arg2 errorDescription:(id)arg3;
- (id)outlineView:(id)arg1 dataCellForTableColumn:(id)arg2 item:(id)arg3;
- (void)outlineView:(id)arg1 willDisplayCell:(id)arg2 forTableColumn:(id)arg3 item:(id)arg4;
- (BOOL)outlineView:(id)arg1 shouldEditTableColumn:(id)arg2 item:(id)arg3;
- (void)outlineView:(id)arg1 setObjectValue:(id)arg2 forTableColumn:(id)arg3 byItem:(id)arg4;
- (void)sameNameAlertDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
- (void)delayedEditItem:(id)arg1;
- (void)delayedDeletePlist:(id)arg1;
- (id)outlineView:(id)arg1 objectValueForTableColumn:(id)arg2 byItem:(id)arg3;
- (BOOL)outlineView:(id)arg1 isItemExpandable:(id)arg2;
- (id)outlineView:(id)arg1 child:(long long)arg2 ofItem:(id)arg3;
- (long long)outlineView:(id)arg1 numberOfChildrenOfItem:(id)arg2;
- (void)setPlistTypeDate:(id)arg1;
- (void)setPlistTypeData:(id)arg1;
- (void)setPlistTypeBoolean:(id)arg1;
- (void)setPlistTypeNumber:(id)arg1;
- (void)setPlistTypeString:(id)arg1;
- (void)setPlistTypeDictionary:(id)arg1;
- (void)setPlistTypeArray:(id)arg1;
- (void)setPlistClass:(Class)arg1;
- (void)shiftRowRight:(id)arg1;
- (void)shiftRowLeft:(id)arg1;
- (void)deleteAction:(id)arg1;
- (void)addAction:(id)arg1;
- (void)editNewItem:(id)arg1;
- (void)DVTPlist_unfoldAll:(id)arg1;
- (void)DVTPlist_unfold:(id)arg1;
- (void)DVTPlist_foldAll:(id)arg1;
- (void)DVTPlist_fold:(id)arg1;
- (void)centerSelectionInVisibleArea:(id)arg1;
- (void)cancel:(id)arg1;
- (void)cut:(id)arg1;
- (void)delete:(id)arg1;
- (void)paste:(id)arg1;
- (void)pasteItem:(id)arg1 withKey:(id)arg2 intoParent:(id)arg3 atIndex:(long long)arg4;
- (void)copy:(id)arg1;
- (void)redo:(id)arg1;
- (void)undo:(id)arg1;
- (BOOL)outlineView:(id)arg1 handleTabKey:(unsigned short)arg2;
- (BOOL)outlineView:(id)arg1 handleReturnKey:(unsigned short)arg2;
- (void)toggleEditRawKeysAndValues:(id)arg1;
- (void)toggleShowsStringsAsNonLossyASCII:(id)arg1;
@property BOOL editRawKeysAndValues;
@property BOOL showsStringsAsNonLossyASCII;
@property BOOL showsRootPlist;
- (void)expandPlist:(id)arg1;
- (void)propertyListChanged:(id)arg1;
- (id)model;
- (id)draggedItems;
- (id)outlineView;
- (id)scrollView;
@property NSDocument /*<DVTPlistDocumentProtocol>*/ *document;
- (void)loadView;
- (id)statusButtonCells;
- (id)init;

@end

@interface DVTPlistXMLParser : NSObject <NSXMLParserDelegate>
{
    DVTPlistNode *rootNode;
    DVTPlistNode *currentNode;
    NSString *currentKey;
    NSString *currentString;
    NSXMLParser *parser;
    BOOL interestedInCharacters;
}

- (void)parser:(id)arg1 foundCharacters:(id)arg2;
- (void)parser:(id)arg1 didEndElement:(id)arg2 namespaceURI:(id)arg3 qualifiedName:(id)arg4;
- (void)parser:(id)arg1 didStartElement:(id)arg2 namespaceURI:(id)arg3 qualifiedName:(id)arg4 attributes:(id)arg5;
- (void)addToParent:(id)arg1;
- (id)error;
- (id)parse;
- (id)initWithData:(id)arg1;

@end

@interface DVTPreferenceSetManager : NSObject
{
    Class _preferenceSetClass;
    NSArray *_builtInPreferenceSets;
    NSMutableSet *_specifierNamesInDataStore;
    NSMutableArray *_userPreferenceSets;
    NSMutableArray *_availablePreferenceSets;
    id <DVTPreferenceSet> _currentPreferenceSet;
    DVTMapTable *_preferenceSetObserverTokens;
    DVTDelayedValidator *_autosavePreferenceSetsValidator;
}

+ (void)initialize;
@property(readonly) Class preferenceSetClass; // @synthesize preferenceSetClass=_preferenceSetClass;
- (id)description;
- (void)_writePreferenceSetsIfNeeded;
- (void)_applicationWillTerminate:(id)arg1;
- (void)_scheduleAutoSavePreferenceSets;
- (void)_removeObserversForPreferenceSet:(id)arg1;
- (void)_addObserversForPreferenceSet:(id)arg1;
- (void)deletePreferenceSet:(id)arg1 completionQueue:(id)arg2 completionBlock:(id)arg3;
- (id)duplicatePreferenceSet:(id)arg1 error:(id *)arg2;
- (void)renamePreferenceSet:(id)arg1 toName:(id)arg2 completionQueue:(id)arg3 completionBlock:(id)arg4;
- (id)editableUserPreferenceSetForPreferenceSet:(id)arg1;
- (id)_createUserPreferenceSetWithBaseName:(id)arg1 basedOn:(id)arg2;
- (id)_nameForDuplicateOfPreferenceSet:(id)arg1;
- (id)_availablePreferenceSetWithLocalizedName:(id)arg1;
@property(readonly) id <DVTCustomDataStoring> userPreferenceSetsDataStore;
- (id)preferenceSetForName:(id)arg1;
@property(readonly) NSArray *builtInPreferenceSets;
@property(retain) id <DVTPreferenceSet> currentPreferenceSet;
- (void)_rebuildAvailableandUserSetsList;
- (id)initWithPreferenceSetClass:(Class)arg1;

// Remaining properties
@property(copy) NSArray *availablePreferenceSets; // @dynamic availablePreferenceSets;
@property(readonly) NSMutableArray *mutableAvailablePreferenceSets; // @dynamic mutableAvailablePreferenceSets;
@property(readonly) NSMutableArray *mutableUserPreferenceSets; // @dynamic mutableUserPreferenceSets;
@property(copy) NSArray *userPreferenceSets; // @dynamic userPreferenceSets;

@end

@interface DVTProcessInformation (DVTProcessInformationAdditions)
@property(readonly) BOOL isApplication;
@property(readonly) NSImage *applicationImage;
@end

@interface DVTQuickLookLibraryDetailController : DVTLibraryDetailController
{
    /*QLPreviewView * */ id _previewView;
    struct {
        unsigned int delegateImplementsShouldScaleToFit:1;
        unsigned int _reserved:7;
    } _flags;
}

- (void)sizeToFitSuggestedSize:(struct CGSize)arg1 forAsset:(id)arg2;
- (void)refreshWithAsset:(id)arg1;
- (void)setDelegate:(id)arg1;

@end

@interface DVTQuickLookLibraryDetailItem : NSObject /* <QLPreviewItem> */
{
    NSURL *_previewItemURL;
}

@property(readonly) NSURL *previewItemURL;
- (id)initWithPreviewItemURL:(id)arg1;

// Remaining properties
@property(readonly) id previewItemDisplayState;
@property(readonly) NSString *previewItemTitle;

@end

@interface DVTReplacementView : DVTLayoutView_ML <DVTEditor>
{
    Class _controllerClass;
    NSString *_controllerExtensionIdentifier;
    DVTExtension *_controllerExtension;
    DVTViewController *_installedViewController;
    id _forwardedBindingInfo;
    id <DVTReplacementViewDelegate> _delegate;
    int _horizontalContentViewResizingMode;
    int _verticalContentViewResizingMode;
    struct {
        unsigned int _needToReloadSubview:1;
        unsigned int _shouldNotifyInstalledViewControllerObservers:1;
        unsigned int _delegate_willInstallViewController:1;
        unsigned int _delegate_didInstallViewController:1;
        unsigned int _delegate_willCloseViewController:1;
        unsigned int _delegate_willDisplayInRect:1;
        unsigned int _reserved:26;
    } _DVTReplacementViewFlags;
    BOOL _isGrouped;
}

+ (void)initialize;
@property BOOL isGrouped; // @synthesize isGrouped=_isGrouped;
@property(nonatomic) Class controllerClass; // @synthesize controllerClass=_controllerClass;
@property(nonatomic) int verticalContentViewResizingMode; // @synthesize verticalContentViewResizingMode=_verticalContentViewResizingMode;
@property(nonatomic) int horizontalContentViewResizingMode; // @synthesize horizontalContentViewResizingMode=_horizontalContentViewResizingMode;
@property(retain, nonatomic) id <DVTReplacementViewDelegate> delegate; // @synthesize delegate=_delegate;
- (void)discardEditing;
- (BOOL)commitEditingForAction:(int)arg1 errors:(id)arg2;
- (void)updateBoundControllerExtensionIdentifier;
- (void)updateBoundControllerClass;
@property(copy) NSString *controllerExtensionIdentifier;
- (void)_clearCurrentController;
- (void)_tearDownBinding:(id)arg1;
- (void)_forwardBinding:(id)arg1 toObject:(id)arg2 withKeyPath:(id)arg3 options:(id)arg4;
- (void)_tearDownBindings;
- (void)_forwardBindings;
- (void)layoutBottomUp;
- (void)layoutTopDown;
@property(retain) DVTViewController *installedViewController;
- (void)_tearDownViewController;
- (void)_setupViewController;
- (void)_configureExtension;
- (id)infoForBinding:(id)arg1;
- (void)unbind:(id)arg1;
- (void)bind:(id)arg1 toObject:(id)arg2 withKeyPath:(id)arg3 options:(id)arg4;
- (id)_forwardedBindingInfo;
- (void)_clearInfoForBinding:(id)arg1;
- (void)_recordInfoForBinding:(id)arg1 toObject:(id)arg2 keyPath:(id)arg3 options:(id)arg4;
- (void)_recursiveDisplayAllDirtyWithLockFocus:(BOOL)arg1 visRect:(struct CGRect)arg2;
- (id)exposedBindings;
- (void)_invalidateLayoutBecauseOfSubviewFrameChange:(id)arg1;
- (void)willRemoveSubview:(id)arg1;
- (void)didAddSubview:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)awakeFromNib;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)accessibilityAttributeValue:(id)arg1;
- (BOOL)accessibilityIsIgnored;

@end

@interface DVTResponderErrorSheetContext : NSObject
{
    id outerCompletionDelegate;
    SEL outerCompletionSelector;
    void *outerContext;
    NSError *error;
}

@end

@interface DVTReverseDragImageStateTransitionPrototype : DVTDraggedImageStateTransitionView
{
}

- (void)setProgress:(float)arg1;

@end

@interface DVTRolloverImageButton : DVTRolloverTrackingButton
{
    NSImage *_rolloverImage;
}

- (BOOL)accessibilityIsIgnored;
- (void)drawRect:(struct CGRect)arg1;
- (id)rolloverImage;
- (void)setRolloverImage:(id)arg1;
- (void)awakeFromNib;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_setAttributes;

@end

@interface DVTScaleInWindowAnimator : NSObject
{
    NSWindow *_windowToScaleIn;
    struct CGPoint _pointToScaleFrom;
    double _finalAlpha;
    NSWindow *_animationWindow;
}

+ (void)scaleInWindow:(id)arg1 fromPoint:(struct CGPoint)arg2 finalAlpha:(double)arg3;
+ (void)scaleInWindow:(id)arg1 fromPoint:(struct CGPoint)arg2;
- (void)animationDidStop:(id)arg1 finished:(BOOL)arg2;
- (id)_createFadeInAnimation;
- (id)_createScaleInAnimation;
- (id)_createScaleInAndFadeInAnimation;
- (void)_scaleInWindow;
- (struct CATransform3D)_transformForScale:(double)arg1;
- (id)_initWithWindow:(id)arg1 point:(struct CGPoint)arg2 finalAlpha:(double)arg3;

@end

@interface DVTScopeBarController : DVTViewController
{
    NSButton *_dismissButton;
    DVTScopeBarView *_scopeBarView;
    DVTControllerContentView *_contentView;
    DVTViewController<DVTScopeBarContentController> *_contentViewController;
    BOOL _showsDismissButton;
}

@property(nonatomic) BOOL showsDismissButton; // @synthesize showsDismissButton=_showsDismissButton;
@property(readonly) DVTViewController<DVTScopeBarContentController> *contentViewController; // @synthesize contentViewController=_contentViewController;
- (void)_adjustSubviews;
- (void)dismissButtonAction:(id)arg1;
@property(readonly) double preferredScopeBarHeight;
@property int borderSides;
- (void)loadView;
- (id)initWithContentViewController:(id)arg1;
- (id)initUsingDefaultNib;

@end

@interface DVTScopeBarView : DVTBorderedView
{
}

- (void)removeView:(id)arg1;
- (void)addViewOnRight:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface DVTScopeBarsManager : NSObject
{
    id /*<DVTScopeBarHost>*/ _host;
    NSMutableArray *_scopeBarControllers;
    DVTMapTable *_contentHeightObservers;
    NSViewAnimation *_currentAnimation;
    int _borderSides;
}

@property(nonatomic) int borderSides; // @synthesize borderSides=_borderSides;
@property(readonly) NSArray *scopeBarControllers; // @synthesize scopeBarControllers=_scopeBarControllers;
- (void)_adjustViewsForHeightOffset:(double)arg1 animate:(BOOL)arg2 extraAnimations:(id)arg3;
- (BOOL)dismissLastScopeBar;
- (void)removeAllScopeBarsAnimate:(BOOL)arg1;
- (void)removeScopeBar:(id)arg1 animate:(BOOL)arg2;
- (void)insertScopeBar:(id)arg1 atIndex:(unsigned long long)arg2 animate:(BOOL)arg3;
- (id)initWithHost:(id)arg1;
- (id)init;

@end

@interface DVTScopeBarsManagerAnimation : NSViewAnimation
{
    double _baseViewPreviousHeight;
    NSScrollView *_scrollView;
    NSView *_baseView;
}

@property(retain, nonatomic) NSView *baseView; // @synthesize baseView=_baseView;
@property(retain) NSScrollView *scrollView; // @synthesize scrollView=_scrollView;

@end

@interface DVTSourceTextView : DVTCompletingTextView <NSAnimationDelegate, NSLayoutManagerDelegate>
{
    unsigned long long _oldFocusLocation;
    NSAnimation *_blockAnimation;
    struct CGPoint _lastMouseMovedLocation;
    struct _NSRange _foldingHoverRange;
    DVTTextAnnotationIndicatorAnimation *_annotationIndicatorAnimation;
    NSArray *_temporaryLinkRanges;
    unsigned long long _temporaryLinkHoverModifierFlags;
    unsigned long long _temporaryLinkHoverAltModifierFlags;
    NSArray *_clickedTemporaryLinkRanges;
    NSMutableArray *_clickedLinkProgressIndicators;
    struct _NSRange _ghostStringRange;
    NSTimer *_autoHighlightTokenTimer;
    id <DVTObservingToken> _autoHighlightTextCompletionObserver;
    DVTMutableRangeArray *_autoHighlightTokenRanges;
    NSTimer *_autoHighlightTokenMenuTimer;
    struct _NSRange _autoHighlightTokenMenuRange;
    double _autoHighlightTokenMenuAnimationDuration;
    NSTimer *_autoHighlightTokenMenuAnimationTimer;
    double _autoHighlightTokenMenuAnimationStartTime;
    NSWindow *_autoHighlightTokenWindow;
    DVTMutableRangeArray *_tokenizedEditingTokenRanges;
    unsigned long long _tokenizedEditingEditedTokenIndex;
    unsigned long long _tokenizedEditingDeferedOffset;
    struct _NSRange _tokenizedEditingSelectionRange;
    NSColor *_tokenizedEditingTokenColors[4];
    NSArray *_foundLocations;
    DVTTextDocumentLocation *_currentFoundLocation;
    NSMutableArray *_visualizations;
    unsigned long long _pageGuideColumn;
    DVTTextPageGuideVisualization *_pageGuideVisualization;
    unsigned long long _locationOfAutoOpenedCloseBracket;
    unsigned long long _locationOfOpenBracePendingClose;
    NSTimer *_scrollbarMarkerUpdateTimer;
    DVTAnnotationManager *_annotationManager;
    DVTHashTable *_visibleViewAnnotations;
    NSView *_staticVisualizationView;
    int _findResultStyle;
    struct {
        unsigned int dDidFinishAnimatingScroll:1;
        unsigned int dDidScroll:1;
        unsigned int dColoringContext:1;
        unsigned int delegateRespondsToWillReturnPrintJobTitle:1;
        unsigned int temporaryLinkIsAlternate:1;
        unsigned int updatingInsertionPoint:1;
        unsigned int wasPostsFrameChangedNotifications:1;
        unsigned int reserved:1;
    } _sFlags;
    BOOL _isDoingBatchEdit;
    BOOL _allowsCodeFolding;
    BOOL _showingCodeFocus;
    BOOL _lastMouseEventWasClick;
    BOOL _autoHighlightTokens;
    BOOL _tokenizedEditingEnabled;
    BOOL _animatesCurrentScroll;
    BOOL _disableUpdatingInsertionPointCount;
    BOOL _currentlyAutoCompletingBracket;
    BOOL _addedSpaceWhenAutoOpeningCloseBracket;
    BOOL _wrapsLines;
    BOOL _postsLayoutManagerNotifications;
}

+ (id)autoCompleteChars;
+ (id)foldingLogAspect;
+ (id)drawingLogAspect;
+ (void)initialize;
@property BOOL postsLayoutManagerNotifications; // @synthesize postsLayoutManagerNotifications=_postsLayoutManagerNotifications;
@property BOOL addedSpaceWhenAutoOpeningCloseBracket; // @synthesize addedSpaceWhenAutoOpeningCloseBracket=_addedSpaceWhenAutoOpeningCloseBracket;
@property unsigned long long locationOfAutoOpenedCloseBracket; // @synthesize locationOfAutoOpenedCloseBracket=_locationOfAutoOpenedCloseBracket;
@property(nonatomic, getter=isTokenizedEditingEnabled) BOOL tokenizedEditingEnabled; // @synthesize tokenizedEditingEnabled=_tokenizedEditingEnabled;
@property struct _NSRange tokenizedEditingSelectionRange; // @synthesize tokenizedEditingSelectionRange=_tokenizedEditingSelectionRange;
@property(readonly) NSArray *tokenizedEditingTokenRanges; // @synthesize tokenizedEditingTokenRanges=_tokenizedEditingTokenRanges;
@property(nonatomic) BOOL autoHighlightTokens; // @synthesize autoHighlightTokens=_autoHighlightTokens;
@property int findResultStyle; // @synthesize findResultStyle=_findResultStyle;
@property(nonatomic) unsigned long long pageGuideColumn; // @synthesize pageGuideColumn=_pageGuideColumn;
@property(readonly) NSArray *visualizations; // @synthesize visualizations=_visualizations;
@property(retain) DVTAnnotationManager *annotationManager; // @synthesize annotationManager=_annotationManager;
@property(nonatomic) struct _NSRange ghostStringRange; // @synthesize ghostStringRange=_ghostStringRange;
@property unsigned long long temporaryLinkHoverAltModifierFlags; // @synthesize temporaryLinkHoverAltModifierFlags=_temporaryLinkHoverAltModifierFlags;
@property unsigned long long temporaryLinkHoverModifierFlags; // @synthesize temporaryLinkHoverModifierFlags=_temporaryLinkHoverModifierFlags;
@property(nonatomic) BOOL wrapsLines; // @synthesize wrapsLines=_wrapsLines;
- (void)_reloadAnnotationProviders;
- (void)_unloadAnnotationProviders;
- (void)dvt_viewDidEndLiveAnimation;
- (void)dvt_viewWillBeginLiveAnimation;
- (void)_updateLayoutEstimation;
- (void)centerOnRange:(struct _NSRange)arg1;
- (void)drawFoundLocationsInRange:(struct _NSRange)arg1;
- (id)_findResultUnderlineColor;
- (id)_findResultCurrentUnderlineColor;
- (id)_findResultGradient;
- (id)_findResultCurrentGradient;
- (void)setCurrentFoundLocation:(id)arg1;
- (void)setFoundLocations:(id)arg1;
- (void)unfoldAllComments:(id)arg1;
- (void)foldAllComments:(id)arg1;
- (void)unfoldAllMethods:(id)arg1;
- (void)foldAllMethods:(id)arg1;
- (void)unfoldRecursive:(id)arg1;
- (void)unfold:(id)arg1;
- (void)unfoldAll:(id)arg1;
- (void)foldSelection:(id)arg1;
- (void)foldRecursive:(id)arg1;
- (void)fold:(id)arg1;
- (BOOL)writeSelectionToPasteboard:(id)arg1 type:(id)arg2;
- (BOOL)writeRTFSelectionToPasteboard:(id)arg1;
- (id)writablePasteboardTypes;
- (void)balance:(id)arg1;
- (void)shiftLeft:(id)arg1;
- (void)shiftRight:(id)arg1;
- (void)_indentSelectionByNumberOfLevels:(long long)arg1;
- (struct _NSRange)_indentInsertedTextIfNecessaryAtRange:(struct _NSRange)arg1;
- (void)indentSelectionIfIndentable:(id)arg1;
- (void)indentSelection:(id)arg1;
- (void)commentAndUncommentCurrentLines:(id)arg1;
- (void)moveCurrentLineDown:(id)arg1;
- (void)moveCurrentLineUp:(id)arg1;
- (void)_didChangeSelection:(id)arg1;
- (void)PBX_toggleShowsInvisibleCharacters:(id)arg1;
- (void)PBX_toggleShowsControlCharacters:(id)arg1;
- (void)useSelectionForReplace:(id)arg1;
- (BOOL)validateMenuItem:(id)arg1;
- (BOOL)validateUserInterfaceItem:(id)arg1;
- (void)layoutManager:(id)arg1 didCompleteLayoutForTextContainer:(id)arg2 atEnd:(BOOL)arg3;
- (id)layoutManager:(id)arg1 shouldUseTemporaryAttributes:(id)arg2 forDrawingToScreen:(BOOL)arg3 atCharacterIndex:(unsigned long long)arg4 effectiveRange:(struct _NSRange *)arg5;
- (BOOL)isEditable;
- (void)moveDown:(id)arg1;
- (void)moveUp:(id)arg1;
- (BOOL)_couldHaveBlinkTimer;
- (BOOL)_shouldHaveBlinkTimer;
- (void)_centeredScrollRectToVisible:(struct CGRect)arg1 forceCenter:(BOOL)arg2;
- (void)scrollViewFrameChanged;
- (void)viewWillDraw;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)breakUndoCoalescing;
- (void)didChangeText;
- (void)scrollRangeToVisible:(struct _NSRange)arg1 animate:(BOOL)arg2;
- (void)flagsChanged:(id)arg1;
- (void)selectPreviousToken:(id)arg1;
- (void)selectNextToken:(id)arg1;
- (void)toggleTokenizedEditing:(id)arg1;
@property(retain) NSColor *tokenizedEditingSelectedTokenBackgroundColor; // @dynamic tokenizedEditingSelectedTokenBackgroundColor;
@property(retain) NSColor *tokenizedEditingSelectedTokenBorderColor; // @dynamic tokenizedEditingSelectedTokenBorderColor;
@property(retain) NSColor *tokenizedEditingTokenBackgroundColor; // @dynamic tokenizedEditingTokenBackgroundColor;
@property(retain) NSColor *tokenizedEditingTokenBorderColor; // @dynamic tokenizedEditingTokenBorderColor;
- (id)tokenizedEditingTokenPathsForCharacterRange:(struct _NSRange)arg1;
- (id)tokenPathsForCharacterRange:(struct _NSRange)arg1 displayOnly:(BOOL)arg2;
- (void)textStorage:(id)arg1 didEditRange:(struct _NSRange)arg2 changeInLength:(long long)arg3;
- (void)textStorage:(id)arg1 willEditRange:(struct _NSRange)arg2 changeInLength:(long long)arg3;
- (void)textStorageDidChangeLineNumbers:(id)arg1;
- (void)updateTokenizedEditingRanges;
- (void)_scheduleAutoHighlightTokenTimerIfNeeded;
- (void)_autoHighlightTokenWithTimer:(id)arg1;
- (void)tokenizableItemsForItemAtRealRange:(struct _NSRange)arg1 completionBlock:(id)arg2;
- (void)_scheduleAutoHighlightTokenMenuTimerIfNeeded;
- (void)_showAutoHighlightTokenMenuWithTimer:(id)arg1;
- (id)_autoHighlightTokenWindowWithTokenRect:(struct CGRect)arg1;
- (void)_scheduleAutoHighlightTokenMenuAnimationTimerIfNeeded;
- (struct CGRect)_hitTestRectForAutoHighlightTokenWindow:(id)arg1;
- (struct CGRect)_autoHighlightTokenRectAtPoint:(struct CGPoint)arg1;
- (struct _NSRange)_autoHighlightTokenMenuRangeAtPoint:(struct CGPoint)arg1;
- (void)_animateAutoHighlightTokenMenuWithTimer:(id)arg1;
- (void)_popUpTokenMenu:(id)arg1;
- (id)_autoHighlightTokenMenu;
- (void)_clearAutoHighlightTokenMenu;
- (void)_clearDisplayForAutoHighlightTokens;
- (void)_displayAutoHighlightTokens;
- (void)removeStaticVisualizationView;
- (void)addStaticVisualizationView:(id)arg1;
- (void)removeVisualization:(id)arg1 fadeOut:(BOOL)arg2 completionBlock:(id)arg3;
- (void)addVisualization:(id)arg1 fadeIn:(BOOL)arg2 completionBlock:(id)arg3;
- (void)didInsertCompletionTextAtRange:(struct _NSRange)arg1;
- (BOOL)shouldAutoCompleteAtLocation:(unsigned long long)arg1;
- (BOOL)shouldSuppressTextCompletion;
- (id)contextForCompletionStrategiesAtWordStartLocation:(unsigned long long)arg1;
- (void)autoInsertCloseBrace;
- (void)deleteExpressionBackward:(id)arg1;
- (void)deleteExpressionForward:(id)arg1;
- (void)moveExpressionBackwardAndModifySelection:(id)arg1;
- (void)moveExpressionBackward:(id)arg1;
- (void)moveExpressionForwardAndModifySelection:(id)arg1;
- (void)moveExpressionForward:(id)arg1;
- (void)deleteSubWordBackward:(id)arg1;
- (void)deleteSubWordForward:(id)arg1;
- (void)moveSubWordBackwardAndModifySelection:(id)arg1;
- (void)moveSubWordForwardAndModifySelection:(id)arg1;
- (void)moveSubWordBackward:(id)arg1;
- (void)moveSubWordForward:(id)arg1;
- (void)deleteForward:(id)arg1;
- (void)deleteBackward:(id)arg1;
- (void)pasteAndPreserveFormatting:(id)arg1;
- (void)paste:(id)arg1;
- (void)_paste:(id)arg1 indent:(BOOL)arg2;
- (void)insertNewline:(id)arg1;
- (BOOL)handleInsertTab;
- (BOOL)handleSelectPreviousPlaceholder;
- (BOOL)handleSelectNextPlaceholder;
- (void)insertText:(id)arg1;
- (void)setFoldsFromString:(id)arg1;
- (id)foldString;
- (struct CGRect)frameForRange:(struct _NSRange)arg1 ignoreWhitespace:(BOOL)arg2;
- (struct _NSRange)visibleParagraphRange;
- (long long)_currentLineNumber;
- (struct _NSRange)rangeOfCenterLine;
- (void)doingBatchEdit:(BOOL)arg1;
- (void)rightMouseDown:(id)arg1;
- (void)rightMouseUp:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)scrollWheel:(id)arg1;
- (void)_clipViewAncestorDidScroll:(id)arg1;
- (void)_finishedAnimatingScroll;
- (void)_toolTipTimer;
- (void)mouseMoved:(id)arg1;
- (void)_mouseInside:(id)arg1;
- (void)removeFromSuperview;
- (void)viewDidMoveToWindow;
- (void)_updateScrollerMarkersWithAnnotations:(id)arg1 clearCurrent:(BOOL)arg2;
- (void)_refreshScrollerMarkers;
- (double)_markForLineNumber:(unsigned long long)arg1;
- (void)setUsesMarkedScrollbar:(BOOL)arg1;
- (id)attributedStringForCompletionPlaceholderCell:(id)arg1 atCharacterIndex:(unsigned long long)arg2 withDefaultAttributes:(id)arg3;
- (void)clickedOnCell:(id)arg1 inRect:(struct CGRect)arg2 atIndexInToken:(unsigned long long)arg3;
- (void)_didClickOnTemporaryLinkWithEvent:(id)arg1;
- (void)_updateTemporaryLinkUnderMouseForEvent:(id)arg1;
- (unsigned long long)_nonBlankCharIndexUnderMouse;
- (void)_clearClickedLinkProgressIndicators;
- (void)_adjustClickedLinkProgressIndicators;
- (void)_adjustClickedLinkProgressIndicator:(id)arg1 withRect:(struct CGRect)arg2;
- (void)_showClickedLinkProgressIndicators;
- (void)_invalidateClickedLinks;
- (id)_clickedLinkProgressIndicatorWithRect:(struct CGRect)arg1;
- (void)_clearTemporaryLinkRanges;
- (void)_setTemporaryLinkRanges:(id)arg1 isAlternate:(BOOL)arg2;
- (void)animation:(id)arg1 didReachProgressMark:(float)arg2;
- (void)animationDidEnd:(id)arg1;
- (void)animationDidStop:(id)arg1;
- (BOOL)animationShouldStart:(id)arg1;
- (void)stopBlockHighlighting;
- (void)startBlockHighlighting;
- (void)focusLocationMayHaveChanged:(id)arg1;
- (void)toggleCodeFocus:(id)arg1;
- (void)_drawViewBackgroundInRect:(struct CGRect)arg1;
- (void)_drawTokensInRect:(struct CGRect)arg1;
- (void)_drawCaretForTextAnnotationsInRect:(struct CGRect)arg1;
- (void)drawTextAnnotationsInRect:(struct CGRect)arg1;
- (long long)_drawRoundedBackgroundForItem:(id)arg1 dynamicItem:(id)arg2;
- (id)_roundedRect:(struct CGRect)arg1 withRadius:(double)arg2;
- (unsigned long long)_drawBlockBackground:(struct CGRect)arg1 atLocation:(unsigned long long)arg2 forItem:(id)arg3 dynamicItem:(id)arg4;
- (double)_grayLevelForDepth:(long long)arg1;
- (id)alternateColor;
- (void)setFoldingHoverRange:(struct _NSRange)arg1;
- (struct _NSRange)foldingHoverRange;
- (void)_loadColorsFromCurrentTheme;
- (void)_themeColorsChanged:(id)arg1;
- (id)currentTheme;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (unsigned long long)foldedCharacterIndexForPoint:(struct CGPoint)arg1;
- (void)setSelectedRanges:(id)arg1 affinity:(unsigned long long)arg2 stillSelecting:(BOOL)arg3;
- (void)setSelectedRange:(struct _NSRange)arg1;
- (void)contextMenu_toggleMessageBubbleShown:(id)arg1;
- (void)toggleMessageBubbleShown:(id)arg1;
- (void)_enumerateMessageBubbleAnnotationsInSelection:(id)arg1;
- (void)setAccessoryAnnotationWidth:(unsigned long long)arg1;
- (void)_updateAccessoryAnnotationViews;
- (void)_adjustSizeOfAccessoryAnnotation:(id)arg1;
- (void)showAnnotation:(id)arg1 animateIndicator:(BOOL)arg2;
- (void)_animateBubbleView:(id)arg1;
- (void)didRemoveAnnotations:(id)arg1;
- (void)didAddAnnotations:(id)arg1;
- (id)visibleAnnotationsForLineNumberRange:(struct _NSRange)arg1;
- (id)annotationForRepresentedObject:(id)arg1;
@property(readonly) NSArray *annotations;
- (void)setShowsFoldingSidebar:(BOOL)arg1;
- (BOOL)showsFoldingSidebar;
- (void)getParagraphRect:(struct CGRect *)arg1 firstLineRect:(struct CGRect *)arg2 forLineRange:(struct _NSRange)arg3 ensureLayout:(BOOL)arg4;
- (struct _NSRange)lineNumberRangeForBoundingRect:(struct CGRect)arg1;
- (unsigned long long)lineNumberForPoint:(struct CGPoint)arg1;
- (id)printJobTitle;
@property(readonly) NSDictionary *syntaxColoringContext;
- (id)language;
- (BOOL)allowsCodeFolding;
- (void)setAllowsCodeFolding:(BOOL)arg1;
- (void)setTextStorage:(id)arg1;
- (void)setTextStorage:(id)arg1 keepOldLayout:(BOOL)arg2;
- (id)textStorage;
@property(retain) id <DVTSourceTextViewDelegate> delegate; // @dynamic delegate;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1 textContainer:(id)arg2;
- (id)init;
- (void)_commonInitDVTSourceTextView;
- (BOOL)_removeMenusNotInWhiteList:(id)arg1 fromMenu:(id)arg2;
- (id)menuForEvent:(id)arg1;
- (double)fmc_maxY;
- (double)fmc_startOfLine:(long long)arg1;
- (long long)fmc_lineNumberForPosition:(double)arg1;
- (BOOL)shouldIndentPastedText:(id)arg1;
- (void)indentUserChangeBy:(long long)arg1;
- (void)viewDidEndLiveResize;
- (void)viewWillStartLiveResize;
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;
- (BOOL)shouldChangeTextInRanges:(id)arg1 replacementStrings:(id)arg2;
- (BOOL)scrollRectToVisible:(struct CGRect)arg1;
- (void)scrollPoint:(struct CGPoint)arg1;
- (void)updateInsertionPointStateAndRestartTimer:(BOOL)arg1;
- (void)scrollRangeToVisible:(struct _NSRange)arg1;
- (void)resignKeyWindow;
- (BOOL)resignFirstResponder;
- (void)_invalidateDisplayForViewStatusChange;
- (void)_invalidateAllRevealovers;

@end

@interface DVTScriptSourceTextView : DVTSourceTextView
{
    DVTTextSidebarView *_sidebarView;
    BOOL _showingPlaceholder;
}

+ (id)placeholder;
@property(readonly, getter=isShowingPlaceholder) BOOL showingPlaceholder; // @synthesize showingPlaceholder=_showingPlaceholder;
@property(readonly) unsigned long long lineCount;
- (BOOL)becomeFirstResponder;
- (void)showPlaceholder;
- (void)installSidebarViewIfNeeded;
@property(readonly) DVTTextSidebarView *sidebarView;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1 textContainer:(id)arg2;
- (void)_commonInitDVTScriptSourceTextView;

@end

@interface DVTSearchField : NSSearchField
{
    id _searchMenuBlock;
    NSNumber *_trackingTag;
    NSProgressIndicator *_progressIndicator;
    long long _progress;
    BOOL _hidesProgress;
}

+ (void)initialize;
+ (Class)cellClass;
@property(nonatomic) BOOL hidesProgress; // @synthesize hidesProgress=_hidesProgress;
@property(readonly) NSProgressIndicator *progressIndicator; // @synthesize progressIndicator=_progressIndicator;
@property(copy, nonatomic) id searchMenuBlock; // @synthesize searchMenuBlock=_searchMenuBlock;
- (void)mouseExited:(id)arg1;
- (void)mouseEntered:(id)arg1;
@property long long progress;
- (void)_updateStateForProgress:(long long)arg1;
- (void)updateBoundProgress;
- (void)viewDidEndLiveResize;
- (void)viewDidMoveToWindow;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)_resetTracking;
- (void)_clearTrackingIfNeeded;
- (BOOL)textView:(id)arg1 doCommandBySelector:(SEL)arg2;
@property(readonly) DVTSearchFieldCell *cell;
@property(readonly) NSButtonCell *cancelButtonCell;
@property(readonly) NSButtonCell *searchButtonCell;
- (void)dvt_searchField_setup;
- (id)initWithFrame:(struct CGRect)arg1;
- (id)initWithCoder:(id)arg1;
- (id)dvtExtraBindings;

@end

@interface DVTSearchFieldCell : NSSearchFieldCell
{
    NSProgressIndicator *_progressIndicator;
    BOOL _showsProgress;
}

@property BOOL showsProgress; // @synthesize showsProgress=_showsProgress;
@property(retain) NSProgressIndicator *progressIndicator; // @synthesize progressIndicator=_progressIndicator;
- (struct CGRect)searchButtonRectForBounds:(struct CGRect)arg1;
- (struct CGRect)cancelButtonRectForBounds:(struct CGRect)arg1;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3 untilMouseUp:(BOOL)arg4;
- (void)showSearchMenu;
- (struct CGRect)searchTextRectForBounds:(struct CGRect)arg1;

@end

@interface DVTSegmentedControl : NSSegmentedControl
{
}

+ (id)toolbarSegmentedControlWithImages:(id)arg1 trackingMode:(unsigned long long)arg2;
- (void)applyDVTStyleWithTrackingMode:(unsigned long long)arg1;
@property BOOL useRadioDrawingStyle;
@property BOOL useMenuDelay;

@end

@interface DVTSharedFindState : NSObject
{
    NSString *_findString;
    NSString *_replaceString;
}

+ (id)sharedFindState;
+ (void)_setFindPasteboardStringValue:(id)arg1;
+ (id)_findPasteboardStringValue;
@property(copy) NSString *replaceString;
@property(copy) NSString *findString;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)dealloc;
- (id)initWithFindString:(id)arg1;

@end

@interface DVTSimpleCrossfadeDragImageStateTransition : DVTDraggedImageStateTransitionView
{
}

- (void)drawRect:(struct CGRect)arg1;
- (void)setProgress:(float)arg1;
- (struct CGSize)idealFrameSize;
- (struct CGPoint)toAnchor;
- (struct CGPoint)fromAnchor;
- (id)toImage;
- (id)fromImage;
- (id)initWithFromState:(id)arg1 andToState:(id)arg2;

@end

@interface DVTSimpleDraggedImageState : DVTDraggedImageState
{
    NSImage *_image;
}

- (id)image;
- (id)initWithImage:(id)arg1;

@end

@interface DVTSliceTextView : DVTSourceTextView
{
}

- (void)_sliceTextViewCommonInit;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (id)initWithFrame:(struct CGRect)arg1 textContainer:(id)arg2;
- (id)enclosingScrollView;

@end

@interface DVTSlidingAnimation : NSObject
{
    id _delegate;
    NSMapTable *_views;
    BOOL _sliding;
    BOOL _paused;
}

+ (id)_runLoopModesForAnimation;
- (void)resume;
- (void)pause;
- (BOOL)isSliding;
- (void)setDelegate:(id)arg1;
- (void)stop;
- (void)stopView:(id)arg1;
- (struct CGRect)destinationForView:(id)arg1;
- (void)sendViewToDestination:(id)arg1;
- (void)setDestinationForView:(id)arg1 to:(struct CGRect)arg2 duration:(double)arg3;
- (void)showNextFrame;
- (void)updateTimer;
- (void)updateViewPosition:(id)arg1 forTime:(double)arg2;
- (id)init;

@end

@interface DVTSlidingViewsBar : DVTBarBackground
{
    DVTClippedTabsIndicator *_clipIndicator;
    NSMutableArray *_buttons;
    unsigned long long _dropIndex;
    unsigned long long _dragSourceIndex;
    double _draggedItemWidth;
    DVTClippedTabsIndicator *_rightClipIndicator;
    DVTSlidingAnimation *_animation;
}

- (void)viewWillBeginDragging:(id)arg1;
- (id)viewPinnedToOverflowIndicator;
- (void)moveSlidingViewToCurrentDropIndex:(id)arg1;
- (BOOL)isSliding;
- (void)draggingEnded:(id)arg1;
- (unsigned long long)draggingUpdated:(id)arg1;
- (void)draggingExited:(id)arg1;
- (unsigned long long)draggingEntered:(id)arg1;
- (unsigned long long)updateDropTarget:(id)arg1;
- (double)slidingWidthForView:(id)arg1;
- (double)widthOfDraggingInfo:(id)arg1;
- (void)resumeAnimation;
- (void)pauseAnimation;
- (BOOL)reorderSlidingView:(id)arg1 fromMouseDownEvent:(id)arg2;
- (id)_lastDraggedOrUpEventFollowing:(id)arg1;
- (id)_lastDraggedEventFollowing:(id)arg1;
- (void)setDropIndex:(unsigned long long)arg1;
- (unsigned long long)dropIndex;
- (void)slideButtonsIntoPlace;
- (unsigned long long)dropIndexFromLocalPoint:(struct CGPoint)arg1;
- (unsigned long long)dropIndexFromDraggingInfo:(id)arg1;
- (void)refreshButtons;
- (void)draggedSlidingView:(id)arg1;
- (void)reorderedSlidingView:(id)arg1;
- (double)buttonBottomOffset;
- (double)paddingBetweenButtons;
- (struct CGRect)_constrainProposedButtonFrame:(struct CGRect)arg1;
- (double)minSlidingViewX;
- (double)minButtonX;
- (double)maxButtonX;
- (double)maxButtonXWithClipIndicator;
- (double)maxButtonXWithoutClipIndicator;
- (unsigned long long)lastNonSlidingViewIndex;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_ensureButtonIsInViewHierarchy:(id)arg1;

@end

@interface DVTSourceCodeComparisonAnnotation : DVTTextAnnotation
{
    DVTDiffDescriptor *_diffDescriptor;
    int _dataSourceType;
    BOOL _representsMissingLines;
    BOOL _selected;
    BOOL _builtHighlightedRanges;
}

+ (id)unselectedConflictDiffTextAnnotationTheme;
+ (id)selectedConflictDiffTextAnnotationTheme;
+ (id)unselectedDiffTextAnnotationTheme;
+ (id)selectedDiffTextAnnotationTheme;
@property int dataSourceType; // @synthesize dataSourceType=_dataSourceType;
@property BOOL builtHighlightedRanges; // @synthesize builtHighlightedRanges=_builtHighlightedRanges;
@property BOOL representsMissingLines; // @synthesize representsMissingLines=_representsMissingLines;
- (void)synchronizeHighlightedRangesWithLocationsForTextStorage:(id)arg1;
- (void)drawHighlightedRangesInRect:(struct CGRect)arg1 textView:(id)arg2;
- (void)annotationWillDrawInTextView:(id)arg1;
- (void)drawLineHighlightInRect:(struct CGRect)arg1 textView:(id)arg2;
- (id)description;
@property(readonly) BOOL conflict;
@property BOOL selected;
@property(retain) DVTDiffDescriptor *diffDescriptor;
- (BOOL)hideCarets;
- (void)_syncAnnotationThemeToState;
- (id)init;

@end

@interface DVTSourceCodeComparisonAnnotationProvider : DVTAnnotationProvider
{
    NSURL *_documentURL;
    int _dataSourceType;
    DVTDiffSession *_diffSession;
    DVTDiffDescriptor *_diffDescriptor;
    id <DVTObservingToken> _observingToken;
    id <DVTObservingToken> _selectionToken;
    DVTMapTable *_diffDescriptorToAnnotation;
}

+ (id)annotationProviderForContext:(id)arg1 error:(id *)arg2;
@property(retain) id <DVTObservingToken> selectionToken; // @synthesize selectionToken=_selectionToken;
@property(retain) id <DVTObservingToken> observingToken; // @synthesize observingToken=_observingToken;
@property __weak DVTDiffDescriptor *diffDescriptor; // @synthesize diffDescriptor=_diffDescriptor;
@property __weak DVTDiffSession *diffSession; // @synthesize diffSession=_diffSession;
@property int dataSourceType; // @synthesize dataSourceType=_dataSourceType;
@property(retain) NSURL *documentURL; // @synthesize documentURL=_documentURL;
- (id)_addAnnotationForDiffDescriptor:(id)arg1;
- (id)initWithContext:(id)arg1;

@end

@interface DVTSourceCodeSymbolKind (DVTSourceCodeSymbolKindKitAdditions)
@property(readonly) NSImage *icon;
@end

@interface DVTSourceExpression : NSObject
{
    DVTTextDocumentLocation *_location;
    DVTTextDocumentLocation *_textSelectionLocation;
    NSString *_expressionString;
    struct _NSRange _expressionRange;
    NSString *_symbolString;
    NSString *_textSelectionString;
    NSDictionary *_symbolDescription;
    id _context;
}

@property(readonly) id context; // @synthesize context=_context;
@property(readonly) struct _NSRange expressionRange; // @synthesize expressionRange=_expressionRange;
@property(readonly) NSDictionary *symbolDescription; // @synthesize symbolDescription=_symbolDescription;
@property(readonly) DVTTextDocumentLocation *textSelectionLocation; // @synthesize textSelectionLocation=_textSelectionLocation;
@property(readonly) NSString *textSelectionString; // @synthesize textSelectionString=_textSelectionString;
@property(readonly) NSString *symbolString; // @synthesize symbolString=_symbolString;
@property(readonly) NSString *expressionString; // @synthesize expressionString=_expressionString;
@property(readonly) DVTTextDocumentLocation *location; // @synthesize location=_location;
- (id)description;
- (id)initWithExpressionString:(id)arg1 symbolString:(id)arg2 location:(id)arg3 symbolDescription:(id)arg4 andContext:(id)arg5;
- (id)initWithExpressionString:(id)arg1 range:(struct _NSRange)arg2 symbolString:(id)arg3 location:(id)arg4 textSelectionString:(id)arg5 textSelectionLocation:(id)arg6 symbolDescription:(id)arg7 andContext:(id)arg8;

@end

@interface DVTSourceLandmarkItem : NSObject <DVTInvalidation>
{
    DVTSourceLandmarkItem *_parent;
    NSMutableArray *_children;
    NSString *_name;
    int _type;
    struct _NSRange _range;
    struct _NSRange _nameRange;
    long long _nestingLevel;
    long long _indentLevel;
    double _timestamp;
    DVTStackBacktrace *_invalidationBacktrace;
}

+ (int)sourceLandmarkItemTypeForNodeType:(long long)arg1;
@property(readonly) DVTStackBacktrace *invalidationBacktrace; // @synthesize invalidationBacktrace=_invalidationBacktrace;
@property long long indentLevel; // @synthesize indentLevel=_indentLevel;
@property long long nestingLevel; // @synthesize nestingLevel=_nestingLevel;
@property(readonly) double timestamp; // @synthesize timestamp=_timestamp;
@property struct _NSRange nameRange; // @synthesize nameRange=_nameRange;
@property(nonatomic) struct _NSRange range; // @synthesize range=_range;
@property(readonly) int type; // @synthesize type=_type;
@property(copy) NSString *name; // @synthesize name=_name;
@property(retain) DVTSourceLandmarkItem *parent; // @synthesize parent=_parent;
@property(readonly, nonatomic, getter=isValid) BOOL valid;
- (void)invalidate;
- (long long)compareWithLandmarkItem:(id)arg1;
- (BOOL)isDeclaration;
- (void)removeChildAtIndex:(long long)arg1;
- (void)insertChild:(id)arg1 atIndex:(long long)arg2;
- (void)removeObjectFromChildrenAtIndex:(unsigned long long)arg1;
- (void)insertObject:(id)arg1 inChildrenAtIndex:(unsigned long long)arg2;
@property(readonly) long long numberOfChildren;
@property(readonly) NSMutableArray *_children;
@property(readonly) NSArray *children;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)description;
- (id)initWithName:(id)arg1 type:(int)arg2;

@end

@interface DVTSourceTextScrollView : NSScrollView
{
    id <DVTSourceTextScrollViewDelegate> _delegate;
    DVTComparisonSplitView *_comparisonSplitView;
    BOOL _scrollingHorizontally;
}

@property(retain) DVTComparisonSplitView *comparisonSplitView; // @synthesize comparisonSplitView=_comparisonSplitView;
@property(retain) id <DVTSourceTextScrollViewDelegate> delegate; // @synthesize delegate=_delegate;
- (id)_pointInVisibleScroller:(struct CGPoint)arg1;
- (void)_doScroller:(id)arg1 hitPart:(long long)arg2 multiplier:(double)arg3;
- (void)scrollWheelHorizontal:(id)arg1;
- (void)reflectScrolledClipView:(id)arg1;
- (void)scrollWheel:(id)arg1;
- (void)viewDidEndLiveResize;
- (void)viewWillStartLiveResize;
- (BOOL)accessibilityIsIgnored;

@end

@interface DVTUndoManager : NSUndoManager
{
    NSMutableArray *_undoGroupingBacktraces;
    long long _beginCount;
    BOOL _willAutomaticallyUndoNextChangeGroup;
}

@property(readonly) BOOL willAutomaticallyUndoNextChangeGroup; // @synthesize willAutomaticallyUndoNextChangeGroup=_willAutomaticallyUndoNextChangeGroup;
- (void)endUndoGrouping;
- (void)beginUndoGrouping;
- (void)removeAllActions;
- (id)_undoGroupingBacktraces;
- (void)_clearUndoGroupingBacktraces;
- (void)_setEndCount:(long long)arg1;
- (long long)_endCount;
- (void)_setBeginCount:(long long)arg1;
- (long long)_beginCount;
- (void)automaticallyUndoNextChangeGroup;

@end

@interface DVTSourceTextUndoManager : DVTUndoManager
{
}

- (BOOL)_shouldCoalesceTypingForText:(id)arg1:(id)arg2;
- (void)removeAllActionsWithTarget:(id)arg1;
- (id)prepareWithInvocationTarget:(id)arg1;
- (void)registerUndoWithTarget:(id)arg1 selector:(SEL)arg2 object:(id)arg3;

@end

@interface DVTSpacerButton : NSButton
{
}

- (BOOL)acceptsFirstResponder;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_configureCell;

@end

@interface DVTSplitView : NSSplitView <NSSplitViewDelegate, NSAnimationDelegate, DVTStatefulObject>
{
    double _dividerThickness;
    unsigned long long _indexOfViewForResizing;
    long long _lastEventNumber;
    id _dvtDelegate;
    id _splitViewItems;
    NSImage *_dividerKnobImage;
    NSImage *_dividerImage;
    NSColor *_dividerColor;
    DVTStateToken *_stateToken;
    NSMutableDictionary *_additionalEffectiveRects;
    struct {
        unsigned int _delegateRespondsToCanCollapseSubview:1;
        unsigned int _delegateRespondsToShouldCollapseAtIndex:1;
        unsigned int _delegateRespondsToConstrainMinCoordinate:1;
        unsigned int _delegateRespondsToConstrainMaxCoordinate:1;
        unsigned int _delegateRespondsToConstrainSplitPosition:1;
        unsigned int _delegateRespondsToShouldHideDivider:1;
        unsigned int _delegateRespondsToResizeSubviews:1;
        unsigned int _delegateRespondsToEffectiveRect:1;
        unsigned int _delegateRespondsToAdditionalEffectiveRect:1;
        unsigned int _delegateRespondsToAdditionalEffectiveRects:1;
        unsigned int _delegateRespondsToWillResizeSubviews:1;
        unsigned int _delegateRespondsToDidResizeSubviews:1;
        unsigned int _delegateRespondsToSplitViewItemDidExpandOrCollapseBecauseUserDraggedDivider:1;
        unsigned int _delegateRespondsToNeedsRectanglesForViewsWithStateForSize:1;
        unsigned int _delegateRespondsToWillStartLiveResize:1;
        unsigned int _delegateRespondsToDidEndLiveResize:1;
        unsigned int _needsAdjust:1;
        unsigned int _doingAnimationReplaceSubview:1;
        unsigned int _reserved:15;
    } _dvtSplitViewFlags;
    BOOL _isAnimating;
    BOOL _suppressFrameWarnings;
    BOOL _revertingState;
    BOOL _suppressAdditionalRects;
}

+ (long long)version;
+ (void)configureStateSavingObjectPersistenceByName:(id)arg1;
+ (void)initialize;
@property BOOL suppressFrameWarnings; // @synthesize suppressFrameWarnings=_suppressFrameWarnings;
@property(retain, nonatomic) DVTStateToken *stateToken; // @synthesize stateToken=_stateToken;
@property unsigned long long indexOfViewForResizing; // @synthesize indexOfViewForResizing=_indexOfViewForResizing;
- (void)resetCursorRects;
- (id)hitTest:(struct CGPoint)arg1;
- (BOOL)dvt_isValidGrabHit:(struct CGPoint)arg1;
- (BOOL)_validateSubviewFrames;
- (void)splitViewDidResizeSubviews:(id)arg1;
- (void)splitViewWillResizeSubviews:(id)arg1;
- (struct CGRect)splitView:(id)arg1 additionalEffectiveRectOfDividerAtIndex:(long long)arg2;
- (struct CGRect)splitView:(id)arg1 effectiveRect:(struct CGRect)arg2 forDrawnRect:(struct CGRect)arg3 ofDividerAtIndex:(long long)arg4;
- (BOOL)splitView:(id)arg1 shouldHideDividerAtIndex:(long long)arg2;
- (void)splitView:(id)arg1 resizeSubviewsWithOldSize:(struct CGSize)arg2;
- (double)splitView:(id)arg1 constrainSplitPosition:(double)arg2 ofSubviewAt:(long long)arg3;
- (double)splitView:(id)arg1 constrainMaxCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (double)splitView:(id)arg1 constrainMinCoordinate:(double)arg2 ofSubviewAt:(long long)arg3;
- (BOOL)splitView:(id)arg1 shouldCollapseSubview:(id)arg2 forDoubleClickOnDividerAtIndex:(long long)arg3;
- (BOOL)splitView:(id)arg1 canCollapseSubview:(id)arg2;
- (void)viewWillDraw;
- (void)willRemoveSubview:(id)arg1;
- (void)addSubview:(id)arg1 positioned:(long long)arg2 relativeTo:(id)arg3;
- (void)addSubview:(id)arg1;
- (void)replaceSubview:(id)arg1 with:(id)arg2;
- (void)dvt_removeSubview:(id)arg1;
- (void)dvt_addSubview:(id)arg1;
- (void)dvt_replaceSubview:(id)arg1 with:(id)arg2;
- (void)setSubviews:(id)arg1;
- (id)_splitViewItemForSubview:(id)arg1;
- (id)splitViewItemWithIdentifier:(id)arg1;
- (void)removeSplitViewItem:(id)arg1;
- (void)insertSplitViewItem:(id)arg1 atIndex:(long long)arg2;
- (void)addSplitViewItem:(id)arg1;
- (id)splitViewItems;
- (id)_splitViewItems;
- (void)_updateSplitViewItemsBasedOnSubviews;
- (void)_indicateStateChangedIfNeccessary;
- (void)commitStateToDictionary:(id)arg1;
- (void)revertStateWithDictionary:(id)arg1;
- (void)_setSplitViewItemInfo:(id)arg1;
- (id)_splitViewItemInfo;
- (void)toggleVisibilityOfItemUsingAnimation:(id)arg1;
@property(copy) NSColor *dividerColor;
@property double dividerThickness;
- (void)drawDividerInRect:(struct CGRect)arg1;
@property(copy) NSImage *dividerImage;
@property(copy) NSImage *dividerKnobImage;
- (void)viewDidEndLiveResize;
- (void)viewWillStartLiveResize;
- (id)dvt_delegate;
- (id)delegate;
- (void)setDelegate:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)dvtSplitViewCommonInit;

@end

@interface DVTSplitViewAnimation : NSAnimation <NSAnimationDelegate>
{
    DVTSplitViewItem *_splitViewItemToToggle;
    DVTSplitViewItem *_adjacentSplitViewItem;
    NSView *_viewToToggle;
    NSView *_adjacentView;
    long long _animatedFrames;
    NSMutableArray *_animatingViews;
    NSMutableArray *_startFrames;
    NSMutableArray *_stopFrames;
    struct CGRect _windowStartFrame;
    struct CGRect _windowStopFrame;
    BOOL _isCollapseAnimation;
    BOOL _viewToToggleIsOnLeftOrTop;
    BOOL _adjacentViewIsOnLeftOrTop;
    BOOL _adjacentSplitViewItemVisibilityChanged;
}

- (void)_computeStopFrames;
- (void)_computeStartFrames;
- (void)animationDidEnd:(id)arg1;
- (void)_adjustViewToShowsFrameForAnimationStart;
- (BOOL)private_animationShouldStart:(id)arg1;
- (void)setCurrentProgress:(float)arg1;
- (id)initWithSplitView:(id)arg1;

@end

@interface DVTSplitViewItem : NSObject
{
    DVTSplitView *_splitView;
    NSView *_view;
    NSString *_identifier;
    double _lastVisibleHeightOrWidth;
    id _animatorProxy;
    BOOL _visible;
    BOOL _isInSetVisible;
}

+ (void)initialize;
@property(nonatomic, getter=isVisible) BOOL visible; // @synthesize visible=_visible;
@property(copy, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
@property(retain) NSView *view; // @synthesize view=_view;
@property(retain) DVTSplitView *splitView; // @synthesize splitView=_splitView;
- (void)setVisibilityUsingAnimation:(BOOL)arg1;
- (void)toggleVisibilityUsingAnimation;
- (void)primitiveSetVisible:(BOOL)arg1;
- (void)updateVisibleDividerPosition;
- (BOOL)checkViewDidExpandOrCollapse;
- (void)_viewDidExpandOrCollapse:(BOOL)arg1;
- (void)_collapseView;
- (void)_updateVisibleBinding;
- (void)viewDidInstall;
@property double savedViewMagnitude;
- (void)recordCurrentFrameSize;
- (id)animator;
- (id)_animatorProxy;
- (id)initWithIdentifier:(id)arg1;
- (id)init;
- (id)dvtExtraBindings;

@end

@interface DVTSplitViewItemAnimatorProxy : NSObject
{
    DVTSplitViewItem *_item;
}

@property(getter=isVisible) BOOL visible;
- (id)initWithSplitViewItem:(id)arg1;

@end

@interface DVTStackView_AppKitAutolayout : NSView
{
    NSArray *_privateConstraints;
    double _spaceBetweenViews;
}

+ (BOOL)requiresConstraintBasedLayout;
@property double spaceBetweenViews; // @synthesize spaceBetweenViews=_spaceBetweenViews;
- (void)willRemoveSubview:(id)arg1;
- (void)didAddSubview:(id)arg1;
- (id)_generateConstraints;
@property(retain) NSArray *privateConstraints;
- (void)updateConstraints;
- (void)addView:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)addViewToBottom:(id)arg1;
- (void)_autolayoutStackViewCommonInit;
- (void)awakeFromNib;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface DVTStackView_ML : DVTLayoutView_ML
{
    double subviewSpacing;
    CDStruct_bf6d4a14 subviewInset;
    int layoutDirection;
}

@property(nonatomic) CDStruct_bf6d4a14 subviewInset; // @synthesize subviewInset;
@property(nonatomic) double subviewSpacing; // @synthesize subviewSpacing;
@property(nonatomic) int layoutDirection; // @synthesize layoutDirection;
- (void)willRemoveSubview:(id)arg1;
- (void)didAddSubview:(id)arg1;
- (void)viewDidMoveToSuperview;
- (void)viewWillMoveToSuperview:(id)arg1;
- (void)viewDidMoveToWindow;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)_enclosingClipViewFrameDidChange:(id)arg1;
- (void)_windowContentViewFrameDidChange:(id)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)layoutBottomUp;
- (void)layoutTopDown;
- (struct CGSize)sizeForPulledSubviewMagnitude:(double)arg1;
- (struct CGPoint)pushedOriginForSubview:(id)arg1 position:(double)arg2;
- (struct CGSize)pushedSizeForSubview:(id)arg1;
- (double)pulledSizeMagnitudeForSubview:(id)arg1;
- (BOOL)isTopToBottom;
- (BOOL)isFlipped;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)awakeFromNib;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface DVTStringTextCompletionItem : NSObject <DVTTextCompletionItem>
{
    NSString *_name;
    NSString *_localizedName;
    NSImage *_icon;
    long long _priority;
}

@property(retain) NSImage *icon; // @synthesize icon=_icon;
@property long long priority; // @synthesize priority=_priority;
@property(copy) NSString *localizedName; // @synthesize localizedName=_localizedName;
@property(copy) NSString *name; // @synthesize name=_name;
@property(readonly) BOOL notRecommended;
@property(readonly) NSAttributedString *descriptionText;
@property(readonly) NSString *completionText;
@property(readonly) NSString *displayType;
@property(readonly) NSString *displayText;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)description;
- (id)initWithName:(id)arg1;

@end

@interface DVTTabBarEnclosureView : NSView
{
}

+ (double)collapsedHeightInBaseCoordinates;
+ (double)collapsedHeight;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface DVTTabBarView : DVTSlidingViewsBar <DVTMorphingDragImageDropTarget, DVTTabSwitcherDelegate>
{
    id <DVTTabbedWindowControlling> tabbedWindowController;
    DVTTabSwitcher *tabSwitcher;
    NSImage *_windowBackgroundImage;
    NSLock *_windowBackgroundImageLock;
    DVTTabbedWindowTabViewItem *_tabViewItemForOverflowButton;
    DVTTabButton *_draggedTab;
    DVTTabButton *_tabSelectedBeforeTabDrag;
    DVTNewTabButton *_newTabButton;
    DVTTabbedWindowTabViewItem *_seperatorUpdateLastSelectedTabViewItem;
    DVTTabbedWindowTabViewItem *_lastSelectedTabViewItem;
    int _modeOfSeparatorBeforeSpecialButtons;
    int _directionOfSeparatorBeforeSpecialButtons;
    BOOL _separatorBeforeSpecialButtonsUsesActiveTabColor;
    BOOL _areCloseButtonsVisible;
    BOOL _reorderingButton;
    BOOL _isReadyToUse;
    BOOL _reorderingTabs;
}

+ (double)tabBackgroundImageHeight;
+ (id)inactiveTabBackgroundForNonMainWindow;
+ (id)activeTabBackgroundForNonMainWindow;
+ (id)inactiveTabBackgroundForMainWindow;
+ (id)activeTabBackgroundForMainWindow;
@property(retain, nonatomic) DVTTabSwitcher *tabSwitcher; // @synthesize tabSwitcher;
@property(retain) id <DVTTabbedWindowControlling> tabbedWindowController; // @synthesize tabbedWindowController;
- (void)_windowBackgroundDidChange;
- (id)_windowBackgroundImage;
- (void)_setWindowBackgroundImage:(id)arg1;
- (void)_updateCloseButtonsVisibility;
- (void)_createTab:(id)arg1;
- (id)_leftTruncateStrings:(id)arg1 withFont:(id)arg2 width:(double)arg3;
- (id)_leftTruncateWordsFrom:(id)arg1 withFont:(id)arg2 width:(double)arg3 maxWordsToRemove:(unsigned long long)arg4;
- (void)_reselectTabSelectedBeforeTabDrag;
- (void)_detachTab:(id)arg1 withClickPoint:(struct CGPoint)arg2 sourceView:(id)arg3;
- (void)_selectClippedTabViewItem:(id)arg1;
- (void)_didClickCloseButton:(id)arg1;
- (void)_didClickTabButton:(id)arg1;
- (void)_setTabViewItemForOverflowButton:(id)arg1;
- (void)_setTabState:(long long)arg1 forTab:(id)arg2;
- (unsigned long long)_visibleButtonCountForLayout;
- (void)_updateKeyLoop;
- (void)_layOutButtons;
- (void)_updateSeparators;
- (id)_sortedVisibleButtons;
- (void)_setSpecialSeparatorsAndClipIndicatorNeedDisplay;
- (void)_setSeparatorBeforeSpecialButtonsUsesActiveTabColor:(BOOL)arg1;
- (void)_setModeOfSeparatorBeforeSpecialButtons:(int)arg1;
- (void)_setDirectionOfSeparatorBeforeSpecialButtons:(int)arg1;
- (struct CGRect)_separatorBetweenSpecialButtonsRect;
- (struct CGRect)_separatorBeforeSpecialButtonsRect;
- (BOOL)_isVisible;
- (void)_getButtonWidth:(double *)arg1 leftover:(unsigned long long *)arg2 isClipping:(char *)arg3;
- (id)_backgroundFillImage;
- (double)_availableWidthForButtonsWhenClipped;
- (double)_availableWidthForButtonsWhenUnclipped;
- (unsigned long long)_numberOfVisibleTabViewItems;
- (void)_removeTabButton:(id)arg1;
- (id)_insertTabButtonWithTabViewItem:(id)arg1 atIndex:(unsigned long long)arg2;
- (BOOL)_clipIndicatorIsShowing;
- (id)accessibilityAttributeValue:(id)arg1;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (id)accessibilityAttributeNames;
- (BOOL)morphingDragImage:(id)arg1 performDragOperation:(id)arg2;
- (void)morphingDragImage:(id)arg1 draggingExited:(id)arg2;
- (unsigned long long)morphingDragImage:(id)arg1 draggingUpdated:(id)arg2;
- (unsigned long long)morphingDragImage:(id)arg1 draggingEntered:(id)arg2;
- (id)menuItemsForClippedItemsIndicator:(id)arg1;
- (void)tabSwitcherDidChangeNumberOfTabViewItems:(id)arg1;
- (void)tabSwitcher:(id)arg1 didSelectTabViewItem:(id)arg2;
- (void)tabSwitcher:(id)arg1 willSelectTabViewItem:(id)arg2;
- (void)animation:(id)arg1 didSlideView:(id)arg2;
- (BOOL)performDragOperation:(id)arg1;
- (void)updateLabelNowForTab:(id)arg1;
- (void)updateLabelSoonForTab:(id)arg1;
- (void)updateTabTitlesNow;
- (void)tabTitlesDidChange;
- (void)getButtonWidth:(double *)arg1 leftover:(unsigned long long *)arg2 isClipping:(char *)arg3 forTabCount:(unsigned long long)arg4;
- (struct CGSize)dragImageSizeForTab:(id)arg1;
- (void)disconnectFromTabbedWindowController;
- (void)detachTabAndPositionUnderCursor:(id)arg1 sourceView:(id)arg2;
- (void)detachTab:(id)arg1 event:(id)arg2;
- (void)didDragTab:(id)arg1;
- (void)willDragTab:(id)arg1;
- (void)selectTabViewItem:(id)arg1;
- (id)selectedTabViewItem;
- (unsigned long long)numberOfTabs;
- (void)moveTabViewItem:(id)arg1 toIndex:(unsigned long long)arg2;
- (unsigned long long)indexOfTabViewItem:(id)arg1;
- (void)performDragOperationForTabViewItem:(id)arg1 draggingInfo:(id)arg2;
- (struct CGRect)clipRectForSlidingButton:(id)arg1;
- (id)windowBackgroundImage;
- (void)setReadyToUse;
- (void)replaceTabSwitcher:(id)arg1;
- (struct CGRect)contentFrame;
- (id)newTabButton;
- (double)slidingWidthForView:(id)arg1;
- (double)widthOfDraggingInfo:(id)arg1;
- (id)viewPinnedToOverflowIndicator;
- (unsigned long long)updateDropTarget:(id)arg1;
- (void)setDropIndex:(unsigned long long)arg1;
- (void)refreshButtons;
- (void)draggedSlidingView:(id)arg1;
- (void)reorderedSlidingView:(id)arg1;
- (BOOL)isReorderingTabViews;
- (double)minButtonX;
- (double)maxSlidingViewX;
- (double)minSlidingViewX;
- (double)maxButtonXWithClipIndicator;
- (double)maxButtonXWithoutClipIndicator;
- (id)menuForEvent:(id)arg1;
- (void)viewDidMoveToWindow;
- (void)viewWillMoveToWindow:(id)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)mouseDown:(id)arg1;
- (BOOL)isOpaque;
- (void)drawRect:(struct CGRect)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)awakeFromNib;
- (void)_installNewTabButton;

@end

@interface DVTTabButton : DVTRolloverTrackingButton <NSAnimationDelegate, NSTextFieldDelegate>
{
    DVTTabbedWindowTabViewItem *_tabViewItem;
    DVTRolloverImageButton *_closeButton;
    SEL _closeAction;
    NSImageView *_errorIndicator;
    struct CGRect _stackingFrame;
    NSMutableArray *_fadeInAnimations;
    NSString *_toolTip;
    long long _toolTipTag;
    NSTextField *userRenameTabField;
    NSText *editor;
    NSImage *_tabDragImage;
    NSImage *_miniWindowDragImage;
    struct CGRect _miniWindowStartFrame;
    struct CGRect _miniWindowEndFrame;
    NSWindow *_miniWindowDragWindow;
    NSWindow *_miniWindowTabbedWindow;
    struct CGAffineTransform _originalBrowserTransform;
    int _leftSeparatorMode;
    int _rightSeparatorMode;
    int _leftSeparatorDirection;
    int _rightSeparatorDirection;
    BOOL _settingCellTitle;
    BOOL _drawsDetached;
    BOOL _windowBackgroundMightBeStale;
}

+ (id)_etchedBoldTextColor;
+ (id)_backgroundTabBoldTextColor;
+ (id)_toolTipTextAttributes;
+ (id)_lightSeparatorLineColor;
+ (id)_imageForEmptyWindowOfSize:(struct CGSize)arg1;
+ (id)_darkSeparatorLineColor;
+ (id)rightInactiveTabSeparatorImageForNonMainWindow;
+ (id)rightInactiveTabSeparatorImageForMainWindow;
+ (id)rightActiveTabSeparatorImageForNonMainWindow;
+ (id)rightActiveTabSeparatorImageForMainWindow;
+ (id)leftInactiveTabSeparatorImageForNonMainWindow;
+ (id)leftInactiveTabSeparatorImageForMainWindow;
+ (id)leftActiveTabSeparatorImageForNonMainWindow;
+ (id)leftActiveTabSeparatorImageForMainWindow;
+ (BOOL)isTabDrag:(id)arg1;
+ (BOOL)isMiniWindowDrag:(id)arg1;
- (id)cxx_construct;
- (BOOL)_useRolloverAppearance;
- (void)_updateToolTip;
- (void)_updateFrames;
- (void)_updateControlsVisibility;
- (void)_fadableControl:(id)arg1 setHidden:(BOOL)arg2;
- (void)animationDidEnd:(id)arg1;
- (void)_fadeInView:(id)arg1;
- (BOOL)_shouldHideCloseButton;
- (void)_updateControlImages;
- (void)_updateAccessibilityAttributes;
- (double)_titleWidth;
- (void)_titleWillChange;
- (BOOL)_titleIsTruncated;
- (void)_titleDidChange;
- (struct CGRect)_textRect;
- (id)_tabBarView;
- (struct CGRect)_clipRectWhenSliding;
- (void)_setDrawsDetached:(BOOL)arg1;
- (id)_selectedTab;
- (double)_rightTextMargin;
- (double)_miniWindowDragImageWidth;
- (double)_leftTextMargin;
- (BOOL)_isShowingErrorIndicator;
- (void)_growMiniWindowForDetachedTabWithDragController:(id)arg1;
- (void)_customGrowMiniWindowForDetachedTabWithDragController:(id)arg1 newTabbedWindowController:(id)arg2;
- (void)_growMiniWindow:(id)arg1;
- (void)_drawWindowBackgroundFromFrame:(struct CGRect)arg1 operation:(unsigned long long)arg2;
- (void)_drawSeparatorsForUnselectedTabInRect:(struct CGRect)arg1;
- (void)_drawBackgroundAndSeparatorsInRect:(struct CGRect)arg1 withActiveAppearance:(BOOL)arg2;
- (id)_dragImageForImage:(id)arg1;
- (void)_detachFadeInAnimations;
- (void)_considerDragFromMouseDown:(id)arg1;
- (struct CGSize)currentEventOffsetFromEvent:(id)arg1;
- (BOOL)dragShouldBeginFromMouseDown:(id)arg1 withExpiration:(id)arg2 xHysteresis:(double)arg3 yHysteresis:(double)arg4;
- (void)windowBackgroundDidChange;
- (id)tabViewItem;
- (id)tabDragImage;
- (void)tabButtonsClipRectDidChange;
- (struct CGSize)roundSizeInWindowCoordinates:(struct CGSize)arg1;
- (struct CGRect)stackingFrame;
- (struct CGRect)slidingFrame;
- (void)setStackingFrame:(struct CGRect)arg1;
- (void)setSlidingFrame:(struct CGRect)arg1;
- (void)setRightSeparatorMode:(int)arg1;
- (void)setRightSeparatorDirection:(int)arg1;
- (void)setLeftSeparatorMode:(int)arg1;
- (void)setLeftSeparatorDirection:(int)arg1;
- (void)setCloseAction:(SEL)arg1;
- (int)rightSeparatorMode;
- (double)maximumTextWidth;
- (id)miniWindowDragImage;
- (int)leftSeparatorMode;
- (unsigned long long)lastMouseDownModifierFlagsForCloseButton;
- (id)initWithFrame:(struct CGRect)arg1 tabViewItem:(id)arg2;
- (void)destroy;
- (void)closeTab:(id)arg1;
- (id)closeButton;
- (SEL)closeAction;
- (void)morphingDragImageEnded:(id)arg1;
- (void)morphingDragImage:(id)arg1 wasDroppedAtPointOnScreen:(struct CGPoint)arg2;
- (void)morphingDragImage:(id)arg1 movedToPointOnScreen:(struct CGPoint)arg2;
- (BOOL)prepareForDragOperation:(id)arg1;
- (BOOL)performDragOperation:(id)arg1;
- (unsigned long long)draggingEntered:(id)arg1;
- (void)concludeDragOperation:(id)arg1;
- (BOOL)shouldUseRolloverAppearance;
- (void)mouseEnteredOrExited:(BOOL)arg1;
- (void)setState:(long long)arg1;
- (void)viewDidMoveToWindow;
- (void)setToolTip:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)setNeedsDisplayInRect:(struct CGRect)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)setFrameOrigin:(struct CGPoint)arg1;
- (void)resetCursorRects;
- (id)menuForEvent:(id)arg1;
- (id)hitTest:(struct CGPoint)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (BOOL)resignFirstResponder;
- (BOOL)becomeFirstResponder;
- (void)stopEditingTabName;
- (void)controlTextDidBeginEditing:(id)arg1;
- (void)controlTextDidChange:(id)arg1;
- (void)controlTextDidEndEditing:(id)arg1;
- (void)mouseDown:(id)arg1;
- (id)description;

@end

@interface DVTTabChooserView : DVTBorderedView
{
    double *_currentChoiceXCoordinates;
    NSSearchField *_searchField;
    DVTChoice *_selectedChoice;
    long long _pressedIndex;
    long long _mouseDownIndex;
    NSMutableArray *_choices;
    NSMapTable *_accessibilityProxiesByChoice;
    struct {
        unsigned int hasSearchField:1;
        unsigned int _reserved:7;
    } _flags;
}

+ (id)keyPathsForValuesAffectingSelectedChoice;
+ (void)initialize;
@property(retain, nonatomic) NSSearchField *searchField; // @synthesize searchField=_searchField;
- (id)accessibilityHitTest:(struct CGPoint)arg1;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAttributeNames;
- (BOOL)accessibilityIsIgnored;
- (id)accessibilityProxyForChoice:(id)arg1;
@property BOOL hasSearchField;
- (void)installSearchField;
- (struct CGRect)searchFieldFrame;
- (void)mouseUp:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)mouseDown:(id)arg1;
- (id)choiceForEvent:(id)arg1 index:(long long *)arg2;
- (id)choiceForPoint:(struct CGPoint)arg1 index:(long long *)arg2;
- (void)drawRect:(struct CGRect)arg1;
- (void)drawChoiceAtIndex:(long long)arg1;
- (id)attributedTitleForChoice:(id)arg1 forceActive:(BOOL)arg2;
- (void)updateGeometryForDrawing;
- (struct CGRect)rectForChoice:(id)arg1;
- (struct CGRect)rectForChoiceAtIndex:(long long)arg1;
@property(readonly) double minimumWidth;
- (struct CGRect)totalChoicesRect;
- (double)totalWidth;
- (double)widthForChoiceAtIndex:(long long)arg1;
- (double)widthForChoice:(id)arg1;
- (void)updateBoundSelectedObjects;
@property(retain) DVTChoice *selectedChoice; // @synthesize selectedChoice=_selectedChoice;
@property(readonly) NSMutableArray *mutableChoices;
- (void)updateBoundContent;
@property(copy) NSArray *choices;
- (id)choiceWithIdentifier:(id)arg1;
- (id)choiceAtIndex:(long long)arg1;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)commonInit;
- (id)dvtExtraBindings;

@end

@interface DVTTabChooserViewChoiceAccessibilityProxy : NSObject
{
    DVTChoice *_choice;
    DVTTabChooserView *_tabChooserView;
}

- (BOOL)accessibilityShouldUseUniqueId;
- (BOOL)accessibilitySupportsOverriddenAttributes;
- (id)accessibilityFocusedUIElement;
- (id)accessibilityHitTest:(struct CGPoint)arg1;
- (void)accessibilityPerformAction:(id)arg1;
- (void)accessibilitySetValue:(id)arg1 forAttribute:(id)arg2;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (id)accessibilityActionDescription:(id)arg1;
- (id)accessibilityActionNames;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAttributeNames;
- (BOOL)accessibilityIsIgnored;
- (id)initWithChoice:(id)arg1 tabChooserView:(id)arg2;

@end

@interface DVTTabChooserViewSelectedObjectsValueTransformer : NSValueTransformer
{
}

+ (BOOL)allowsReverseTransformation;
+ (Class)transformedValueClass;
- (id)reverseTransformedValue:(id)arg1;
- (id)transformedValue:(id)arg1;

@end

@interface DVTTabSwitcher : NSView <NSTabViewDelegate>
{
    DVTTabBarView *_tabBarView;
    NSTabView *_tabView;
    id <DVTTabSwitcherDelegate> _delegate;
    DVTTabbedWindowTabViewItem *_selectedTabViewItem;
    DVTTabbedWindowTabViewItem *_editingTab;
}

+ (id)keyPathsForValuesAffectingActiveViewController;
@property(retain) DVTTabbedWindowTabViewItem *editingTab; // @synthesize editingTab=_editingTab;
@property(retain, nonatomic) DVTTabbedWindowTabViewItem *selectedTabViewItem; // @synthesize selectedTabViewItem=_selectedTabViewItem;
@property(retain, nonatomic) DVTTabBarView *tabBarView; // @synthesize tabBarView=_tabBarView;
- (void)tabViewDidChangeNumberOfTabViewItems:(id)arg1;
- (void)tabView:(id)arg1 didSelectTabViewItem:(id)arg2;
- (void)tabView:(id)arg1 willSelectTabViewItem:(id)arg2;
- (BOOL)tabView:(id)arg1 shouldSelectTabViewItem:(id)arg2;
- (id)delegate;
- (void)setDelegate:(id)arg1;
- (id)tabViewItems;
- (void)insertTabViewItem:(id)arg1 atIndex:(long long)arg2;
- (void)moveTabViewItem:(id)arg1 toIndex:(long long)arg2;
- (void)removeTabViewItem:(id)arg1;
- (long long)indexOfTabViewItem:(id)arg1;
- (id)tabViewItemAtIndex:(long long)arg1;
- (long long)numberOfTabViewItems;
- (void)selectTabViewItemAtIndex:(long long)arg1;
- (void)selectTabViewItem:(id)arg1;
- (id)newTabWithViewController:(id)arg1 atIndex:(unsigned long long)arg2;
@property(readonly) DVTViewController /*<DVTTabbedWindowTabContentControlling>*/ *activeViewController;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (void)_commonInit;

@end

@interface DVTTabbedWindowTabViewItem : NSTabViewItem
{
    DVTTabBarView *_tabBarView;
    DVTTabButton *_button;
    NSString *_searchFieldText;
    NSString *_urlFromScript;
    DVTViewController /*<DVTTabbedWindowTabContentControlling>*/ *_tabContentController;
    BOOL _isEditingTabName;
    BOOL _firedOpenEvent;
    BOOL _firedCloseEvent;
}

@property(readonly) DVTTabBarView *tabBarView; // @synthesize tabBarView=_tabBarView;
@property(readonly) BOOL isEditingTabName; // @synthesize isEditingTabName=_isEditingTabName;
@property(retain, nonatomic) DVTViewController /*<DVTTabbedWindowTabContentControlling>*/ *tabContentController; // @synthesize tabContentController=_tabContentController;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (id)_computeTabLabel;
- (void)updateLabelSoon;
- (void)updateLabelNow;
- (id)searchFieldText;
- (void)setSearchFieldText:(id)arg1;
- (BOOL)canBeClosed;
- (id)button;
- (void)setButton:(id)arg1;
- (void)setLabel:(id)arg1;
- (void)setView:(id)arg1;
- (void)setEditingTabName:(BOOL)arg1;
- (id)initWithTabBarView:(id)arg1;

@end

@interface DVTTableHeaderCell : NSTableHeaderCell
{
    NSImage *_image;
    struct CGSize _baseImageSize;
    unsigned long long _imageScaling;
    double _layoutHeight;
}

+ (void)initialize;
@property double layoutHeight; // @synthesize layoutHeight=_layoutHeight;
@property unsigned long long imageScaling; // @synthesize imageScaling=_imageScaling;
@property struct CGSize baseImageSize; // @synthesize baseImageSize=_baseImageSize;
@property(retain) NSImage *image; // @synthesize image=_image;
- (void)updateBoundTitle;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)drawWithExpansionFrame:(struct CGRect)arg1 inView:(id)arg2;
- (struct CGRect)expansionFrameWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (struct CGSize)cellSize;
- (struct CGRect)titleRectForBounds:(struct CGRect)arg1;
- (struct CGRect)imageRectForBounds:(struct CGRect)arg1;
- (struct CGSize)_scaledImageSize:(struct CGSize)arg1 forBounds:(struct CGRect)arg2;
- (struct CGRect)_layoutFrameForCellFrame:(struct CGRect)arg1;
- (id)dvtExtraBindings;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initImageCell:(id)arg1;
- (id)initTextCell:(id)arg1;

@end

@interface DVTTextAnnotationAccessibilityProxyItem : NSObject
{
    DVTTextSidebarView *_parent;
    DVTTextAnnotation *_annotation;
}

+ (id)textAnnotationProxyItemWithAnnotation:(id)arg1 parent:(id)arg2;
@property(readonly) DVTTextSidebarView *parent; // @synthesize parent=_parent;
@property(readonly) DVTTextAnnotation *annotation; // @synthesize annotation=_annotation;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (id)accessibilityHitTest:(struct CGPoint)arg1;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAttributeNames;
- (struct CGRect)_getAnnotationBounds:(id)arg1;
- (BOOL)accessibilityIsIgnored;
- (id)initWithAnnotation:(id)arg1 parent:(id)arg2;

@end

@interface DVTTextAnnotationIndicatorAnimation : NSAnimation
{
    DVTMessageBubbleView *_annotationView;
    NSWindow *_window;
    struct CGAffineTransform _originalWindowTransform;
}

@property(retain) DVTMessageBubbleView *annotationView; // @synthesize annotationView=_annotationView;
- (void)setCurrentProgress:(float)arg1;
- (void)stopAnimation;
- (void)startAnimation;
- (void)_clearAnnotationIndicator;
- (void)_fadeAnnotationIndicator:(double)arg1;
- (void)_pulseAnnotationIndicator:(double)arg1;
- (id)init;

@end

@interface DVTTextAnnotationTheme : NSObject
{
    NSColor *_borderTopColor;
    NSColor *_borderBottomColor;
    NSColor *_highlightColor;
    NSGradient *_overlayGradient;
    NSColor *_messageBubbleBorderColor;
    NSGradient *_messageBubbleGradient;
    NSColor *_caretColor;
    NSColor *_highlightedRangeBorderColor;
    NSColor *_textColor;
}

+ (id)defaultOverlayGlassGradient;
+ (id)diffTextAnnotationThemeSelected:(BOOL)arg1 conflict:(BOOL)arg2;
+ (id)grayGlassTextAnnotationThemeForVariant:(int)arg1;
+ (id)blueGlassTextAnnotationThemeForVariant:(int)arg1;
+ (id)greenGlassTextAnnotationThemeForVariant:(int)arg1;
+ (id)redGlassTextAnnotationThemeForVariant:(int)arg1;
+ (id)yellowGlassTextAnnotationThemeForVariant:(int)arg1;
+ (id)defaultTheme;
+ (id)_caretColor;
+ (double)diffTextAnnotationAlphaAdjustment;
+ (void)initialize;
@property(readonly) NSColor *textColor; // @synthesize textColor=_textColor;
@property(readonly) NSColor *highlightedRangeBorderColor; // @synthesize highlightedRangeBorderColor=_highlightedRangeBorderColor;
@property(readonly) NSColor *caretColor; // @synthesize caretColor=_caretColor;
@property(readonly) NSColor *messageBubbleBorderColor; // @synthesize messageBubbleBorderColor=_messageBubbleBorderColor;
@property(readonly) NSGradient *messageBubbleGradient; // @synthesize messageBubbleGradient=_messageBubbleGradient;
@property(readonly) NSGradient *overlayGradient; // @synthesize overlayGradient=_overlayGradient;
@property(readonly) NSColor *highlightColor; // @synthesize highlightColor=_highlightColor;
@property(readonly) NSColor *borderBottomColor; // @synthesize borderBottomColor=_borderBottomColor;
@property(readonly) NSColor *borderTopColor; // @synthesize borderTopColor=_borderTopColor;
- (id)_calculateTextColor;
- (id)initWithHighlightColor:(id)arg1 borderTopColor:(id)arg2 borderBottomColor:(id)arg3 overlayGradient:(id)arg4 messageBubbleBorderColor:(id)arg5 messageBubbleGradient:(id)arg6 caretColor:(id)arg7 highlightedRangeBorderColor:(id)arg8;

@end

@interface DVTTextCompletionBackgroundView : NSView
{
}

- (void)drawRect:(struct CGRect)arg1;
- (void)viewDidMoveToWindow;
- (id)window;

@end

@interface DVTTextCompletionController : NSObject
{
    DVTCompletingTextView *_textView;
    DVTTextCompletionSession *_currentSession;
    NSString *_lastDismissingTextViewAction;
    NSString *_lastDismissingAppAction;
    id <DVTObservingToken> _appActionsMonitor;
    BOOL _autoCompletionEnabled;
    BOOL _sessionInProgress;
    BOOL _registeredScrollListener;
}

+ (id)performanceLogAspect;
+ (id)completionUILogAspect;
@property(retain) DVTTextCompletionSession *currentSession; // @synthesize currentSession=_currentSession;
@property(readonly) BOOL sessionInProgress; // @synthesize sessionInProgress=_sessionInProgress;
@property(getter=isAutoCompletionEnabled) BOOL autoCompletionEnabled; // @synthesize autoCompletionEnabled=_autoCompletionEnabled;
@property(readonly) DVTCompletingTextView *textView; // @synthesize textView=_textView;
- (id)debugStateString;
- (BOOL)showInfoPanelForSelectedCompletion;
- (id)attributesForCompletionAtCharacterIndex:(unsigned long long)arg1 effectiveRange:(struct _NSRange *)arg2;
- (BOOL)_textViewShouldInsertTab;
- (BOOL)_textViewShouldHandleCancel;
- (BOOL)_textViewShouldHandleComplete;
- (BOOL)_textViewShouldHandlePreviousCompletion;
- (BOOL)_textViewShouldHandleNextCompletion;
- (void)_applicationWillDispatchAction:(SEL)arg1;
- (BOOL)textViewShouldSetMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;
- (BOOL)textViewShouldChangeTextInRange:(struct _NSRange)arg1 replacementString:(id)arg2;
- (BOOL)textViewShouldPerformAction:(SEL)arg1;
- (void)_textViewDidScroll:(id)arg1;
- (void)_textViewWillUndoRedo:(id)arg1;
- (void)textViewDidInsertText;
- (BOOL)textViewShouldInsertText:(id)arg1;
- (void)_textViewTextDidChange:(id)arg1;
- (void)textViewSelectionChanging;
- (void)_dismissAndInvalidateCurrentSession;
- (void)_hideCompletionsWithoutInvalidatingWithReason:(int)arg1;
- (void)hideCompletions;
- (BOOL)acceptCurrentCompletion;
- (BOOL)_showCompletionsAtCursorLocationExplicitly:(BOOL)arg1;
- (BOOL)showCompletionsAtCursorLocation;
- (void)setSessionInProgress:(BOOL)arg1;
@property(readonly, getter=isShowingCompletions) BOOL showingCompletions;
- (id)initWithTextView:(id)arg1;
- (id)init;

@end

@interface DVTTextCompletionDataSource : NSObject
{
    DVTSourceCodeLanguage *_language;
    id <DVTTextCompletionDataSourceDelegate> _delegate;
    NSMutableArray *_strategies;
    NSMutableSet *_strategyObservers;
    NSOperationQueue *_completionsGeneratorQueue;
}

@property(retain, nonatomic) DVTSourceCodeLanguage *language; // @synthesize language=_language;
@property __weak id <DVTTextCompletionDataSourceDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly) NSArray *strategies;
- (void)generateCompletionsForDocumentLocation:(id)arg1 context:(id)arg2 completionBlock:(id)arg3;
- (id)initWithLanguage:(id)arg1;
- (id)init;

@end

@interface DVTTextCompletionGeneratorOperation : DVTOperation
{
}

@end

@interface DVTTextCompletionStrategy : NSObject
{
}

+ (id)priorityComparator;
- (id)completionItemsForDocumentLocation:(id)arg1 context:(id)arg2 areDefinitive:(char *)arg3;
- (void)prepareForDocumentLocation:(id)arg1 context:(id)arg2;

@end

@interface DVTTextCompletionImportAbsolutePathStrategy : DVTTextCompletionStrategy
{
}

- (id)completionItemsForDocumentLocation:(id)arg1 context:(id)arg2 areDefinitive:(char *)arg3;
- (id)_completionItemsFromAbsolutePath:(id)arg1;

@end

@interface DVTTextCompletionInfoContentViewController : DVTHUDPopUpContentViewController
{
}

+ (id)defaultViewNibName;
- (CDStruct_bf6d4a14)contentInset;

@end

@interface DVTTextCompletionInfoWindowController : DVTHUDPopUpController
{
}

@end

@interface DVTTextCompletionInlinePreviewController : NSObject
{
    DVTTextCompletionSession *_session;
    id <DVTObservingToken> _sessionSelectionObserver;
    id <DVTTextCompletionItem> _previousSelectedItem;
    DVTMapTable *_previewTextPerItem;
    NSString *_replacedUserPrefix;
    struct _NSRange _previewRange;
    struct _NSRange _ghostComplementRange;
    int _hideReason;
    BOOL _adjustingPreviewText;
    BOOL _adjustingPreviewCursorLocation;
    BOOL _invalidatingTextDisplay;
}

@property(readonly) BOOL invalidatingTextDisplay; // @synthesize invalidatingTextDisplay=_invalidatingTextDisplay;
@property(readonly) BOOL adjustingPreviewCursorLocation; // @synthesize adjustingPreviewCursorLocation=_adjustingPreviewCursorLocation;
@property(readonly) BOOL adjustingPreviewText; // @synthesize adjustingPreviewText=_adjustingPreviewText;
@property(readonly) struct _NSRange ghostComplementRange; // @synthesize ghostComplementRange=_ghostComplementRange;
@property(readonly) struct _NSRange previewRange; // @synthesize previewRange=_previewRange;
@property(nonatomic) int hideReason; // @synthesize hideReason=_hideReason;
@property(readonly) NSString *debugStateString;
- (id)_previewTextForItem:(id)arg1;
- (void)_showPreviewForItem:(id)arg1;
- (void)_textStorageWillEdit:(id)arg1;
- (BOOL)handleDeleteBackward;
- (BOOL)handleTextViewShouldSetMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;
- (BOOL)handleTextViewShouldChangeTextInRange:(struct _NSRange)arg1 replacementString:(id)arg2;
- (BOOL)handleInsertText:(id)arg1;
- (BOOL)handledAcceptPartialCompletion:(id)arg1;
- (void)hideInlinePreviewWithReason:(int)arg1;
- (void)showInlinePreview;
- (id)initWithSession:(id)arg1;
@property(readonly, getter=isShowingInlinePreview) BOOL showingInlinePreview;

@end

@interface DVTTextCompletionKeywordsStrategy : DVTTextCompletionStrategy
{
}

- (id)completionItemsForDocumentLocation:(id)arg1 context:(id)arg2 areDefinitive:(char *)arg3;
- (void)prepareForDocumentLocation:(id)arg1 context:(id)arg2;
- (id)_cachedKeywordCompletionsForLangSpecId:(id)arg1;
- (id)_keywordCompletionsForLangSpecId:(id)arg1;
- (id)_stringCompletionItemsForStringArray:(id)arg1;

@end

@interface DVTTextCompletionListCell : NSTextFieldCell
{
}

- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (id)highlightColorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (id)initImageCell:(id)arg1;
- (id)initTextCell:(id)arg1;
- (void)_dvt_commonInit;

@end

@interface DVTTextCompletionListHelpButtonCell : NSButtonCell
{
}

- (id)highlightColorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (void)awakeFromNib;

@end

@interface DVTTextCompletionListIconCell : NSImageCell
{
    NSShadow *_iconShadow;
}

@property(retain) NSShadow *iconShadow; // @synthesize iconShadow=_iconShadow;
- (void)drawInteriorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (id)highlightColorWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (id)initImageCell:(id)arg1;
- (id)initTextCell:(id)arg1;
- (void)_dvt_commonInit;

@end

@interface DVTTextCompletionListWindowController : NSWindowController <NSTableViewDataSource, NSTableViewDelegate, NSAnimationDelegate>
{
    NSTextField *_messagesField;
    DVTTextCompletionTableView *_completionsTableView;
    NSTableColumn *_iconColumn;
    NSTableColumn *_typeColumn;
    NSTableColumn *_titleColumn;
    NSTableColumn *_helpIconColumn;
    NSTableColumn *_rightPaddingColumn;
    DVTTextCompletionScrollView *_completionsScrollView;
    DVTTextCompletionSession *_session;
    struct CGRect _referenceFrameInView;
    DVTTextCompletionWindowResizeAnimation *_resizeAnimation;
    id <DVTObservingToken> _sessionCompletionsObserver;
    id <DVTObservingToken> _sessionSelectionObserver;
    NSDictionary *_selectedTitleCellAttributes;
    NSDictionary *_selectedTypeCellAttributes;
    NSTrackingArea *_trackingAreaForInfoButton;
    long long _mouseOverRowIndex;
    DVTTextCompletionInfoContentViewController *_infoViewController;
    DVTViewController<DVTInvalidation> *_infoContentViewController;
    DVTTextCompletionInfoWindowController *_infoWindowController;
    int _hideReason;
    BOOL _showingWindow;
    BOOL _shouldIgnoreSelectionChange;
}

@property(nonatomic) int hideReason; // @synthesize hideReason=_hideReason;
@property(readonly) DVTTextCompletionSession *session; // @synthesize session=_session;
@property(readonly) BOOL showingWindow; // @synthesize showingWindow=_showingWindow;
@property(readonly) DVTTextCompletionScrollView *completionsScrollView; // @synthesize completionsScrollView=_completionsScrollView;
@property(readonly) NSString *debugStateString;
- (void)animationDidEnd:(id)arg1;
- (id)tableView:(id)arg1 toolTipForCell:(id)arg2 rect:(struct CGRect *)arg3 tableColumn:(id)arg4 row:(long long)arg5 mouseLocation:(struct CGPoint)arg6;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forTableColumn:(id)arg3 row:(long long)arg4;
- (void)_prepareInfoButtonCell:(id)arg1 atRow:(unsigned long long)arg2 inColumn:(unsigned long long)arg3;
- (void)tableViewSelectionDidChange:(id)arg1;
- (id)tableView:(id)arg1 objectValueForTableColumn:(id)arg2 row:(long long)arg3;
- (long long)numberOfRowsInTableView:(id)arg1;
- (void)_clickCompletionInfoButton:(id)arg1;
- (void)_updateInfoNewSelection;
- (BOOL)showInfoForSelectedCompletionItem;
- (id)_selectedCompletionItem;
- (void)showInfoWindowForCompletionItem:(id)arg1 atFrame:(struct CGRect)arg2;
- (void)_cleanUpInfoWindow:(id)arg1;
- (void)close;
- (void)_loadColorsFromCurrentTheme;
- (void)_themeColorsChanged:(id)arg1;
- (id)_iconShadow;
- (id)_notRecommendedAttributes;
- (id)_usefulPrefixAttributes;
- (id)_messageTextAttributes;
- (struct CGRect)_preferredWindowFrameForTextFrame:(struct CGRect)arg1 columnsWidth:(double *)arg2 titleColumnX:(double)arg3 scrollbarWidth:(double *)arg4;
- (void)_getTitleColumnWidth:(double *)arg1 typeColumnWidth:(double *)arg2;
- (void)_updateSelectedRow;
- (void)_updateCurrentDisplayStateScrollerWasVisible:(BOOL)arg1;
- (void)_startDelayedAnimation;
- (void)_doubleClickOnRow:(id)arg1;
- (void)hideWindowWithReason:(int)arg1;
- (void)showWindowForTextFrame:(struct CGRect)arg1 explicitAnimation:(BOOL)arg2;
- (void)mouseExited:(id)arg1;
- (void)mouseMoved:(id)arg1;
- (void)_addTrackingAreaForInfoButton;
- (void)_removeTrackingAreaForInfoButton;
- (void)windowDidLoad;
- (id)initWithSession:(id)arg1;
- (id)window;

@end

@interface DVTTextCompletionScrollView : DVTHUDScrollView
{
}

- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface DVTTextCompletionSession : NSObject <DVTTextCompletionDataSourceDelegate, DVTInvalidation>
{
    DVTCompletingTextView *_textView;
    DVTTextCompletionListWindowController *_listWindowController;
    DVTTextCompletionInlinePreviewController *_inlinePreviewController;
    unsigned long long _wordStartLocation;
    unsigned long long _cursorLocation;
    NSString *_filteringPrefix;
    id <DVTObservingToken> _readyToShowListener;
    NSArray *_allCompletions;
    NSArray *_filteredCompletionsAlpha;
    NSArray *_filteredCompletionsPriority;
    NSString *_usefulPrefix;
    long long _selectedCompletionIndex;
    DVTStackBacktrace *_invalidationBacktrace;
    DVTPerformanceMetric *_currentMetric;
    int _pendingRequestState;
    BOOL _generatingCompletions;
    BOOL _insertingFullCompletion;
    BOOL _insertingPartialCompletion;
    BOOL _hidingCompletions;
    BOOL _autoCompleteTimerExpired;
    BOOL _shownExplicitly;
    BOOL _isInvalidated;
}

+ (void)_adjustPrioritiesForRecentlyUsedItems:(id)arg1;
+ (void)_addToRecentCompletions:(id)arg1;
+ (id)keyPathsForValuesAffectingReadyToShowCompletions;
@property(readonly) DVTStackBacktrace *invalidationBacktrace; // @synthesize invalidationBacktrace=_invalidationBacktrace;
@property BOOL autoCompleteTimerExpired; // @synthesize autoCompleteTimerExpired=_autoCompleteTimerExpired;
@property(nonatomic) long long selectedCompletionIndex; // @synthesize selectedCompletionIndex=_selectedCompletionIndex;
@property(copy) NSString *usefulPrefix; // @synthesize usefulPrefix=_usefulPrefix;
@property(retain) NSArray *filteredCompletionsPriority; // @synthesize filteredCompletionsPriority=_filteredCompletionsPriority;
@property(retain) NSArray *filteredCompletionsAlpha; // @synthesize filteredCompletionsAlpha=_filteredCompletionsAlpha;
@property(retain) NSArray *allCompletions; // @synthesize allCompletions=_allCompletions;
@property(nonatomic) unsigned long long cursorLocation; // @synthesize cursorLocation=_cursorLocation;
@property(readonly) unsigned long long wordStartLocation; // @synthesize wordStartLocation=_wordStartLocation;
@property(readonly) DVTTextCompletionListWindowController *listWindowController; // @synthesize listWindowController=_listWindowController;
@property(readonly) DVTCompletingTextView *textView; // @synthesize textView=_textView;
@property(readonly) NSString *debugStateString;
@property(readonly, nonatomic, getter=isValid) BOOL valid;
- (void)invalidate;
- (BOOL)showInfoPanelForSelectedCompletion;
- (struct _NSRange)replacementRangeForSuggestedRange:(struct _NSRange)arg1;
- (id)_prefixForCurrentLocation;
- (struct _NSRange)rangeOfFirstWordInString:(id)arg1;
- (void)completionsChangedForDataSource:(id)arg1;
- (long long)_indexOfItem:(id)arg1 inAlphabeticalList:(id)arg2 mustBeThere:(BOOL)arg3;
- (id)_commonPrefixForItems:(id)arg1;
- (id)_usefulPartialCompletionPrefixForItems:(id)arg1 selectedIndex:(unsigned long long)arg2 filteringPrefix:(id)arg3;
- (void)_setFilteringPrefix:(id)arg1;
- (void)_ensureCompletionsUpToDate;
- (id)attributesForCompletionAtCharacterIndex:(unsigned long long)arg1 effectiveRange:(struct _NSRange *)arg2;
- (BOOL)_gotUsefulCompletionsToShowInList:(id)arg1;
- (BOOL)_shouldSetCursorLocation:(unsigned long long)arg1;
- (BOOL)shouldBeDismissedForSelectionChange;
- (BOOL)_shouldAcceptPartialCompletionForCursorLocation:(unsigned long long)arg1;
- (BOOL)shouldAutoSuggestForTextChange;
- (void)_scrollMayHaveFinished;
- (void)handleTextViewDidScroll;
- (BOOL)handleSelectNextPlaceholder;
- (BOOL)handleMoveToEndOfDocument;
- (BOOL)handleMoveToBeginningOfDocument;
- (BOOL)handlePageDown;
- (BOOL)handlePageUp;
- (BOOL)handleMoveDown;
- (BOOL)handleMoveUp;
- (BOOL)handleDeleteBackward;
- (BOOL)handleTextViewShouldSetMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;
- (BOOL)handleTextViewShouldChangeTextInRange:(struct _NSRange)arg1 replacementString:(id)arg2;
- (BOOL)handleInsertText:(id)arg1;
- (void)selectPreviousCompletionByPriority;
- (void)selectNextCompletionByPriority;
- (void)_selectNextPreviousByPriority:(BOOL)arg1;
- (void)selectPreviousCompletionAlpha;
- (void)selectNextCompletionAlpha;
- (BOOL)_insertCurrentCompletionNameCharacters:(unsigned long long)arg1;
- (BOOL)insertUsefulPrefix;
- (BOOL)insertCurrentCompletion;
- (void)hideCompletionsWithReason:(int)arg1;
- (void)showTemporarilyHiddenCompletionsForReasonMask:(unsigned long long)arg1;
- (void)showCompletionsExplicitly:(BOOL)arg1;
- (void)_autoCompletionWaitIsOver;
@property(readonly) BOOL readyToShowCompletions;
- (id)_inlinePreviewController;
- (id)_listWindowController;
- (void)setPendingRequestState:(int)arg1;
@property(readonly, getter=isShowingCompletions) BOOL showingCompletions;
- (id)initWithTextView:(id)arg1 atLocation:(unsigned long long)arg2 cursorLocation:(unsigned long long)arg3;
- (id)init;

@end

@interface DVTTextCompletionTableView : NSTableView
{
}

- (void)highlightSelectionInClipRect:(struct CGRect)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (void)viewDidMoveToWindow;
- (id)window;

@end

@interface DVTTextCompletionUserCompletionsStrategy : DVTTextCompletionStrategy
{
}

- (id)completionItemsForDocumentLocation:(id)arg1 context:(id)arg2 areDefinitive:(char *)arg3;
- (void)_addLang:(id)arg1 toExcludeSet:(id)arg2;
- (id)_completionsForLang:(id)arg1 excluding:(id)arg2;
- (id)_completionItemsForSpec:(id)arg1;

@end

@interface DVTTextCompletionWindow : NSWindow
{
    NSBezierPath *_clippingPath;
    double _cornerRadius;
    DVTTextCompletionSession *_session;
}

@property(retain) DVTTextCompletionSession *session; // @synthesize session=_session;
@property double cornerRadius; // @synthesize cornerRadius=_cornerRadius;
@property(readonly) NSBezierPath *clippingPath; // @synthesize clippingPath=_clippingPath;
- (void)setFrame:(struct CGRect)arg1 display:(BOOL)arg2;
- (BOOL)canBecomeMainWindow;
- (BOOL)canBecomeKeyWindow;
- (id)initWithContentRect:(struct CGRect)arg1 styleMask:(unsigned long long)arg2 backing:(unsigned long long)arg3 defer:(BOOL)arg4;
- (id)accessibilityAttributeValue:(id)arg1;
- (BOOL)accessibilityIsIgnored;

@end

@interface DVTTextCompletionWindowResizeAnimation : NSViewAnimation
{
    double _typeColStartWidth;
    double _typeColEndWidth;
    NSTableColumn *_typeColumn;
}

@property(retain) NSTableColumn *typeColumn; // @synthesize typeColumn=_typeColumn;
@property double typeColEndWidth; // @synthesize typeColEndWidth=_typeColEndWidth;
@property double typeColStartWidth; // @synthesize typeColStartWidth=_typeColStartWidth;
- (void)setCurrentProgress:(float)arg1;

@end

@interface DVTTextCompletionWordsInFileStrategy : DVTTextCompletionStrategy
{
}

- (id)completionItemsForDocumentLocation:(id)arg1 context:(id)arg2 areDefinitive:(char *)arg3;

@end

@interface DVTTextFold : NSObject
{
    struct _NSRange _relativeLocation;
    DVTTextFold *_parent;
    NSMutableArray *_children;
    NSString *_label;
    unsigned long long _foldStyle;
}

+ (id)foldsFromString:(id)arg1;
+ (id)decodeFold:(id)arg1 forParent:(id)arg2;
@property unsigned long long foldStyle; // @synthesize foldStyle=_foldStyle;
@property(copy) NSString *label; // @synthesize label=_label;
@property(readonly) NSAttributedString *foldedIconString;
@property(readonly) NSMutableArray *children;
@property(readonly) unsigned long long numberOfChildren;
- (id)removeChildren:(id)arg1;
- (void)addChild:(id)arg1;
@property(retain) DVTTextFold *parent;
- (id)findFoldContainingRange:(struct _NSRange)arg1;
- (id)findFoldWithRange:(struct _NSRange)arg1;
- (unsigned long long)subtractOutFolds:(unsigned long long)arg1;
- (unsigned long long)addInFolds:(unsigned long long)arg1;
- (id)adjustFoldsForRange:(struct _NSRange)arg1 changeInLength:(long long)arg2;
- (id)foldsEnclosingRange:(struct _NSRange)arg1;
- (void)_addFoldsEnclosingRange:(struct _NSRange)arg1 toArray:(id)arg2;
- (id)foldsTouchingRange:(struct _NSRange)arg1;
- (BOOL)rangeIsInsideAFold:(struct _NSRange)arg1;
- (void)offsetBy:(long long)arg1;
@property struct _NSRange range;
- (BOOL)validate;
- (id)description;
- (id)innerDescription:(id)arg1;
@property(readonly) NSString *stringValue;
- (id)_pList;
- (id)initWithRange:(struct _NSRange)arg1;

@end

/*
@interface DVTTextFoldInlineTokenAttachment : NSTokenAttachment
{
}


@end
*/

@interface DVTTextFoldInlineTokenAttachmentCell : NSObject /* : NSTokenAttachmentCell */
{
    NSView *_controlView;
}

@property(retain) NSView *controlView; // @synthesize controlView=_controlView;
- (unsigned long long)characterIndexForPoint:(struct CGPoint)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3;
- (BOOL)trackMouse:(id)arg1 inRect:(struct CGRect)arg2 ofView:(id)arg3 atCharacterIndex:(unsigned long long)arg4 untilMouseUp:(BOOL)arg5;
- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2 characterIndex:(unsigned long long)arg3 layoutManager:(id)arg4;
- (id)tokenBackgroundColor;
- (id)tokenForegroundColor;
- (long long)interiorBackgroundStyle;
- (struct CGRect)drawingRectForBounds:(struct CGRect)arg1;
- (struct CGRect)titleRectForBounds:(struct CGRect)arg1;
- (struct CGSize)cellSizeForBounds:(struct CGRect)arg1;
- (long long)_typesetterBehavior;
- (id)initTextCell:(id)arg1;

@end

@interface DVTTextFoldInlineTokenFormatter : NSFormatter
{
    DVTTextFoldInlineTokenAttachmentCell *_cell;
    DVTCompletingTextView *_textView;
    unsigned long long _charIndex;
}

- (id)attributedStringForObjectValue:(id)arg1 withDefaultAttributes:(id)arg2;
- (BOOL)getObjectValue:(id *)arg1 forString:(id)arg2 errorDescription:(id *)arg3;
- (id)stringForObjectValue:(id)arg1;
- (void)clearContext;
- (void)setContextWithCell:(id)arg1 textView:(id)arg2 characterIndex:(unsigned long long)arg3;

@end

@interface DVTTextLibraryDetailController : DVTLibraryDetailController
{
    DVTAssetDetailTextView *_textView;
    struct {
        unsigned int delegateImplementsTextForAsset:1;
        unsigned int _reserved:7;
    } _flags;
}

@property(readonly) DVTAssetDetailTextView *textView; // @synthesize textView=_textView;
- (void)sizeToFitSuggestedSize:(struct CGSize)arg1 forAsset:(id)arg2;
- (void)refreshWithAsset:(id)arg1;
- (void)viewDidInstall;
- (void)setDelegate:(id)arg1;

@end

@interface DVTTextVisualization : NSObject <NSAnimationDelegate>
{
    DVTSourceTextView *_textView;
    NSAnimation *_fadeAnimation;
    double _opacity;
}

@property(nonatomic) double opacity; // @synthesize opacity=_opacity;
@property(retain) DVTSourceTextView *textView; // @synthesize textView=_textView;
- (void)drawUnderTextInRect:(struct CGRect)arg1;
- (void)drawOverTextInRect:(struct CGRect)arg1;
@property(readonly) struct CGRect bounds;
- (void)animationDidEnd:(id)arg1;
- (void)fadeToOpacity:(double)arg1 completionBlock:(id)arg2;
- (id)init;

@end

@interface DVTTextPageGuideVisualization : DVTTextVisualization
{
    unsigned long long _columnNumber;
    double _pageGuideX;
    NSColor *_verticalLineColor;
    NSColor *_outOfBoundsColor;
}

@property(nonatomic) unsigned long long columnNumber; // @synthesize columnNumber=_columnNumber;
- (void)drawUnderTextInRect:(struct CGRect)arg1;
- (void)fontAndColorThemeChanged;
- (void)_updatePageGuideXCoordinate;

@end

@interface DVTTextSidebarView : NSRulerView
{
    double _sidebarWidth;
    double _foldbarWidth;
    NSColor *_sidebarBackgroundColor;
    NSColor *_foldbarBackgroundColor;
    NSFont *_lineNumberFont;
    NSColor *_lineNumberTextColor;
    DVTTextAnnotation *_clickedAnnotation;
    DVTTextAnnotation *_currentlyRolledOverAnnotation;
    unsigned long long _origLineNumberOfAnnotationBeingDragged;
    NSTimer *_foldingHoverTimer;
    struct CGPoint _mouseLocationForContextualMenu;
    unsigned long long _hitLineNumberForContextualMenu;
    NSMapTable *_digitWidths;
    NSTrackingArea *_trackingArea;
    unsigned long long _currentLineNumberReported;
    BOOL _showsSidebar;
    BOOL _showsFoldbar;
    BOOL _drawsLineNumbers;
    BOOL _clickedAnnotationHasTraveled;
}

@property(readonly) unsigned long long lastLineNumberControlClicked; // @synthesize lastLineNumberControlClicked=_hitLineNumberForContextualMenu;
@property(readonly) struct CGPoint lastPointControlClicked; // @synthesize lastPointControlClicked=_mouseLocationForContextualMenu;
@property(copy, nonatomic) NSColor *foldbarBackgroundColor; // @synthesize foldbarBackgroundColor=_foldbarBackgroundColor;
@property(copy, nonatomic) NSColor *sidebarBackgroundColor; // @synthesize sidebarBackgroundColor=_sidebarBackgroundColor;
@property(copy, nonatomic) NSColor *lineNumberTextColor; // @synthesize lineNumberTextColor=_lineNumberTextColor;
@property(retain, nonatomic) NSFont *lineNumberFont; // @synthesize lineNumberFont=_lineNumberFont;
@property(nonatomic) BOOL drawsLineNumbers; // @synthesize drawsLineNumbers=_drawsLineNumbers;
@property(nonatomic) double sidebarWidth; // @synthesize sidebarWidth=_sidebarWidth;
@property(nonatomic) BOOL showsFoldbar; // @synthesize showsFoldbar=_showsFoldbar;
@property(nonatomic) BOOL showsSidebar; // @synthesize showsSidebar=_showsSidebar;
- (id)accessibilityHitTest:(struct CGPoint)arg1;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAttributeNames;
- (void)mouseUp:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (void)mouseDown:(id)arg1;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (id)_clickedAnnotation:(id)arg1;
- (void)scrollWheel:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)mouseMoved:(id)arg1;
- (BOOL)mouseUpOnAnnotationSidebarMarkerAtPoint:(struct CGPoint)arg1 bounds:(struct CGRect)arg2 event:(id)arg3;
- (BOOL)dragAnnotationSidebarMarkerAtPoint:(struct CGPoint)arg1 draggableBounds:(struct CGRect)arg2 flipped:(BOOL)arg3 event:(id)arg4;
- (void)mouseDownOnAnnotation:(id)arg1;
- (void)_foldingHovered;
- (void)viewDidMoveToWindow;
- (void)_updateCurrentMouseLineOver:(BOOL)arg1 withEvent:(id)arg2;
- (void)_updateCurrentAnnotationRolloverStatusWithEvent:(id)arg1;
- (void)_beginRolloverOnAnnotation:(id)arg1 event:(id)arg2;
- (void)_endRolloverOnAnnotation:(id)arg1 event:(id)arg2;
- (void)getParagraphRect:(struct CGRect *)arg1 firstLineRect:(struct CGRect *)arg2 forLineNumber:(unsigned long long)arg3;
- (id)lastMarkerControlClicked;
- (id)menuForEvent:(id)arg1;
- (id)annotationAtSidebarPoint:(struct CGPoint)arg1;
- (unsigned long long)lineNumberForPoint:(struct CGPoint)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (void)_scrollToMatchContentView;
- (void)_drawLineNumbersInSidebarRect:(struct CGRect)arg1 foldedIndexes:(unsigned long long *)arg2 count:(unsigned long long)arg3 linesToInvert:(id)arg4 linesToReplace:(id)arg5 getParaRectBlock:(id)arg6;
- (void)_drawSidebarMarkersForAnnotations:(id)arg1 atIndexes:(id)arg2 textView:(id)arg3 getParaRectBlock:(id)arg4;
- (unsigned long long)_drawFoldingRibbonForLine:(unsigned long long)arg1 foldbarRect:(struct CGRect)arg2 paraRect:(struct CGRect)arg3 lineNumberFontSize:(double)arg4 textView:(id)arg5;
- (struct CGRect)foldbarRect;
- (struct CGRect)sidebarRect;
@property(readonly) NSCursor *sidebarCursor;
@property double foldbarWidth; // @synthesize foldbarWidth=_foldbarWidth;
- (void)recalculateSidebarWidthToFit;
- (void)_updateRulerThickness;
- (BOOL)displaysTooltips;
- (BOOL)acceptsFirstResponder;
- (void)updateTrackingAreas;
- (void)setOrientation:(unsigned long long)arg1;
- (id)initWithScrollView:(id)arg1 orientation:(unsigned long long)arg2;
- (void)_reloadColors;

@end

@interface DVTTextStorage : DVTSourceTextStorage <DVTSourceBufferProvider, DVTNodeTypeProvider>
{
    NSMutableAttributedString *_contents;
    struct _DVTTextLineOffsetTable _lineOffsets;
    unsigned long long _numChanges;
    unsigned long long _changeCapacity;
    struct _DVTTextChangeEntry *_changes;
    DVTSourceCodeLanguage *_language;
    DVTSourceModel *_sourceModel;
    NSTimer *_sourceModelUpdater;
    DVTSourceLandmarkItem *_topSourceLandmark;
    NSTimer *_landmarksCacheTimer;
    struct _NSRange _rangeNeedingInvalidation;
    NSTimer *_invalidationTimer;
    double _lastEditTimestamp;
    NSMutableArray *_foldingTextStorages;
    double _advancementForSpace;
    unsigned long long _tabWidth;
    unsigned long long _indentWidth;
    unsigned long long _wrappedLineIndentWidth;
    id <DVTObservingToken> _wrappedLinesIndentObserver;
    DVTFontAndColorTheme *_fontAndColorTheme;
    struct {
        unsigned int breakChangeCoalescing:1;
        unsigned int linesDidChangeDuringEdit:1;
        unsigned int lineEndings:2;
        unsigned int usesTabs:1;
        unsigned int doingSubwordMovement:1;
        unsigned int doingExpressionMovement:1;
        unsigned int syntaxColoringEnabled:1;
        unsigned int delegateHandlesColoring:1;
        unsigned int doingBatchEdit:1;
        unsigned int subclassDoesSyntaxColoring:1;
        unsigned int initiatedEditingEvents:1;
        unsigned int callingBeginEditing:1;
        unsigned int callingEndEditing:1;
        unsigned int invalidatingOurAttrs:1;
        unsigned int fixingAttrs:1;
        unsigned int disableAnnotationAdjustment:1;
        unsigned int batchEditMayContainTokens:1;
        unsigned int batchEditMayContainLinks:1;
        unsigned int batchEditMayContainAttachments:1;
    } _tsflags;
}

+ (id)_sourceLandmarksLogAspect;
+ (void)initialize;
@property(readonly) NSArray *foldingTextStorages; // @synthesize foldingTextStorages=_foldingTextStorages;
- (void)setWrappedLineIndentWidth:(unsigned long long)arg1;
- (unsigned long long)wrappedLineIndentWidth;
- (void)setIndentWidth:(unsigned long long)arg1;
- (unsigned long long)indentWidth;
- (unsigned long long)tabWidth;
- (id)tokenizableItemsForItemAtRange:(struct _NSRange)arg1;
- (id)_ancestorItemForTokenizableItem:(id)arg1;
- (long long)nodeTypeForTokenizableItem:(id)arg1;
- (id)stringByTogglingCommentsInRange:(struct _NSRange)arg1;
- (BOOL)stringContainsUncommentedLines:(id)arg1 lineCommentPrefix:(id *)arg2;
- (id)stringBySwappingRange:(struct _NSRange)arg1 withAdjacentRange:(struct _NSRange)arg2;
- (struct _NSRange)functionOrMethodBodyRangeAtIndex:(unsigned long long)arg1;
- (struct _NSRange)functionRangeAtIndex:(unsigned long long)arg1 isDefinitionOrCall:(char *)arg2;
- (struct _NSRange)methodDefinitionRangeAtIndex:(unsigned long long)arg1;
- (struct _NSRange)methodCallRangeAtIndex:(unsigned long long)arg1;
- (id)importStatementStringAtCharacterIndex:(unsigned long long)arg1;
- (id)symbolNameAtCharacterIndex:(unsigned long long)arg1 nameRanges:(id *)arg2;
- (id)stringForItem:(id)arg1;
- (id)foldableBlockItemForLocation:(unsigned long long)arg1;
- (id)foldableBlockItemForLineAtLocation:(unsigned long long)arg1;
- (id)blockItemAtLocation:(unsigned long long)arg1;
- (double)indentationForWrappedLineAtIndex:(unsigned long long)arg1;
- (unsigned long long)leadingWhitespacePositionsForLine:(unsigned long long)arg1;
- (unsigned long long)nextExpressionFromIndex:(unsigned long long)arg1 forward:(BOOL)arg2;
- (BOOL)isExpressionMovement;
- (void)setExpressionMovement:(BOOL)arg1;
- (BOOL)isSubwordMovement;
- (void)setSubwordMovement:(BOOL)arg1;
- (unsigned long long)nextWordFromIndex:(unsigned long long)arg1 forward:(BOOL)arg2;
- (unsigned long long)dvt_nextWordFromIndex:(unsigned long long)arg1 forward:(BOOL)arg2;
- (struct _NSRange)doubleClickAtIndex:(unsigned long long)arg1 inRange:(struct _NSRange)arg2;
- (struct _NSRange)rangeOfWordAtIndex:(unsigned long long)arg1;
- (struct _NSRange)rangeOfWordAtIndex:(unsigned long long)arg1 allowNonWords:(BOOL)arg2;
- (id)importLandmarkItems;
- (id)sourceLandmarkAtCharacterIndex:(unsigned long long)arg1;
- (id)_sourceLandmarkAtCharacterIndex:(unsigned long long)arg1 inLandmarkItems:(id)arg2;
- (id)topSourceLandmark;
- (BOOL)hasPendingSourceLandmarkInvalidation;
- (void)_invalidateSourceLandmarks:(id)arg1;
- (void)_addLandmarkItemsFromItem:(id)arg1 toParent:(id)arg2 matchingType:(id)arg3;
- (id)colorAtCharacterIndex:(unsigned long long)arg1 inTextView:(id)arg2 effectiveRange:(struct _NSRange *)arg3;
- (long long)nodeTypeAtCharacterIndex:(unsigned long long)arg1 inTextView:(id)arg2 effectiveRange:(struct _NSRange *)arg3;
- (void)_themeColorsChanged:(id)arg1;
- (id)commonSourceModelItemAtRange:(struct _NSRange)arg1;
- (id)sourceModelItemAtCharacterIndex:(unsigned long long)arg1;
- (id)sourceModelWithoutParsing;
- (id)sourceModel;
- (id)realSourceBufferProvider;
@property BOOL batchEditMayContainAttachments;
@property BOOL batchEditMayContainLinks;
@property BOOL batchEditMayContainTokens;
- (BOOL)subclassDoesSyntaxColoring;
- (void)setSubclassDoesSyntaxColoring:(BOOL)arg1;
- (id)fontAndColorTheme;
- (void)setFontAndColorTheme:(id)arg1;
- (BOOL)isSyntaxColoringEnabled;
- (void)setSyntaxColoringEnabled:(BOOL)arg1;
- (void)setLanguage:(id)arg1;
- (id)language;
- (void)fixAttributesInRange:(struct _NSRange)arg1;
- (void)invalidateDisplayInRange:(struct _NSRange)arg1;
- (void)invalidateAttributesAndDisplayInRange:(struct _NSRange)arg1 forceInvalidateAttributes:(BOOL)arg2;
- (void)invalidateAttributesAndDisplayInRange:(struct _NSRange)arg1;
- (void)fixSyntaxColoringInRange:(struct _NSRange)arg1;
- (BOOL)fixesAttributesLazily;
- (double)advancementForTab;
- (double)advancementForSpace;
- (void)resetAdvancementForSpace;
- (void)endEditing;
- (void)beginEditing;
- (id)attribute:(id)arg1 atIndex:(unsigned long long)arg2 effectiveRange:(struct _NSRange *)arg3;
- (id)_associatedTextViews;
- (BOOL)isAssociatedTextView:(id)arg1;
- (void)replaceCharactersInRange:(struct _NSRange)arg1 withAttributedString:(id)arg2 withUndoManager:(id)arg3;
- (void)replaceCharactersInRange:(struct _NSRange)arg1 withString:(id)arg2 withUndoManager:(id)arg3;
- (void)setAttributes:(id)arg1 range:(struct _NSRange)arg2;
- (void)replaceCharactersInRange:(struct _NSRange)arg1 withAttributedString:(id)arg2;
- (void)replaceCharactersInRange:(struct _NSRange)arg1 withString:(id)arg2;
- (id)attribute:(id)arg1 atIndex:(unsigned long long)arg2 longestEffectiveRange:(struct _NSRange *)arg3 inRange:(struct _NSRange)arg4;
- (id)attributesAtIndex:(unsigned long long)arg1 longestEffectiveRange:(struct _NSRange *)arg2 inRange:(struct _NSRange)arg3;
- (id)attributedSubstringFromRange:(struct _NSRange)arg1;
- (id)attributesAtIndex:(unsigned long long)arg1 effectiveRange:(struct _NSRange *)arg2;
- (id)description;
- (unsigned long long)length;
- (id)string;
- (void)processEditing;
- (void)_updateSourceModel:(id)arg1;
- (void)scheduleLazyInvalidationForRange:(struct _NSRange)arg1;
- (void)_invalidateCallback:(id)arg1;
- (void)_dumpChangeHistory;
- (void)clearChangeHistory;
- (BOOL)isAnnotationAdjustmentEnabled;
- (void)setAnnotationAdjustmentEnabled:(BOOL)arg1;
- (void)willReplaceCharactersInRange:(struct _NSRange)arg1 withString:(id)arg2 changeInLength:(long long)arg3;
- (void)didReplaceCharactersInRange:(struct _NSRange)arg1 withString:(id)arg2 changeInLength:(long long)arg3;
- (BOOL)isDoingBatchEdit;
- (void)doingBatchEdit:(BOOL)arg1 notifyModel:(BOOL)arg2;
- (void)doingBatchEdit:(BOOL)arg1;
- (struct _NSRange)lineRangeForLineRange:(struct _NSRange)arg1 fromTimestamp:(double)arg2 toTimestamp:(double)arg3;
- (struct _NSRange)characterRangeForCharacterRange:(struct _NSRange)arg1 fromTimestamp:(double)arg2 toTimestamp:(double)arg3;
- (unsigned long long)changeIndexForTimestamp:(double)arg1;
- (struct _NSRange)lineRangeForLineRange:(struct _NSRange)arg1 fromChangeIndex:(unsigned long long)arg2 toChangeIndex:(unsigned long long)arg3;
- (struct _NSRange)characterRangeForCharacterRange:(struct _NSRange)arg1 fromChangeIndex:(unsigned long long)arg2 toChangeIndex:(unsigned long long)arg3;
- (void)breakChangeTrackingCoalescing;
- (unsigned long long)currentChangeIndex;
- (void)invalidateLayoutForLineRange:(struct _NSRange)arg1;
- (id)_debugInfoString;
- (unsigned long long)numberOfLines;
- (struct _NSRange)lineRangeForCharacterRange:(struct _NSRange)arg1;
- (struct _NSRange)characterRangeForLineRange:(struct _NSRange)arg1;
- (void)_dumpLineOffsetsTable;
- (id)stringFromUnsignedInts:(const unsigned long long *)arg1 count:(unsigned long long)arg2;
- (void)removeLayoutManager:(id)arg1;
- (void)addLayoutManager:(id)arg1;
- (void)addFoldingStorage:(id)arg1;
- (void)_validateDelegateColorHandling;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (BOOL)isEditable;
- (double)lastEditTimestamp;
- (void)setLineEndings:(unsigned long long)arg1;
- (unsigned long long)lineEndings;
- (void)setTabWidth:(unsigned long long)arg1;
- (void)setUsesTabs:(BOOL)arg1;
- (BOOL)usesTabs;
- (void)setOwnedMutableAttributedString:(id)arg1;
- (void)finalize;
- (id)initWithOwnedMutableAttributedString:(id)arg1;
- (id)initWithAttributedString:(id)arg1;
- (id)initWithString:(id)arg1 attributes:(id)arg2;
- (id)initWithString:(id)arg1;
- (id)init;

@end

@interface DVTTextUndoMultiEdits : NSObject
{
    struct _NSRange _affectedRange;
    NSUndoManager *_undoManager;
    NSLayoutManager *_layoutManager;
    struct _NSRange _replacementRange;
}

@property struct _NSRange replacementRange; // @synthesize replacementRange=_replacementRange;
@property struct _NSRange affectedRange; // @synthesize affectedRange=_affectedRange;
@property(readonly) NSUndoManager *undoManager; // @synthesize undoManager=_undoManager;
@property(readonly) BOOL isSupportingCoalescing;
- (void)undoRedo:(id)arg1;
- (id)firstTextViewForTextStorage:(id)arg1;
- (id)initWithAffectedRange:(struct _NSRange)arg1 layoutManager:(id)arg2 undoManager:(id)arg3 replacementRange:(struct _NSRange)arg4;

@end

@interface DVTTextViewWithPlaceholder : NSTextView
{
    NSString *_centeredPlaceholderString;
    BOOL _didDrawPlaceholder;
    BOOL _isFirstResponder;
}

@property(copy) NSString *centeredPlaceholderString; // @synthesize centeredPlaceholderString=_centeredPlaceholderString;
- (BOOL)resignFirstResponder;
- (BOOL)becomeFirstResponder;
- (void)drawViewBackgroundInRect:(struct CGRect)arg1;

@end

@interface DVTTextVisualizationFadeAnimation : NSAnimation
{
    double _initialOpacity;
    DVTTextVisualization *_visualization;
    double _targetOpacity;
    id _completionBlock;
}

@property(copy) id completionBlock; // @synthesize completionBlock=_completionBlock;
@property double targetOpacity; // @synthesize targetOpacity=_targetOpacity;
@property(retain) DVTTextVisualization *visualization; // @synthesize visualization=_visualization;
- (void)setCurrentProgress:(float)arg1;
- (id)initWithVisualization:(id)arg1;

@end

@interface DVTTheme : NSObject
{
    NSDictionary *_contents;
}

+ (id)_loadThemeFromURL:(id)arg1 error:(id *)arg2;
+ (id)_parseFontElement:(id)arg1 name:(id *)arg2 error:(id *)arg3;
+ (id)_parseGradientElement:(id)arg1 name:(id *)arg2 error:(id *)arg3;
+ (id)_parseColorElement:(id)arg1 requireName:(BOOL)arg2 name:(id *)arg3 allowLocation:(BOOL)arg4 location:(double *)arg5 error:(id *)arg6;
+ (id)currentTheme;
@property(readonly) NSColor *bezelAlertShadowColor;
@property(readonly) NSColor *bezelAlertFontColor;
@property(readonly) NSColor *bezelAlertBackgroundColor;
@property(readonly) NSGradient *buttonSeparatorHighlightGradient;
@property(readonly) NSGradient *buttonSeparatorGradient;
@property(readonly) NSGradient *pathSeparatorHighlightGradient;
@property(readonly) NSGradient *pathSeparatorGradient;
@property(readonly) NSImage *filterFieldImage;
@property(readonly) NSImage *toolbarButtonSwitchBranchImage;
@property(readonly) NSImage *toolbarButtonScreenshotImage;
@property(readonly) NSImage *toolbarButtonRestoreSnapshotImage;
@property(readonly) NSImage *toolbarButtonRemoveImage;
@property(readonly) NSImage *toolbarButtonRefreshImage;
@property(readonly) NSImage *toolbarButtonNewDirectoryImage;
@property(readonly) NSImage *toolbarButtonLaunchImage;
@property(readonly) NSImage *toolbarButtonImportRepositoryImage;
@property(readonly) NSImage *toolbarButtonImportImage;
@property(readonly) NSImage *toolbarButtonHistoryImage;
@property(readonly) NSImage *toolbarButtonExportImage;
@property(readonly) NSImage *toolbarButtonDeleteImage;
@property(readonly) NSImage *toolbarButtonCommitPushImage;
@property(readonly) NSImage *toolbarButtonClearConsoleImage;
@property(readonly) NSImage *toolbarButtonCheckoutPullImage;
@property(readonly) NSImage *toolbarButtonAddPopupImage;
@property(readonly) NSImage *toolbarButtonAddImage;
@property(readonly) NSImage *scopeBarConfigurationShadowImage;
- (id)insetTabPressedImage;
@property(readonly) NSImage *roundDeleteButton;
@property(readonly) NSImage *roundAddButton;
@property(readonly) NSImage *smallPullDownArrow;
@property(readonly) NSImage *pullDownArrow;
@property(readonly) NSImage *statusClearImage;
@property(readonly) NSImage *statusIndeterminateImage;
@property(readonly) NSImage *statusUnavailableImage;
@property(readonly) NSImage *statusAvailableImage;
@property(readonly) NSImage *statusItemDeleteSelectedPressedImage;
@property(readonly) NSImage *statusItemDeletePressedImage;
@property(readonly) NSImage *statusItemDeleteSelectedImage;
@property(readonly) NSImage *statusItemDeleteImage;
@property(readonly) NSImage *statusItemAddSelectedPressedImage;
@property(readonly) NSImage *statusItemAddPressedImage;
@property(readonly) NSImage *statusItemAddSelectedImage;
@property(readonly) NSImage *statusItemAddImage;
@property(readonly) NSImage *smallGlassBarGearImage;
@property(readonly) NSImage *smallGlassBarDeleteImage;
@property(readonly) NSImage *smallGlassBarAddImage;
@property(readonly) NSImage *glassBarGearImage;
@property(readonly) NSImage *glassBarDeleteImage;
@property(readonly) NSImage *glassBarAddImage;
@property(readonly) NSImage *scopeBarRightArrowImage;
@property(readonly) NSImage *scopeBarLeftArrowImage;
@property(readonly) NSImage *smallLightCheckmarkImage;
@property(readonly) NSImage *smallDarkCheckmarkImage;
@property(readonly) NSImage *grayActionMenuImage;
@property(readonly) NSImage *splitGrabberImage;
@property(readonly) NSImage *placeholderImage;
@property(readonly) NSImage *empty16by16Image;
@property(readonly) double splitViewDividerSnappingTolerance;
@property(readonly) NSColor *infoHeaderDescriptionColor;
@property(readonly) NSColor *infoHeaderBigTitleColor;
@property(readonly) NSColor *infoHeaderBorderColor;
@property(readonly) NSColor *infoHeaderBackgroundColor2;
@property(readonly) NSColor *infoHeaderBackgroundColor;
@property(readonly) struct CGColor *navigationHUDTabBarLayerTabGradientContainsOpeningURLEndColor;
@property(readonly) struct CGColor *navigationHUDTabBarLayerTabGradientContainsOpeningURLStartColor;
@property(readonly) NSGradient *navigationHUDTemplateImageInnerGradient;
@property(readonly) struct CGColor *navigationHUDEditorContextInactiveSelectionGradientEndColor;
@property(readonly) struct CGColor *navigationHUDEditorContextInactiveSelectionGradientStartColor;
@property(readonly) struct CGColor *navigationHUDEditorContextActiveSelectionGradientEndColor;
@property(readonly) struct CGColor *navigationHUDEditorContextActiveSelectionGradientStartColor;
@property(readonly) NSColor *navigationHUDTabBarLayerInnerActiveSelectionShadowColor;
@property(readonly) NSColor *navigationHUDTabBarLayerInnerInactiveSelectionShadowColor;
@property(readonly) struct CGColor *navigationHUDTabBarLayerTabGradientActiveSelectionEndColor;
@property(readonly) struct CGColor *navigationHUDTabBarLayerTabGradientActiveSelectionStartColor;
@property(readonly) struct CGColor *navigationHUDTabBarLayerTabGradientInactiveSelectionEndColor;
@property(readonly) struct CGColor *navigationHUDTabBarLayerTabGradientInactiveSelectionStartColor;
@property(readonly) struct CGColor *navigationHUDTabBarOverflowIndicationColor;
@property(readonly) struct CGColor *navigationHUDLineHighlightColor;
@property(readonly) struct CGColor *navigationHUDLineColor;
@property(readonly) struct CGColor *navigationHUDTabBarLayerTabGradientEndColor;
@property(readonly) struct CGColor *navigationHUDTabBarLayerTabGradientStartColor;
@property(readonly) NSGradient *navigationHUDPlusImageGradient;
@property(readonly) struct CGColor *navigationHUDCoverFlowSelectedLayerShadowColor;
@property(readonly) struct CGColor *navigationHUDWindowLayerBorderColor;
@property(readonly) struct CGColor *navigationHUDWindowLayerBackgroundGradientEndColor;
@property(readonly) struct CGColor *navigationHUDWindowLayerBackgroundGradientStartColor;
@property(readonly) struct CGColor *navigationHUDTextShadowColor;
@property(readonly) NSColor *navigationHUDTextColor;
@property(readonly) NSColor *navigationHUDWindowBorderColor;
@property(readonly) NSGradient *navigationHUDWindowBackgroundGradient;
@property(readonly) NSColor *menuStrokeColor;
@property(readonly) NSColor *menuSecondaryColor;
@property(readonly) NSColor *menuWhiteColor;
@property(readonly) NSColor *ibDockGroupSeparatorColor;
@property(readonly) NSGradient *ibDockItemSelectionGradientInactive;
@property(readonly) NSColor *ibDockItemSelectionBorderColorInactive;
@property(readonly) NSGradient *ibDockItemSelectionGradientActive;
@property(readonly) NSColor *ibDockItemSelectionBorderColorActive;
@property(readonly) NSGradient *ibDocumentOutlineViewCapsuleHeaderGradient;
@property(readonly) NSColor *ibDockInactiveBackgroundColor;
@property(readonly) NSColor *ibDockActiveBackgroundColor;
@property(readonly) NSGradient *HUDPopUpHighlightGradient;
@property(readonly) NSColor *HUDPopUpBackgroundColor;
@property(readonly) NSColor *HUDPopUpBorderColor;
@property(readonly) NSColor *libraryTileViewBackgroundColor;
@property(readonly) NSColor *libraryRightClickedAssetBorderColor;
@property(readonly) NSColor *libraryInactiveSelectedAssetBorderColor;
@property(readonly) NSColor *librarySelectedAssetBorderColor;
@property(readonly) NSColor *libraryInactiveSelectedAssetBackgroundColor;
@property(readonly) NSColor *librarySelectedAssetBackgroundColor;
@property(readonly) NSColor *libraryAssetBorderColor;
@property(readonly) NSColor *libraryAssetBackgroundColor;
@property(readonly) NSGradient *activityViewPopUpBottomBarGradientClicked;
@property(readonly) NSGradient *activityViewPopUpBottomBarGradient;
@property(readonly) struct CGColor *activityViewPopUpBackgroundColor;
@property(readonly) struct CGColor *activityViewPopUpBorderCGColor;
@property(readonly) NSColor *activityViewPopUpBorderColor;
@property(readonly) struct CGColor *activityViewProgressIndicatorDiagonalsColorPopUpStyle;
@property(readonly) struct CGColor *activityViewProgressIndicatorDiagonalsColorMainStyle;
@property(readonly) NSColor *activityViewProgressIndicatorHighlightColor;
@property(readonly) NSColor *activityViewProgressIndicatorVerticalBorderColor;
@property(readonly) NSColor *activityViewProgressIndicatorInnerShadowColorPopUpStyle;
@property(readonly) NSColor *activityViewProgressIndicatorInnerShadowColorMainStyle;
@property(readonly) NSColor *activityViewProgressIndicatorBackgroundFillColor;
@property(readonly) NSGradient *activityViewProgressIndicatorDeterminateBarGradientPopUpStyle;
@property(readonly) NSGradient *activityViewProgressIndicatorDeterminateBarGradientMainStyle;
@property(readonly) struct CGColor *activityViewProgressIndicatorDeterminateBarShadowColor;
@property(readonly) struct CGColor *activityViewProgressIndicatorFrameColorPopUp;
@property(readonly) NSColor *activityViewScrollingTextFieldTextShadowColorInactive;
@property(readonly) NSColor *activityViewScrollingTextFieldTextShadowColorActive;
@property(readonly) NSColor *activityViewScrollingTextFieldTextColorInactive;
@property(readonly) NSColor *activityViewScrollingTextFieldTextColorActive;
@property(readonly) struct CGColor *activityViewBorderCGColor;
@property(readonly) NSColor *activityViewBorderColor;
@property(readonly) struct CGColor *activityViewScanLineColor;
@property(readonly) NSGradient *activityViewInnerBezelGradient;
@property(readonly) NSGradient *activityViewOuterBezelGradient;
@property(readonly) NSColor *activityViewBackgroundInnerGlowColor;
@property(readonly) NSColor *activityViewHighlightShadowColor;
@property(readonly) NSGradient *activityViewBackgroundGradient;
@property(readonly) NSColor *headerSliceIssueStripeColor;
@property(readonly) NSGradient *headerSliceIssueBackgroundGradient;
@property(readonly) NSColor *headerSliceLabelColor;
@property(readonly) NSFont *headerSliceLabelFont;
@property(readonly) NSGradient *headerSliceBackgroundGradient;
@property(readonly) NSColor *headerSliceBottomStrokeColor;
@property(readonly) NSColor *headerSliceTopStrokeColor;
@property(readonly) NSColor *greenEmphasisBoxStrokeColor;
@property(readonly) NSColor *greenEmphasisBoxBackgroundColor;
@property(readonly) NSColor *selectedTokenColor;
@property(readonly) NSColor *tokenStrokeColor;
@property(readonly) NSColor *tokenBackgroundColor;
@property(readonly) NSGradient *selectedTabBorderOuterGradient;
@property(readonly) NSGradient *selectedTabBorderInnerGradient;
@property(readonly) NSGradient *pressedTabBackgroundGradient;
@property(readonly) NSGradient *selectedTabBackgroundGradient;
@property(readonly) NSGradient *tabBackgroundGradient;
@property(readonly) NSFont *noContentMarkerSecondaryFont;
@property(readonly) NSFont *noContentMarkerFont;
@property(readonly) NSColor *noContentMarkerShadowColor;
@property(readonly) NSColor *noContentMarkerBackgroundColor;
@property(readonly) NSColor *findHiddenCharacterColor;
@property(readonly) NSColor *findUnderlineColor4;
@property(readonly) NSColor *findUnderlineColor3;
@property(readonly) NSColor *findUnderlineColor2;
@property(readonly) NSColor *findUnderlineColor1;
@property(readonly) NSGradient *findBackgroundGradient4;
@property(readonly) NSGradient *findBackgroundGradient3;
@property(readonly) NSGradient *findBackgroundGradient2;
@property(readonly) NSGradient *findBackgroundGradient1;
@property(readonly) double scmBlameAgeHue;
@property(readonly) NSColor *versionsConflictDiffStrokeColor2;
@property(readonly) NSColor *versionsConflictDiffHighlightColor2;
@property(readonly) NSColor *versionsConflictDiffStrokeColor1;
@property(readonly) NSColor *versionsConflictDiffHighlightColor1;
@property(readonly) NSColor *versionsDiffStrokeColor2;
@property(readonly) NSColor *versionsDiffHighlightColor2;
@property(readonly) NSColor *versionsDiffStrokeColor1;
@property(readonly) NSColor *versionsDiffHighlightColor1;
@property(readonly) NSColor *scmBlameAnnotationLineColor;
@property(readonly) NSColor *inspectorDisabledSliverLabelColor;
@property(readonly) NSColor *inspectorSliverLabelColor;
@property(readonly) NSFont *inspectorSliverLabelFont;
@property(readonly) NSColor *inspectorSectionTitleColor;
@property(readonly) NSFont *inspectorSectionTitleFont;
@property(readonly) NSFont *lineNumberFont;
@property(readonly) NSColor *messageBubbleButtonForegroundColor;
@property(readonly) NSColor *messageBubbleButtonBackgroundColor;
@property(readonly) NSGradient *scrollbarConflictMarkerGradient;
@property(readonly) NSGradient *scrollbarDiffMarkerGradient;
@property(readonly) NSGradient *scrollbarWarningMarkerGradient;
@property(readonly) NSGradient *scrollbarErrorMarkerGradient;
@property(readonly) NSColor *pageGuideColor;
@property(readonly) NSColor *analyzerFlowArrowsColor;
@property(readonly) NSGradient *foldingRibbonGradient;
@property(readonly) NSGradient *textCompletionScrollerSlotGradient;
@property(readonly) NSGradient *textCompletionScrollerKnobGradient;
@property(readonly) NSColor *textCompletionListNotRecommendedStrikeThroughColor;
@property(readonly) NSColor *textCompletionListTypeColor;
@property(readonly) NSColor *textCompletionListTitleColor;
@property(readonly) NSGradient *textCompletionListBackgroundGradient;
@property(readonly) NSFont *infoHeaderBigTitleFont;
@property(readonly) NSFont *scmLogFont;
@property(readonly) NSFont *variablesChangedFont;
@property(readonly) NSFont *variablesSummaryFont;
@property(readonly) NSFont *variablesValueFont;
@property(readonly) NSFont *variablesTypeFont;
@property(readonly) NSFont *variablesNameFont;
@property(readonly) NSColor *variablesChangedColor;
@property(readonly) NSColor *variablesSummaryColor;
@property(readonly) NSColor *variablesInactiveColor;
@property(readonly) NSColor *variablesTextColor;
@property(readonly) NSGradient *hudScrollerSlotGradient;
@property(readonly) NSGradient *hudScrollerKnobGradient;
@property(readonly) NSColor *breakpointStrokeColor;
@property(readonly) NSGradient *breakpointBackgroundGradient;
- (id)statusBadgeForegroundColorForView:(id)arg1 selected:(BOOL)arg2;
- (id)statusBadgeBackgroundColorForView:(id)arg1 selected:(BOOL)arg2;
@property(readonly) NSColor *statusBadgeInactiveColor;
@property(readonly) NSColor *statusBadgeActiveGraphiteColor;
@property(readonly) NSColor *statusBadgeActiveAquaColor;
@property(readonly) NSColor *statusBadgeFocusedGraphiteColor;
@property(readonly) NSColor *statusBadgeFocusedAquaColor;
- (id)navigatorSelectionTopCapColorForView:(id)arg1;
- (id)navigatorSelectionGradientForView:(id)arg1;
@property(readonly) NSColor *navigatorSelectionTopCapInactiveColor;
@property(readonly) NSColor *navigatorSelectionTopCapActiveGraphiteColor;
@property(readonly) NSColor *navigatorSelectionTopCapActiveAquaColor;
@property(readonly) NSColor *navigatorSelectionTopCapFocusedGraphiteColor;
@property(readonly) NSColor *navigatorSelectionTopCapFocusedAquaColor;
@property(readonly) NSGradient *navigatorSelectionInactiveGradient;
@property(readonly) NSGradient *navigatorSelectionActiveGraphiteGradient;
@property(readonly) NSGradient *navigatorSelectionActiveAquaGradient;
@property(readonly) NSGradient *navigatorSelectionFocusedGraphiteGradient;
@property(readonly) NSGradient *navigatorSelectionFocusedAquaGradient;
@property(readonly) NSColor *navigatorGroupBodyColor;
@property(readonly) NSGradient *navigatorGroupHeaderInactiveGradient;
@property(readonly) NSGradient *navigatorGroupHeaderGradient;
@property(readonly) NSColor *lozengeBodyColor;
@property(readonly) NSGradient *lozengeHeaderInactiveGradient;
@property(readonly) NSGradient *lozengeHeaderGradient;
@property(readonly) NSFont *secondaryListFont;
@property(readonly) NSFont *boldListFont;
@property(readonly) NSFont *listFont;
@property(readonly) NSGradient *selectedIconGradient;
@property(readonly) NSGradient *iconGradient;
@property(readonly) NSGradient *inactiveGradient;
@property(readonly) NSGradient *scopeBar2Gradient;
@property(readonly) NSGradient *scopeBar1Gradient;
@property(readonly) NSGradient *selectedGlassGradient;
@property(readonly) NSGradient *glassGradient;
@property(readonly) NSGradient *selectedActiveGradient;
@property(readonly) NSGradient *active2Gradient;
@property(readonly) NSGradient *active1Gradient;
@property(readonly) NSColor *glassSeparatorColor;
@property(readonly) NSGradient *sourceListSelectionGraphiteGradient;
@property(readonly) NSColor *sourceListSelectionTopCapGraphiteColor;
@property(readonly) NSGradient *sourceListSelectionAquaGradient;
@property(readonly) NSColor *sourceListSelectionTopCapAquaColor;
@property(readonly) NSColor *sourceListBackgroundColor;
@property(readonly) NSColor *blackShadow2Color;
@property(readonly) NSColor *blackShadow1Color;
@property(readonly) NSColor *whiteShadow2Color;
@property(readonly) NSColor *whiteShadow1Color;
@property(readonly) NSColor *parameterTextColor;
@property(readonly) NSColor *stroke7Color;
@property(readonly) NSColor *stroke6Color;
@property(readonly) NSColor *stroke5Color;
@property(readonly) NSColor *stroke4Color;
@property(readonly) NSColor *stroke3Color;
@property(readonly) NSColor *stroke2Color;
@property(readonly) NSColor *stroke1Color;
@property(readonly) NSColor *background2Color;
@property(readonly) NSColor *background1Color;
@property(readonly) NSColor *inactiveColor;
@property(readonly) NSColor *active2Color;
@property(readonly) NSColor *active1Color;
@property(readonly) NSColor *whiteColor;
@property(readonly) NSColor *blackColor;
@property(readonly) NSColor *windowBackgroundColor;
- (id)_initWithDictionary:(id)arg1;

@end

@interface DVTTileViewItem : NSObject <NSCopying, NSCoding>
{
    NSMutableData *_archive;
    DVTTileView *_layoutItemOwnerView;
    id _representedObject;
    NSView *_view;
    NSString *_title;
    struct CGRect _targetViewFrameRect;
    struct CGRect _appliedViewFrameRect;
    unsigned long long _containerReferenceCounter;
    struct __tileItemFlags {
        unsigned int _selected:1;
        unsigned int _clicked:1;
        unsigned int _removalNeeded:1;
        unsigned int _suppressSelectionChangeNotification:1;
        unsigned int _reservedAnimationContainer:28;
    } _layoutItemFlags;
}

- (id)accessibilityHitTest:(struct CGPoint)arg1;
- (void)accessibilityPerformAction:(id)arg1;
- (id)accessibilityActionDescription:(id)arg1;
- (id)accessibilityActionNames;
- (void)accessibilitySetValue:(id)arg1 forAttribute:(id)arg2;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAttributeNames;
- (BOOL)accessibilityIsIgnored;
- (id)description;
- (void)_finishShowAnimation;
- (void)_finishHideAnimation;
- (void)_applyTargetConfigurationWithAnimationMoveAndResize:(id *)arg1 show:(id *)arg2 hide:(id *)arg3;
- (void)_applyTargetConfigurationWithoutAnimation;
- (void)toggleSelected:(id)arg1;
- (BOOL)isSelected;
- (void)setSelected:(BOOL)arg1;
- (void)_setSelectedWithoutNotification:(BOOL)arg1;
- (struct CGRect)_targetViewFrameRect;
- (void)_setTargetViewFrameRect:(struct CGRect)arg1;
- (BOOL)_isRemovalNeeded;
- (void)_setRemovalNeeded:(BOOL)arg1;
- (id)title;
- (void)setTitle:(id)arg1;
- (id)view;
- (void)setView:(id)arg1;
- (id)representedObject;
- (void)setRepresentedObject:(id)arg1;
- (id)layoutView;
- (void)_setLayoutItemOwnerView:(id)arg1;
- (void)_decreaseContainerReferenceCounter;
- (void)_increaseContainerReferenceCounter;
- (BOOL)isEqual:(id)arg1;
- (void)_releaseResources;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)_copyConnectionsOfView:(id)arg1 referenceObject:(id)arg2 toView:(id)arg3 referenceObject:(id)arg4;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)init;

@end

@interface DVTTimerBlockWrapper : NSObject <DVTObservingToken>
{
    NSTimer *timer;
    id handler;
}

- (void)fire:(id)arg1;
- (void)cancel;
@property(readonly, getter=isCancelled) BOOL cancelled;
- (id)initWithTimeInterval:(double)arg1 repeats:(BOOL)arg2 handler:(id)arg3;

@end

@interface DVTTitleBarButton : NSView
{
    NSString *_title;
    NSTextFieldCell *_titleCell;
    BOOL _noDragRectComputed;
}

- (void)accessibilityPerformAction:(id)arg1;
- (id)accessibilityActionDescription:(id)arg1;
- (id)accessibilityActionNames;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAttributeNames;
- (BOOL)accessibilityIsIgnored;
- (void)setTitle:(id)arg1;
- (void)windowDidDeminiaturize:(id)arg1;
- (void)windowDidEndSheet:(id)arg1;
- (void)viewDidEndLiveResize;
- (void)setFrame:(struct CGRect)arg1 ignoringInternalGeometry:(BOOL)arg2;
- (void)setFrame:(struct CGRect)arg1;
- (void)updateFrameUsingAvailableSpace:(double)arg1;
- (void)updateFrame;
- (void)resetNoDragRect;
- (void)flagsChanged:(id)arg1;
- (id)title;
- (void)mouseUp:(id)arg1;
- (void)rightMouseDown:(id)arg1;
- (void)mouseDown:(id)arg1;
- (BOOL)shouldShowPathPopUpMenuFromMouseDown:(id)arg1;
- (void)showPathPopUpMenu;
- (void)doNothing:(id)arg1;
- (BOOL)isFlipped;
- (void)drawRect:(struct CGRect)arg1;
- (struct CGRect)titleRectInWindow;
- (struct CGRect)titleRect;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface DVTTokenizedEditingUndoHelper : NSObject
{
    /* NSUndoTextOperation * */ id _undoTextOperation;
    DVTMutableRangeArray *_affectedRanges;
    DVTMutableRangeArray *_replacementRanges;
    unsigned long long _editedTokenIndex;
}

@property(readonly) NSArray *replacementRanges; // @synthesize replacementRanges=_replacementRanges;
@property(readonly) NSArray *affectedRanges; // @synthesize affectedRanges=_affectedRanges;
- (void)didUndoRedo:(id)arg1;
- (void)willUndoRedo:(id)arg1;
- (void)didCoalesceAffectedRange:(struct _NSRange)arg1 replacementRange:(struct _NSRange)arg2 selectedRange:(struct _NSRange)arg3 text:(id)arg4;
- (void)willCoalesceAffectedRange:(struct _NSRange)arg1 replacementRange:(struct _NSRange)arg2 selectedRange:(struct _NSRange)arg3 text:(id)arg4;
- (id)initWithUndoTextOperation:(id)arg1 affectedRange:(struct _NSRange)arg2 layoutManager:(id)arg3 undoManager:(id)arg4 replacementRange:(struct _NSRange)arg5;

@end

@interface DVTToolTip : NSObject
{
}

+ (id)boldToolTipFont;
+ (id)toolTipFont;
+ (id)attributedToolTipStringForString:(id)arg1;
+ (struct CGPoint)toolTipPositionForMouseLocation:(struct CGPoint)arg1;
+ (void)orderOutToolTip;
+ (void)fadeOut:(id)arg1;
+ (void)showToolTip:(id)arg1 withSourceRect:(struct CGRect)arg2 andMouseLocation:(struct CGPoint)arg3;
+ (void)showToolTip:(id)arg1 withSourceRect:(struct CGRect)arg2 andMouseLocation:(struct CGPoint)arg3 maximumWidth:(double)arg4;
+ (id)scheduledTimerWithInterval:(double)arg1;

@end

@interface DVTToolTipManager : NSObject
{
    DVTMapTable *registeredViews;
    id eventMonitor;
    NSTimer *timer;
    long long enabledBlocks;
}

+ (id)sharedInstance;
- (void)mouseRested:(id)arg1;
- (void)unregisterViewForToolTips:(id)arg1;
- (void)registerViewForToolTips:(id)arg1 delegate:(id)arg2;
- (id)allViews;
- (id)delegateForView:(id)arg1;
- (void)monitorEvent:(id)arg1;
- (void)scheduleMouseRested;
- (void)unscheduleMouseRested;
- (void)enableTooltips;
- (void)disableTooltips;
- (BOOL)tooltipsAreEnabled;
- (id)init;

@end

@interface DVTToolTipView : NSView
{
    NSMutableAttributedString *string;
    NSColor *backgroundColor;
    double maxWidth;
}

- (void)drawRect:(struct CGRect)arg1;
- (BOOL)isFlipped;
- (void)setAttributedString:(id)arg1;
- (void)setMaxWidth:(double)arg1;
- (double)maxWidth;
- (id)initWithFrame:(struct CGRect)arg1;

@end

@interface DVTToolbarPopUpViewController : DVTGenericButtonViewController
{
    NSArray *_images;
}

- (BOOL)validateMenuItem:(id)arg1;
- (id)menuFormRepresentation;
- (void)_menuItemFormRepresentationAction:(id)arg1;
- (void)_buttonAction:(id)arg1;
- (id)_popUpButton;
- (id)initWithPopUpButton:(id)arg1 images:(id)arg2 actionBlock:(id)arg3 itemIdentifier:(void)arg4 window:(id)arg5;

@end

@interface DVTTypeCompletionHandler : NSObject
{
    NSMutableString *_completionString;
    NSTimer *_completionWillExpireTimer;
    NSTimer *_completionDisplayShouldExpireTimer;
    NSString *_runLoopMode;
    id _delegate;
    struct {
        unsigned int delegateImplementsTypeCompletionStringForObject:1;
        unsigned int delegateImplementsCompletionWillExpire:1;
        unsigned int delegateImplementsCompletionDisplayShouldExpire:1;
        unsigned int _reserved:5;
    } _flags;
}

+ (id)typeCompletionHandlerWithDelegate:(id)arg1;
+ (id)typeCompletionHandlerWithDelegate:(id)arg1 runLoopMode:(id)arg2;
- (id)processTypeSelectionInput:(id)arg1 objects:(id)arg2 index:(unsigned long long *)arg3 startingAtObject:(id)arg4;
- (id)processTypeSelectionInput:(id)arg1 objects:(id)arg2 index:(unsigned long long *)arg3;
- (void)invalidate;
- (void)expireCompletionDisplay:(id)arg1;
- (void)expireCompletion:(id)arg1;
- (void)clearAndRenewCompletionString;
- (void)clearAndRenewCompletionDisplayShouldExpireTimer;
- (void)clearCompletionDisplayShouldExpireTimer;
- (void)clearAndRenewCompletionWillExpireTimer;
- (void)clearCompletionWillExpireTimer;
- (id)currentTypeCompletionString;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (id)initWithDelegate:(id)arg1 runLoopMode:(id)arg2;

@end

@interface DVTURLMatch : NSObject
{
    struct _NSRange _range;
    NSString *_url;
}

@property(copy) NSString *url; // @synthesize url=_url;
@property struct _NSRange range; // @synthesize range=_range;
- (id)description;
- (id)init;
- (id)initWithRange:(struct _NSRange)arg1 url:(id)arg2;

@end

@interface DVTURLifier : NSObject
{
}

+ (id)urlMatchesForString:(id)arg1;

@end

@interface DVTUndoReplaceCharacters : NSObject /* : NSUndoReplaceCharacters */
{
    DVTTokenizedEditingUndoHelper *_tokenizedEditingUndoHelper;
}

- (void)undoRedo:(id)arg1;
- (id)description;
- (id)replacementRanges;
- (id)affectedRanges;
- (id)initWithAffectedRange:(struct _NSRange)arg1 layoutManager:(id)arg2 undoManager:(id)arg3 replacementRange:(struct _NSRange)arg4;
- (id)firstTextViewForTextStorage:(id)arg1;

@end

@interface DVTUndoTyping : NSObject /* : NSUndoTyping */
{
    DVTTokenizedEditingUndoHelper *_tokenizedEditingUndoHelper;
}

- (void)undoRedo:(id)arg1;
- (id)description;
- (BOOL)coalesceAffectedRange:(struct _NSRange)arg1 replacementRange:(struct _NSRange)arg2 selectedRange:(struct _NSRange)arg3 text:(id)arg4;
- (id)replacementRanges;
- (id)affectedRanges;
- (id)initWithAffectedRange:(struct _NSRange)arg1 layoutManager:(id)arg2 undoManager:(id)arg3 replacementRange:(struct _NSRange)arg4;
- (id)firstTextViewForTextStorage:(id)arg1;

@end

@interface DVTViewControllerToolbarItem : NSToolbarItem
{
    DVTToolbarViewController *_viewController;
}

+ (id)toolbarItemWithViewController:(id)arg1;
@property(retain) DVTToolbarViewController *viewController; // @synthesize viewController=_viewController;

@end

@interface DVTWindowActivationNotifier : NSObject
{
    DVTMapTable *_activationStateObservers;
    long long _nextKey;
    NSWindow *_window;
}

- (void)windowDidResignMain:(id)arg1;
- (void)windowDidBecomeMain:(id)arg1;
- (void)windowDidResignKey:(id)arg1;
- (void)windowDidBecomeKey:(id)arg1;
- (void)notifyObserversOfStateChange:(long long)arg1;
- (id)registerActivationStateObserver:(id)arg1;
- (void)dealloc;
- (id)initWithWindow:(id)arg1;

@end

@interface DVTWindowProxyDragButton : NSButton
{
    struct {
        unsigned int waitForDrag:1;
        unsigned int currentlyDragging:1;
        unsigned int shouldDrag:1;
        unsigned int RESERVED:29;
    } _wpdbFlags;
    NSEvent *_mouseDownEvent;
    id _representedURLBlock;
    id _representedDocumentBlock;
}

+ (void)initialize;
@property(copy) id representedDocumentBlock; // @synthesize representedDocumentBlock=_representedDocumentBlock;
@property(copy, nonatomic) id representedURLBlock; // @synthesize representedURLBlock=_representedURLBlock;
- (void)pathCellClicked:(id)arg1;
- (void)showPopUp;
- (struct CGPoint)menuLocation;
- (Class)menuClass;
- (BOOL)mouseDownCanMoveWindow;
- (void)mouseDragged:(id)arg1;
- (void)mouseDown:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)rightMouseDown:(id)arg1;
- (void)_showDragError:(int)arg1 forFilename:(id)arg2;
- (void)_dragFile:(id)arg1 fromRect:(struct CGRect)arg2 slideBack:(BOOL)arg3 event:(id)arg4;
- (unsigned long long)draggingSourceOperationMaskForLocal:(BOOL)arg1;
- (BOOL)shouldDelayWindowOrderingForEvent:(id)arg1;

@end

@interface DVTWindowProxyDragButtonCell : NSButtonCell
{
}

- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (BOOL)_preferInactiveBezelArtInView:(id)arg1;

@end

@interface NSAffineTransform (DVTNSAffineTransformAdditions)
- (struct CGRect)dvt_transformRect:(struct CGRect)arg1;
@end

@interface NSAlert (DVTNSAlertAdditions)
- (void)dvt_beginAlertModalForWindow:(id)arg1 completionHandler:(id)arg2;
- (void)dvt_alertDidEnd:(id)arg1 returnCode:(long long)arg2 contextInfo:(void *)arg3;
@end

@interface NSAttributedString (DVTNSAttributedStringAdditions)
- (struct CGSize)dvt_sizeConstrainedToWidth:(double)arg1;
- (void)dvt_drawInRectByVerticallyCenteringAndTruncating:(struct CGRect)arg1;
- (id)dvt_stringByTruncatingMultilineTextToFitSize:(struct CGSize)arg1;
- (unsigned long long)dvt_nextSubwordFromIndex:(unsigned long long)arg1 forward:(BOOL)arg2;
- (unsigned long long)dvt_nextWordFromIndex:(unsigned long long)arg1 forward:(BOOL)arg2;
@end

@interface NSBezierPath (DVTNSBezierPathAdditions)
+ (id)dvt_bezierPathWithRoundRectInRect:(struct CGRect)arg1 topLeftRadius:(double)arg2 topRightRadius:(double)arg3 bottomRightRadius:(double)arg4 bottomLeftRadius:(double)arg5;
+ (id)dvt_bezierPathWithRoundRectInRect:(struct CGRect)arg1 radius:(double)arg2;
+ (id)dvt_bezierPathWithLineFrom:(struct CGPoint)arg1 to:(struct CGPoint)arg2;
- (id)dvt_bezierPathFromStrokedPath;
- (BOOL)dvt_isStrokeHitByPoint:(struct CGPoint)arg1;
- (void)dvt_applyPathToContext:(struct CGContext *)arg1;
- (void)dvt_fillWithLinearGradientFromPoint:(struct CGPoint)arg1 withColor:(id)arg2 toPoint:(struct CGPoint)arg3 withColor:(id)arg4;
- (void)dvt_fillWithLinearGradientFromPoint:(struct CGPoint)arg1 toPoint:(struct CGPoint)arg2 withColors:(id)arg3 atStops:(id)arg4;
@end

@interface NSButton (DVTToolbarViewControllerAdditions)
+ (id)dvt_toolbarButtonWithImage:(id)arg1 buttonType:(unsigned long long)arg2;
@end

@interface NSClipView (DVTNSClipViewAdditions)
- (BOOL)dvt_autoscrollWithExternalDragEvent:(id)arg1 animate:(BOOL)arg2;
- (struct CGSize)dvt_effectiveAutoscrollDelta;
- (void)setDvt_autoscrollDelta:(id)arg1;
- (id)dvt_autoscrollDelta;
- (struct CGSize)dvt_defaultAutoscrollDelta;
@end

@interface NSColor (DVTNSColorAdditions)
+ (id)dvt_mulitpleValuesPlaceholderColorWithSize:(struct CGSize)arg1;
+ (id)dvt_colorFromRGBAString:(id)arg1;
- (id)dvt_complementaryColor;
- (id)dvt_RGBAStringRepresentation;
@end

@interface NSColorList (DVTNSColorListAdditions)
+ (id)defaultSystemColorList;
@end

@interface NSCursor (DVTSourceTextViewExtras)
+ (id)IBeamCursor;
@end

@interface NSError (DVTNSErrorAppKitAdditions)
+ (id)dvt_errorWithDomain:(id)arg1 errorCode:(long long)arg2 message:(id)arg3 recoverySuggestion:(id)arg4 recoveryOptions:(id)arg5 andErrorPanelProvider:(id)arg6;
- (id)dvt_errorByAddingErrorPanelProvider:(id)arg1;
@end

@interface NSEvent (DVTMorphingDragImageControllerExtras)
- (BOOL)_DVTMorphingDragImageController_isEscapeKeyEvent;
- (BOOL)_DVTMorphingDragImageController_isKeyEvent:(unsigned short)arg1;
@end

@interface NSEvent (DVTNSEventAdditions)
- (struct CGPoint)dvt_flooredLocationInWindow;
- (struct CGPoint)dvt_flooredLocationInView:(id)arg1;
- (BOOL)dvt_isDragEventAnIntentialLeftDragWithRespectToMouseDown:(id)arg1;
- (BOOL)dvt_isControlKeyDown;
- (BOOL)dvt_isCommandKeyDown;
- (BOOL)dvt_isShiftKeyDown;
- (BOOL)dvt_isOptionKeyDown;
- (BOOL)dvt_isEscapeKeyDown;
- (struct CGPoint)dvt_locationOnScreen;
- (struct CGPoint)dvt_locationInWindow:(id)arg1;
- (struct CGPoint)dvt_locationInView:(id)arg1;
@end

@interface NSEvent (DVTRolloverTrackingButtonAdditions)
+ (BOOL)mouseButtonIsDown;
@end

@interface NSFont (DVTPrivate)
- (unsigned long long)metaFontType;
@end

@interface NSFontDescriptor (DVTNSFontDescriptorAdditions)
+ (id)fontDescriptorWithFamilyName:(id)arg1;
@end

@interface NSGraphicsContext (DVTNSGraphicsContextAdditions)
- (void)dvt_temporarilyMakeCurrentAndDoOperationPerservingState:(id)arg1;
- (void)dvt_drawBlockByPreservingState:(id)arg1;
@end

@interface NSImage (DVTNSImageAdditions)
+ (id)dvt_imageWithSize:(struct CGSize)arg1 scaleFactors:(id)arg2 flipped:(BOOL)arg3 fromCommands:(id)arg4;
+ (id)dvt_imageWithSize:(struct CGSize)arg1 fromCommands:(id)arg2;
+ (id)dvt_imageWithSize:(struct CGSize)arg1 flipped:(BOOL)arg2 fromCommands:(id)arg3;
+ (id)dvt_imageWithPDFDrawingWithSize:(struct CGSize)arg1 andCommands:(id)arg2;
+ (id)dvt_fixItErrorIcon;
+ (id)dvt_fixItWarningIcon;
+ (id)dvt_successIcon;
+ (id)dvt_issueIcon;
+ (id)dvt_warningIcon;
+ (id)dvt_errorIcon;
+ (id)dvt_questionMarkIcon;
+ (id)dvt_unknownFSObjectIcon;
+ (BOOL)dvt_isTemplateName:(id)arg1;
+ (id)dvt_imageNamed:(id)arg1 inBundleForExtension:(id)arg2;
+ (id)dvt_imageNamed:(id)arg1 inBundleForClass:(Class)arg2;
+ (id)dvt_imageNamed:(id)arg1 inBundle:(id)arg2;
- (void)dvt_drawInRect:(struct CGRect)arg1 operation:(unsigned long long)arg2 fraction:(double)arg3 unflip:(BOOL)arg4;
@end

@interface NSMenu (DVTClippedTabsIndicatorExtras)
- (void)popUpInRect:(struct CGRect)arg1 ofView:(id)arg2 didInsertInitialSeparator:(char *)arg3;
@end

@interface NSMenu (DVTNSMenuExtras)
- (void)removeUselessMenuItemSeparators;
@end

@interface NSMenuItem (DVTNSMenuItemAdditions)
- (void)dvt_setShowsKeyEquivalent:(BOOL)arg1;
- (id)_dvt_actualKeyEquivalent;
- (void)_dvt_clearSavedKeyEquivalent;
- (id)_dvt_savedKeyEquivalent;
- (void)_dvt_saveKeyEquivalent:(id)arg1;
@end

@interface NSMutableArray (DVTNSArrayExtras)
- (BOOL)removeUselessMenuItemSeparators;
@end

@interface NSMutableAttributedString (DVTNSAttributedStringAdditions)
- (void)dvt_urlifyAttributedString;
@end

@interface NSObject (DVTAssertionModelObjectAdditions)
- (id)annotation_uniqueObjectLifetimeIdentifier;
@end

@interface NSObject (DVTBindingHelperAccess)
@property(readonly) DVTBindingHelper *bindingHelper;
@end

@interface NSObject (DVTBindingUtilities)
+ (void)dvtSubstituteBindingMachinery;
- (id)dvt_bind:(id)arg1 toObject:(id)arg2 withKeyPath:(id)arg3 options:(id)arg4;
- (void)updateBoundValueForBinding:(id)arg1;
- (id)dvtExtraBindings;
@end

@interface NSParagraphStyle (DVTNSParagraphStyleAdditions)
+ (id)dvt_paragraphStyleWithAlignment:(unsigned long long)arg1 andLineBreakMode:(unsigned long long)arg2;
+ (id)dvt_paragraphStyleWithAlignment:(unsigned long long)arg1;
+ (id)dvt_paragraphStyleWithLineBreakMode:(unsigned long long)arg1;
@end

@interface NSPopUpButton (DVTToolbarViewControllerAdditions)
+ (id)dvt_toolbarPopUpButtonWithMenu:(id)arg1 buttonType:(unsigned long long)arg2;
@end

@interface NSResponder (DVTNSResponderAdditions)
- (id)dvt_findTargetForAction:(SEL)arg1 sender:(id)arg2 inResponderChainOfResponder:(id)arg3;
- (BOOL)dvt_isDescendantOfResponder:(id)arg1;
@end

@interface NSScreen (DVTNSScreenAdditions)
+ (id)dvt_backingScaleFactors;
+ (struct CGPoint)dvt_coreGraphicsScreenPointForAppKitScreenPoint:(struct CGPoint)arg1;
+ (id)dvt_screenContainingPoint:(struct CGPoint)arg1;
- (struct CGRect)dvt_visibleFrame;
@end

@interface NSScreen (DVTNSScreenExtras)
+ (id)screenForMouseLocation;
@end

@interface NSString (DVTNSStringExtras)
- (void)_dvt_drawAtPoint:(struct CGPoint)arg1 font:(id)arg2 textColor:(id)arg3;
- (double)_dvt_widthWithFont:(id)arg1;
- (void)drawDoubledInRect:(struct CGRect)arg1 withTopColor:(id)arg2 bottomColor:(id)arg3 font:(id)arg4 centered:(BOOL)arg5 flipped:(BOOL)arg6 topColorInFront:(BOOL)arg7;
@end

@interface NSString (DVTPlistComment)
- (BOOL)isPlistCommentNode;
@end

@interface NSString (DVTPlistEditingAdditions)
- (id)dvt_stringByEscapingForXML;
@end

@interface NSString (DVTSizeAdditions)
- (struct CGSize)dvt_sizeWithAttributes:(id)arg1 constrainedToWidth:(double)arg2;
@end

@interface NSTableView (DVTNSTableViewAdditions)
- (void)dvt_scrollRowToVisibleCentered:(long long)arg1;
- (BOOL)dvt_autoscrollWithExternalDragEvent:(id)arg1 animate:(BOOL)arg2;
@end

@interface NSTextFieldCell (DVTNSTextFieldCellAdditions)
- (id)dvt_baselinesForFrame:(struct CGRect)arg1;
@end

@interface NSTimer (DVTNSTimerAdditions)
+ (id)dvt_scheduledTimerWithTimeInterval:(double)arg1 repeats:(BOOL)arg2 handler:(id)arg3;
@end

@interface NSTreeController (DVTNSTreeControllerAdditions)
- (id)dvt_indexPathsForObjects:(id)arg1;
@end

@interface NSTreeNode (DVTNSTreeControllerAdditions)
- (void)_addIndexPathsOfObjects:(id)arg1 toArray:(id)arg2;
@end

@interface NSTreeNode (DVTTreeNodeUtilities)
- (id)dvt_representedObjectLineage;
@end

/*
@interface NSUndoReplaceCharacters (DVTUndoReplaceCharacters)
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (id)attributedString;
- (void)setAttributedString:(id)arg1;
- (struct _NSRange)replacementRange;
- (void)setReplacementRange:(struct _NSRange)arg1;
@end

@interface NSUndoTextOperation (DVTUndoTextOperation)
@property(copy) NSAttributedString *attributedString;
@property(readonly) NSLayoutManager *layoutManager;
@property(readonly) NSUndoManager *undoManager;
@property struct _NSRange replacementRange;
@property struct _NSRange affectedRange;
@end

@interface NSUndoTyping (DVTUndoTyping)
+ (id)allocWithZone:(struct _NSZone *)arg1;
- (id)attributedString;
- (void)setAttributedString:(id)arg1;
- (struct _NSRange)replacementRange;
- (void)setReplacementRange:(struct _NSRange)arg1;
@end
*/

@interface NSUserDefaults (DVTNSUserDefaultsAdditions)
- (id)dvt_fontForKey:(id)arg1;
- (void)dvt_setFont:(id)arg1 forKey:(id)arg2;
- (id)dvt_colorForKey:(id)arg1;
- (void)dvt_setColor:(id)arg1 forKey:(id)arg2;
@end

@interface NSView (DVTAttachedInfoWindow)
- (void)dvt_presentAttachedInfoPanelWithController:(id)arg1 relativeToRect:(struct CGRect)arg2 atEdge:(unsigned long long)arg3 buttonTitles:(id)arg4 closeWhenKeyViewFocusIsLost:(BOOL)arg5 completionBlock:(id)arg6;
- (void)dvt_presentAttachedInfoPanelWithController:(id)arg1 relativeToRect:(struct CGRect)arg2 atEdge:(unsigned long long)arg3 withImage:(id)arg4 closeWhenKeyViewFocusIsLost:(BOOL)arg5 completionBlock:(id)arg6;
- (void)dvt_presentAttachedInfoPanelWithController:(id)arg1 relativeToRect:(struct CGRect)arg2 atEdge:(unsigned long long)arg3 withImage:(id)arg4 buttonTitles:(id)arg5 closeWhenKeyViewFocusIsLost:(BOOL)arg6 completionBlock:(id)arg7;
@end

@interface NSView (DVTNSViewAdditions)
- (void)dvt_viewDidEndLiveAnimation;
- (void)dvt_viewWillBeginLiveAnimation;
- (void)dvt_setFrameHeight:(double)arg1;
- (void)dvt_setFrameWidth:(double)arg1;
- (void)dvt_drawBubbledPlaceholderMessage:(id)arg1;
- (BOOL)dvt_autoscrollWithExternalDragEvent:(id)arg1 animate:(BOOL)arg2;
- (struct CGRect)dvt_convertRectFromScreen:(struct CGRect)arg1;
- (struct CGRect)dvt_convertRectToScreen:(struct CGRect)arg1;
- (struct CGPoint)dvt_convertPointToScreen:(struct CGPoint)arg1;
- (struct CGPoint)dvt_convertPointFromScreen:(struct CGPoint)arg1;
- (struct CGPoint)dvt_integralPointInBase:(struct CGPoint)arg1;
- (struct CGRect)dvt_integralRectInBase:(struct CGRect)arg1;
@end

@interface NSView (DVTSlidingExtras)
- (void)setFrameWithRedraw:(struct CGRect)arg1;
- (void)setSlidingFrame:(struct CGRect)arg1;
- (struct CGRect)slidingFrame;
@end

@interface NSWindow (DVTHacks)
- (id)draggedImageState:(id)arg1;
- (id)registeredDraggedTypes;
@end

@interface NSWindow (DVTMainViewControllerMonitorAdditions)
+ (BOOL)automaticallyNotifiesObserversOfDvt_mainViewControllerMonitor;
+ (BOOL)automaticallyNotifiesObserversOfDvt_mainViewController;
- (void)setDvt_mainViewControllerMonitor:(id)arg1;
- (id)dvt_mainViewControllerMonitor;
- (void)dvt_viewControllerWillUninstall:(id)arg1;
- (void)dvt_updateMainViewControllerUsingResponderChain;
- (void)setDvt_mainViewController:(id)arg1;
@property(readonly) DVTViewController *dvt_mainViewController;
@end

@interface NSWindow (DVTMorphingDragImageControllerExtras)
- (id)_DVTMorphingDragImageController_displayIfNeeded;
@end

@interface NSWindow (DVTNSWindowAdditions)
+ (id)dvt_visibleWindowsFromFrontToBack;
- (id)dvt_registerActivationStateObserver:(id)arg1;
- (id)dvt_windowActivationNotifier;
- (void)dvt_centerOnMainMenuScreen;
@property(retain) NSString *dvt_frameAsString;
@property(readonly) BOOL dvt_inFullScreenMode;
@end

@interface NSWindow (DVTNSWindowExtras)
+ (BOOL)_dvt_shouldZoomOnDoubleClick;
- (id)dvt_toolbarBottomEdgeLowerColor;
- (id)dvt_toolbarBottomEdgeUpperColor;
- (id)dvt_contentInsetColor;
- (id)dvt_contentSeparatorColor;
- (id)dvt_imageForRect:(struct CGRect)arg1;
- (BOOL)_dvt_hasActiveAppearanceIgnoringKeyFocus;
- (BOOL)dvt_makeNonDeferred;
- (struct CGImage *)_dvt_createCGImageForRect:(struct CGRect)arg1 excludingChildWindows:(id)arg2;
@end

@interface NSWindow (DVTTabButtonExtras)
- (BOOL)makeNonDeferred;
- (struct CGImage *)createCGImageForRect:(struct CGRect)arg1 excludingChildWindows:(id)arg2;
- (id)imageForRect:(struct CGRect)arg1;
@end

@interface _DVTActionPullDownButton : NSPopUpButton
{
}

- (void)sizeToFit;
- (id)initWithFrame:(struct CGRect)arg1 pullsDown:(BOOL)arg2;
- (void)setMenu:(id)arg1;

@end

@interface _DVTAttachedInfoWindowContentView : NSView
{
    NSBezierPath *_borderPath;
    double _alpha;
    NSView *_mainView;
    NSView *_closeArea;
    NSButton *_tabButton;
    NSImage *_tabImage;
    struct CGSize _tabSize;
    unsigned long long _tabEdge;
    NSImage *_scalingContentImage;
    NSArray *_subviewsDuringScaling;
    double _scale;
}

+ (id)defaultAnimationForKey:(id)arg1;
@property double scale; // @synthesize scale=_scale;
- (void)_generateScalingContentImage;
- (BOOL)acceptsFirstMouse:(id)arg1;
- (void)setTabImage:(id)arg1 forTabSize:(struct CGSize)arg2 onEdge:(unsigned long long)arg3;
- (void)setTabButton:(id)arg1;
- (void)setCloseArea:(id)arg1;
- (void)setMainView:(id)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (void)setFrameSize:(struct CGSize)arg1;
- (void)setFrame:(struct CGRect)arg1;
- (void)computeBorderPath;
- (void)_layoutViews;
- (void)setAlpha:(double)arg1;
- (BOOL)isOpaque;
- (id)initWithFrame:(struct CGRect)arg1;
- (id)init;

@end

@interface _DVTDragWindowAnimation : NSAnimation
{
}

- (id)runLoopModesForAnimating;
- (void)setCurrentProgress:(float)arg1;

@end

@interface _DVTFileMergeDiffVitalStats : NSObject
{
    long long _lineNumber;
    long long _numLines;
    long long _numAddLines;
    int _operation;
}

@property int operation; // @synthesize operation=_operation;
@property long long numAddLines; // @synthesize numAddLines=_numAddLines;
@property long long numLines; // @synthesize numLines=_numLines;
@property long long lineNumber; // @synthesize lineNumber=_lineNumber;

@end

@interface _DVTGrowMiniWindowAnimation : NSAnimation
{
}

- (void)setCurrentProgress:(float)arg1;

@end

@interface _DVTInfoPlistValueCellToken : NSObject
{
    NSString *_displayString;
    NSString *_representedString;
    BOOL _editable;
    struct _NSRange _range;
}

@property(readonly, getter=isEditable) BOOL editable; // @synthesize editable=_editable;
@property struct _NSRange range; // @synthesize range=_range;
@property(copy) NSString *displayString; // @synthesize displayString=_displayString;
@property(copy) NSString *representedString; // @synthesize representedString=_representedString;
- (id)description;
- (id)initWithRepresentedString:(id)arg1 displayString:(id)arg2 range:(struct _NSRange)arg3 editable:(BOOL)arg4;

@end

@interface _DVTKitPrivateClassForFindingBundle : NSObject
{
}

@end

@interface _DVTLozengeTextFieldCell : NSTextFieldCell
{
    NSImage *_cachedImage;
    NSString *_cachedStringValue;
}

+ (id)_lozengeImageWithSize:(struct CGSize)arg1 backgroundColor:(id)arg2 attributedTitle:(id)arg3;
- (struct CGSize)cellSize;
- (void)drawWithFrame:(struct CGRect)arg1 inView:(id)arg2;
- (id)_cachedImageWithFrame:(struct CGRect)arg1 inView:(id)arg2;

@end

@interface _DVTMainViewControllerMonitor : NSObject
{
    NSWindow *_window;
    id _windowWillCloseObserver;
    id _windowDidUpdateObserver;
    id <DVTObservingToken> _firstResponderObservingToken;
    DVTViewController *_mainViewController;
}

@property(retain) DVTViewController *mainViewController; // @synthesize mainViewController=_mainViewController;
- (id)initWithWindow:(id)arg1;

@end

@interface _DVTMarkerList : NSObject
{
    struct CGRect _markRect;
    NSMutableArray *_marks;
    NSMutableArray *_markRects;
}

- (id)markRectList;
- (long long)numMarkRects;
- (struct CGRect)addMark:(double)arg1;
- (void)clearMarks;
- (struct CGRect)markRect;
- (void)setMarkRect:(struct CGRect)arg1;
- (void)_recomputeMarkRects;
- (void)_mergeMarkRect:(struct CGRect)arg1;
- (struct CGRect)_rectForMark:(double)arg1;
- (id)initWithSlotRect:(struct CGRect)arg1;

@end

@interface _DVTMarkerMenuItem : NSMenuItem
{
}

@end

@interface _DVTMutableDraggingInfo : NSObject <NSDraggingInfo>
{
    NSWindow *draggingDestinationWindow;
    unsigned long long draggingSourceOperationMask;
    struct CGPoint draggingLocation;
    NSImage *draggedImage;
    NSPasteboard *draggingPasteboard;
    id draggingSource;
    BOOL _animatesToDestination;
    long long _numberOfValidItemsForDrop;
    long long _draggingFormation;
}

@property long long draggingFormation; // @synthesize draggingFormation=_draggingFormation;
@property long long numberOfValidItemsForDrop; // @synthesize numberOfValidItemsForDrop=_numberOfValidItemsForDrop;
@property BOOL animatesToDestination; // @synthesize animatesToDestination=_animatesToDestination;
- (void)enumerateDraggingItemsWithOptions:(unsigned long long)arg1 forView:(id)arg2 classes:(id)arg3 searchOptions:(id)arg4 usingBlock:(id)arg5;
- (id)namesOfPromisedFilesDroppedAtDestination:(id)arg1;
- (void)slideDraggedImageTo:(struct CGPoint)arg1;
- (long long)draggingSequenceNumber;
- (void)setDraggingSource:(id)arg1;
- (id)draggingSource;
- (void)setDraggingPasteboard:(id)arg1;
- (id)draggingPasteboard;
- (void)setDraggedImage:(id)arg1;
- (id)draggedImage;
- (struct CGPoint)draggedImageLocation;
- (void)setDraggingLocation:(struct CGPoint)arg1;
- (struct CGPoint)draggingLocation;
- (void)setDraggingSourceOperationMask:(unsigned long long)arg1;
- (unsigned long long)draggingSourceOperationMask;
- (void)setDraggingDestinationWindow:(id)arg1;
- (id)draggingDestinationWindow;

@end

@interface _DVTPlistStatusItemProxy : NSObject
{
    id _parent;
    NSCell *_buttonCell;
    struct CGRect _frame;
    NSString *_title;
}

+ (id)statusItemProxyWithButtonCell:(id)arg1 parent:(id)arg2 frame:(struct CGRect)arg3 title:(id)arg4;
@property(readonly) struct CGRect frame; // @synthesize frame=_frame;
@property(readonly) NSCell *buttonCell; // @synthesize buttonCell=_buttonCell;
@property(readonly) id parent; // @synthesize parent=_parent;
- (unsigned long long)hash;
- (BOOL)isEqual:(id)arg1;
- (id)accessibilityActionNames;
- (id)accessibilityHitTest:(struct CGPoint)arg1;
- (BOOL)accessibilityIsAttributeSettable:(id)arg1;
- (id)accessibilityAttributeValue:(id)arg1;
- (id)accessibilityAttributeNames;
- (BOOL)accessibilityIsIgnored;
- (id)initWithButtonCell:(id)arg1 parent:(id)arg2 frame:(struct CGRect)arg3 title:(id)arg4;

@end

@interface _DVTSegmentedCell : NSSegmentedCell
{
    BOOL _useMenuDelay;
    BOOL _useRadioDrawingStyle;
    DVTPointerArray *_segmentImages;
}

@property BOOL useRadioDrawingStyle; // @synthesize useRadioDrawingStyle=_useRadioDrawingStyle;
@property BOOL useMenuDelay; // @synthesize useMenuDelay=_useMenuDelay;
- (unsigned long long)_applicableTrackingModeForSegment:(long long)arg1;
- (void)setControlSize:(unsigned long long)arg1;
- (void)setImage:(id)arg1 forSegment:(long long)arg2;
- (id)_adjustImage:(id)arg1 forControlSize:(unsigned long long)arg2;
- (void)setSegmentCount:(long long)arg1;
- (id)_segmentImages;
- (double)_menuDelayTimeForSegment:(long long)arg1;
- (id)init;

@end

@interface _DVTSlideBackAnimation : NSAnimation
{
}

- (void)setCurrentProgress:(float)arg1;

@end

@interface _DVTSlidingView : NSObject
{
    NSView *view;
    struct CGRect startFrame;
    struct CGRect endFrame;
    double startTime;
    double duration;
}

- (struct CGRect)frameForTime:(double)arg1;
- (struct CGRect)endFrame;
- (id)initWithStartFrame:(struct CGRect)arg1 endFrame:(struct CGRect)arg2 duration:(double)arg3;

@end

@interface _DVTTileViewRubberband : NSView
{
    NSColor *_frameColor;
    NSColor *_fillColor;
}

- (void)drawRect:(struct CGRect)arg1;
- (BOOL)isOpaque;
- (id)initWithFrameColor:(id)arg1 fillColor:(id)arg2;

@end

@interface __DVTNSImageAdditionsClass : NSObject
{
}

@end

